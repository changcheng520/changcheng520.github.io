{"pageProps":{"currentData":{"ID":903333,"author":"1","author_nickname":"wpuser","author_display_name":"Chuckie Chang","author_url":"https://matrixflip.com/api","author_username":"wpuser","author_avatar":"https://secure.gravatar.com/avatar/?s=96&d=mm&r=g","categories":[87],"categories_output":[{"ID":87,"slug":"%e5%bc%80%e5%8f%91%e8%b6%a3%e5%91%b3","name":"开发趣味","term_taxonomy_id":87,"term_group":0,"taxonomy":"category","description":"","parent":0,"count":17}],"tags":[88,294,293,90],"tags_output":[{"ID":88,"slug":"centos","name":"CentOS","term_taxonomy_id":88,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":3},{"ID":294,"slug":"%e5%ae%89%e5%85%a8","name":"安全","term_taxonomy_id":294,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":293,"slug":"%e6%80%a7%e8%83%bd","name":"性能","term_taxonomy_id":293,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":90,"slug":"%e6%9c%8d%e5%8a%a1%e5%99%a8","name":"服务器","term_taxonomy_id":90,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":3}],"thumbnail":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-matrixflipcomapiwpcontentuploadsccomdddbcddcxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-150x150-matrixflipcomapiwpcontentuploadsccomdddbcddcxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-matrixflipcomapiwpcontentuploadsccomdddbcddcxjpg.jpg",770,340,false],"thumbnail_full":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-matrixflipcomapiwpcontentuploadsccomdddbcddcxjpg.jpg",770,340,false],"date_day":"21","date_month":"04","date_month_e":"April","date_year":"2022","date_weekday":"Thursday","title":"CentOS 8.0  LEMP环境的性能与安全优化指南2022版","excerpt":"在上一篇文章《从零部署Linux服务器完全指南2022版(CentOS 8+Nginx+PHP)》的基础上，我们完成了LEMP环境的部署，接下去为了提高网站运行的稳定性，我们将对其进行进一步的性能与安全优化。","content":"<p>在上一篇文章<a href=\"https://matrixflip.com/api/the-complete-guide-to-deploying-a-linux-server-from-scratch-version-2022-for-centos8-nginx-php/\" target=\"_blank\" rel=\"noopener\">《从零部署Linux服务器完全指南2022版(CentOS 8+Nginx+PHP)》</a>的基础上，我们完成了LEMP环境的部署，接下去为了提高网站运行的稳定性，我们将对其进行进一步的性能与安全优化。</p>\n<p>整体步骤分为下面的八个：</p>\n<blockquote><p><strong>（一）Mariadb和Nginx服务断开后自动重启<br />\n（二）PHP配置修改<br />\n（三）启用GZIP压缩<br />\n（四）创建交换空间swap space<br />\n（五）进一步优化Mariadb<br />\n（六）静态文件缓存和PHP缓存<br />\n（七）配置Redis缓存mysql数据<br />\n（八）学会检查内存占用的程序<br />\n（可选）配置DNS到cloudflare提高性能和安全性</strong></p></blockquote>\n<p>这一部分操作顺序不一定要由上至下，但是建议您按照由上至下的顺序循序渐进。</p>\n<h3>（一）Mariadb和Nginx服务断开后自动重启</h3>\n<p><span style=\"color: #ff0000;\">推荐使用SH脚本执行</span><br />\n也可以编辑.sh脚本，并保存，记录.sh文件所在路径【一定确保.sh脚本可用，可以尝试在编辑完成.sh文件后，直接./tomcat.sh 执行脚本文件，查看是否可以正常执行】</p>\n<pre class=\"codePre brush: js;\">mkdir /usr/share/nginx/sh\r\nsudo vi /usr/share/nginx/sh/test.sh</pre>\n<p>测试脚本：</p>\n<pre class=\"codePre brush: js;\">#!/bin/bash\r\nif [[ \"$(systemctl status nginx.service)\" =~ \"active\" ]]\r\nthen\r\n    echo \"process is running\"\r\nelse\r\n    echo \"process is not running\"\r\nfi</pre>\n<p>给予权限和执行</p>\n<pre class=\"codePre brush: js;\">chmod +x /usr/share/nginx/sh/test.sh\r\n/usr/share/nginx/sh/test.sh</pre>\n<p>然后删除</p>\n<pre class=\"codePre brush: js;\">rm -rf /usr/share/nginx/sh/test.sh</pre>\n<p>先查看服务器的时间，根据其时间推断中国区域的时间</p>\n<pre class=\"codePre brush: js;\">date</pre>\n<p>或</p>\n<pre class=\"codePre brush: js;\">timedatectl</pre>\n<p>始终确保使用 crontab -e 编辑您的 crontab。检测cron定时服务是否自启用</p>\n<pre class=\"codePre brush: js;\">systemctl is-enabled crond.service</pre>\n<p>如果未启用，则开启cron自启用</p>\n<pre class=\"codePre brush: js;\">systemctl enable crond.service</pre>\n<p>如果已经启用，想要cron关闭自启动</p>\n<pre class=\"codePre brush: js;\">systemctl disable crond.service</pre>\n<p>查看cron服务的启动状态[只有cron的状态是active running的，才表示cron服务是启动的]</p>\n<pre class=\"codePre brush: js;\">systemctl status crond.service</pre>\n<p>查看增加的定时脚本</p>\n<pre class=\"codePre brush: js;\">crontab -l</pre>\n<p>直接编辑定时脚本</p>\n<pre class=\"codePre brush: js;\">crontab -e</pre>\n<h4>添加自动重启mariadb服务</h4>\n<blockquote><p>新增一个sh脚本，当数据库服务出问题时自动启动mariadb服务</p>\n<pre class=\"codePre brush: js;\">sudo vi /usr/share/nginx/sh/mysql-check.sh</pre>\n<p>脚本如下：</p>\n<pre class=\"codePre brush: js;\">#!/bin/bash\r\nif [[ ! \"$(systemctl is-active mariadb.service )\" =~ \"active\" ]]\r\nthen\r\nsystemctl start mariadb.service\r\nfi</pre>\n<p>保存文件后，修改其权限</p>\n<pre class=\"codePre brush: js;\">chmod u+r+x /usr/share/nginx/sh/mysql-check.sh</pre>\n<p>直接运行，检测是否能执行（不报Permission denied错即可）</p>\n<pre class=\"codePre brush: js;\">/usr/share/nginx/sh/mysql-check.sh</pre>\n<p>添加到自动任务列表,每 15 分钟运行一次命令,</p>\n<pre class=\"codePre brush: js;\">crontab -e</pre>\n<p>脚本如下：</p>\n<pre class=\"codePre brush: js;\">*/15 * * * * /usr/share/nginx/sh/mysql-check.sh</pre>\n</blockquote>\n<h4>添加自动重启nginx服务</h4>\n<blockquote><p>为了更好地解决信号量过载造成的http连接无法建立，导致服务无法启动这问题，增加一个自动清除信号量的脚本：</p>\n<p>新增一个sh脚本，当数据库服务出问题时自动启动mariadb服务</p>\n<pre class=\"codePre brush: js;\">sudo vi /usr/share/nginx/sh/server-check.sh</pre>\n<p>脚本如下：</p>\n<pre class=\"codePre brush: js;\">#!/bin/bash\r\nif [[ ! \"$(systemctl status nginx.service)\" =~ \"active\" ]]\r\nthen\r\nipcrm -a\r\nsystemctl restart nginx.service\r\nfi</pre>\n<p>保存文件后，修改其权限</p>\n<pre class=\"codePre brush: js;\">chmod u+r+x /usr/share/nginx/sh/server-check.sh</pre>\n<p>直接运行，检测是否能执行（不报Permission denied错即可）</p>\n<pre class=\"codePre brush: js;\">/usr/share/nginx/sh/server-check.sh</pre>\n<p>添加到自动任务列表,每 30 分钟运行一次命令,</p>\n<pre class=\"codePre brush: js;\">crontab -e</pre>\n<p>脚本如下：</p>\n<pre class=\"codePre brush: js;\">*/30 * * * * /usr/share/nginx/sh/server-check.sh</pre>\n</blockquote>\n<p>查看脚本</p>\n<pre class=\"codePre brush: js;\">crontab -l</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart crond.service</pre>\n<h3>（二） PHP配置修改</h3>\n<h4>Step1：配置php.ini</h4>\n<p>先备份一个原配置：</p>\n<pre class=\"codePre brush: js;\">cp /etc/php.ini /etc/php.ini.bak</pre>\n<p>修改配置(使用/和n查询字段)</p>\n<pre class=\"codePre brush: js;\">vi /etc/php.ini</pre>\n<p>支持php短标签(如果配置里没有或者被注释了就增加)</p>\n<pre class=\"codePre brush: js;\">short_open_tag = On   #原数值Off</pre>\n<p>修改上传文件限制为100M(方便上传较大的还原数据)</p>\n<pre class=\"codePre brush: js;\">upload_max_filesize = 100M   #原数值2M</pre>\n<p>&nbsp;</p>\n<p>下面这两行要修改一下(如果配置里没有或者被注释了就增加)，否则WP一直是8M</p>\n<pre class=\"codePre brush: js;\">post_max_size = 200M   #原数值8M\r\nmax_execution_time = 300   #原数值30</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart php-fpm nginx</pre>\n<p>&nbsp;</p>\n<blockquote><p>注意：Nginx中设置过server { client_max_body_size 100M; } 属性才能生效</p></blockquote>\n<p>&nbsp;</p>\n<h4>Step2：配置 php-fpm</h4>\n<p>配置php-fpm的session权限，否则会影响WordPress的功能</p>\n<pre class=\"codePre brush: js;\">vi /etc/php-fpm.d/www.conf</pre>\n<p>查找php_value[session.save_path]字符，找到它储存session的位置为<span style=\"background-color: #ffff00;\"> /var/lib/php/session</span></p>\n<pre class=\"codePre brush: js;\">chmod -R 777 /var/lib/php/session\r\nchmod -R 777 /var/lib/php/opcache\r\nchmod -R 777 /var/lib/php/wsdlcache</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart php-fpm nginx</pre>\n<h3>（三）启用GZIP压缩</h3>\n<p>修改Nginx配置，让https支持php等常用配置，代码如下，修改443端口(非www部分)</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p>加入以下代码：</p>\n<pre class=\"codePre brush: js;\">     # Gzip Compression\r\n    gzip on;\r\n    gzip_vary on;\r\n    gzip_min_length 1000;\r\n    gzip_proxied expired no-cache no-store private auth;\r\n    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx</pre>\n<h3>（四）创建交换空间swap space</h3>\n<p>首先使用<span style=\"background-color: #ffff00;\">df -h</span>和<span style=\"background-color: #ffff00;\">free -m</span>命令查看内存使用情况和swap的大小</p>\n<p><img src=\"/static-remote/files/902a9270fb2a13e3a1ec264a-matrixflipcomapiwpcontentuploadsafbaeaecajpg.jpg\" alt=\"\" /></p>\n<p>创建Swap文件（这里创建了4G的交换空间）</p>\n<pre class=\"codePre brush: js;\">sudo fallocate -l 4G /swapfile</pre>\n<p>检查是否创建OK</p>\n<pre class=\"codePre brush: js;\">ls -lh /swapfile</pre>\n<p>启用Swap文件</p>\n<pre class=\"codePre brush: js;\">sudo chmod 600 /swapfile\r\nls -lh /swapfile</pre>\n<p>既然我们的交换文件更安全，我们可以通过输入以下内容告诉我们的系统设置交换空间以供使用：</p>\n<pre class=\"codePre brush: js;\">sudo mkswap /swapfile\r\nsudo swapon /swapfile</pre>\n<p>为了验证程序是否成功，我们可以检查我们的系统现在是否报告交换空间：</p>\n<pre class=\"codePre brush: js;\">swapon -s\r\nfree -m</pre>\n<p>使交换文件永久化</p>\n<pre class=\"codePre brush: js;\">sudo vi /etc/fstab</pre>\n<p>最底部添加下面代码让系统使用并自动挂载</p>\n<pre class=\"codePre brush: js;\">/swapfile swap swap defaults 0 0</pre>\n<p>重新查看</p>\n<pre class=\"codePre brush: js;\">free -m</pre>\n<p><img src=\"/static-remote/files/6bb42232e3c3509309361997-matrixflipcomapiwpcontentuploadsbbecjpg.jpg\" alt=\"\" /></p>\n<blockquote><p><strong>(可选，目前未设置）</strong></p>\n<p>调整 Swappiness 值。Swappiness 是一个 Linux 内核属性，它定义了系统使用交换的频率空间。 Swappiness 可以有一个介于 0 和 100 之间的值。低值将使内核尽量避免交换，而较高的值将使内核更积极地使用交换空间。CentOS 8 上的默认 swappiness 值为 30。您可以查看当前的 swappiness</p>\n<pre class=\"codePre brush: js;\">cat /proc/sys/vm/swappiness</pre>\n<p>虽然 30 的 swappiness 值对于桌面和开发机器是可以的，但对于生产服务器，您可能需要设置一个较低的值。更改参数，要使此参数在重新启动后保持不变：</p>\n<pre class=\"codePre brush: js;\">vi /etc/sysctl.conf\r\nvm.swappiness=10</pre>\n</blockquote>\n<hr />\n<blockquote><p><strong>(可选，目前未设置）</strong></p>\n<p>要停用和删除交换文件，请按照下列步骤操作：</p>\n<p>通过键入以下内容停用交换空间：</p>\n<pre class=\"codePre brush: js;\">sudo swapoff -v /swapfile</pre>\n<p>从 /etc/fstab 中删除交换条目 /swapfile swap swap defaults 0 0</p>\n<p>删除文件</p>\n<pre class=\"codePre brush: js;\">sudo rm /swapfile</pre>\n</blockquote>\n<h3></h3>\n<h3>（五）进一步优化Mariadb</h3>\n<p>模拟和解决可能遇见的问题如下：</p>\n<blockquote><p>(1) Error establishing a database connection<br />\n(2) Warning: mysqli_real_connect(): (HY000/2002): Connection refused in<br />\n(3) Deprecated: mysql_connect(): The mysql extension is deprecated and will be removed in the future: use mysqli or PDO instead in …<br />\n(4) Warning: mysql_connect(): Connection refused…</p></blockquote>\n<h4>Step1: 修改最大连接数</h4>\n<p>避免mysqli_real_connect():Connection refused in类似错误，可能是由于连接数超过了被拒绝</p>\n<p>检查mariadb的版本信息</p>\n<pre class=\"codePre brush: js;\">rpm -qa | grep mariadb</pre>\n<p>查看mariadb的最大连接数为默认151(输入密码)</p>\n<pre class=\"codePre brush: js;\">rpm -qa | grep mariadb</pre>\n<p>检查mysql版本</p>\n<pre class=\"codePre brush: js;\">rpm -qa |grep mysql</pre>\n<p>先备份一个配置文件，修改配置文件，增加最大连接数</p>\n<pre class=\"codePre brush: js;\">sudo cp /etc/my.cnf /etc/my.cnf.bak\r\nvi /etc/my.cnf</pre>\n<p>在调整为 MySQL 分配多少内存时，只需要更新分配给innodb_buffer_pool_size的值。 不要更新其他参数，添加3行代码：</p>\n<blockquote><p>①对于具有小型 RAM (&lt;= 1GB) 的系统,最好使用 MySQL 默认配置值 128MB 作为 InnoDB 缓冲池大小。<br />\n②适用于具有中型 RAM (1GB – 32GB) 的系统,我们可以使用以下粗略的启发式方法计算操作系统需求：256MB + 256 * log2（以 GB 为单位的 RAM 大小）</p></blockquote>\n<pre class=\"codePre brush: js;\">[mysqld]\r\nmax_connections=1000\r\ninnodb_buffer_pool_size = 128M</pre>\n<p><img src=\"/static-remote/files/efb4376be12632d62452950e-matrixflipcomapiwpcontentuploadsefbbedejpg.jpg\" alt=\"\" /></p>\n<p>重启mariadb服务，再次查看mariadb数据库最大连接数，可以看到最大连接数是214，并非我们设置的1000。这是由于mariadb有默认打开文件数限制。可以通过配置/usr/lib/systemd/system/mariadb.service来调大打开文件数目。</p>\n<pre class=\"codePre brush: js;\">systemctl restart mariadb.service</pre>\n<p>先备份一个原配置：</p>\n<pre class=\"codePre brush: js;\">cp /usr/lib/systemd/system/mariadb.service /usr/lib/systemd/system/mariadb.service.bak</pre>\n<p>配置文件</p>\n<pre class=\"codePre brush: js;\">vi /usr/lib/systemd/system/mariadb.service</pre>\n<p>[Service]新添加两行如下参数：</p>\n<pre class=\"codePre brush: js;\">LimitNOFILE=10000\r\nLimitNPROC=10000</pre>\n<p>重新加载系统服务，并重启mariadb服务, 再次查看mariadb数据库最大连接数，可以看到最大连接数已经是1000</p>\n<pre class=\"codePre brush: js;\">systemctl --system daemon-reload  \r\nsystemctl restart mariadb.service</pre>\n<p>再次查看mariadb的最大连接数</p>\n<pre class=\"codePre brush: js;\">mysqladmin -uroot -p variables |grep max_connections</pre>\n<p><img src=\"/static-remote/files/0718ff54cde627b357608df7-matrixflipcomapiwpcontentuploadsffcdebdfjpg.jpg\" alt=\"\" /></p>\n<p>查看mysql的建立的连接数</p>\n<pre class=\"codePre brush: js;\">netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}'</pre>\n<p>&nbsp;</p>\n<blockquote><p>进入mysql终端，此时输入密码</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\">mysql -u root -p</pre>\n<p>进入mysql终端后的命令</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\">select version();   #查看当前mysql版本\r\nshow status like 'Threads%';    #查看当前mysql连接数\r\nshow variables like '%max_connections%';   #查看当前mysql最大连接数\r\nshow variables like 'log_%';  #是否启用错误日志\r\nshow master status; #当前日志是否存在\r\nQUIT; #退出</pre>\n</blockquote>\n<p>&nbsp;</p>\n<h4>Step2: Mariadb关闭后自动重连接</h4>\n<p>查看mariadb的日志</p>\n<pre class=\"codePre brush: js;\">tail /var/log/mariadb/mariadb.log</pre>\n<p>崩溃后自动重启</p>\n<pre class=\"codePre brush: js;\">vi /etc/systemd/system/multi-user.target.wants/mariadb.service</pre>\n<p>在[Service]下面加入以下行（如果已经存在则修改值，默认值为<span style=\"color: #ff0000;\">on-abort</span>中止）</p>\n<pre class=\"codePre brush: js;\">Restart=always</pre>\n<p>重新加载系统守护程序</p>\n<pre class=\"codePre brush: js;\">sudo systemctl daemon-reload\r\nsudo systemctl restart mariadb.service</pre>\n<p>重启服务器,稍等十几秒后恢复</p>\n<pre class=\"codePre brush: js;\">sudo reboot</pre>\n<p>模拟数据库崩溃的效果，查找进程看到类似ID后可以kill掉</p>\n<pre class=\"codePre brush: js;\">ps -ef | grep mysql</pre>\n<p>强制终止进程（如果/etc/systemd/system/multi-user.target.wants/mariadb.service文件修改成功，择数据库被kill后，会立刻重启恢复）</p>\n<pre class=\"codePre brush: js;\">sudo kill -9 1179</pre>\n<p><img src=\"/static-remote/files/5ad1f21e3652b91cd741ab73-matrixflipcomapiwpcontentuploadsadfebcdabjpg.jpg\" alt=\"\" /></p>\n<h4>Step3: Mysql进程崩溃后自动重启</h4>\n<p>需要配置/etc/inittab文件，首先备份一个，编辑此文件一定要非常小心</p>\n<pre class=\"codePre brush: js;\">sudo cp /etc/inittab /etc/inittab.bak\r\nvi /etc/inittab</pre>\n<p>结尾处增加一行，在/ etc / inittab文件中放置一个命令，以在mysqld_safe进程崩溃时重新生成mysqld_safe进程。 它有四个字段，每个字段与冒号<span style=\"background-color: #ffff00;\">（:)</span>分隔开</p>\n<pre class=\"codePre brush: js;\">ms:2345:respawn:/bin/sh /usr/bin/mysqld_safe</pre>\n<p>保存后重启服务</p>\n<pre class=\"codePre brush: js;\">systemctl restart mariadb.service</pre>\n<p>重启服务器,稍等十几秒后恢复</p>\n<pre class=\"codePre brush: js;\">sudo reboot</pre>\n<p>查看服务状态</p>\n<pre class=\"codePre brush: js;\">sudo service mariadb status</pre>\n<h3>（六）静态文件缓存和PHP缓存</h3>\n<p><span style=\"color: #ff0000;\"><strong>特别注意：</strong>不要使用 /usr/share/nginx/目录作为缓存文件夹，因为如果不执行sudo setenforce 0，系统将无法自己创建缓存文件，绕过SELinux是很危险的，使用/var/lib/nginx/文件夹，默认被SELinux允许</span></p>\n<h4>Step1: PHP缓存设置</h4>\n<p>先配置nginx的根文件，配置PHP的缓存</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/nginx.conf</pre>\n<p>在<span style=\"background-color: #ffff00;\">http { ... }</span> 中加入代码，使用/var/lib/nginx/cache作为php的缓存文件夹</p>\n<pre class=\"codePre brush: js;\">    # Enable PHP cache\r\n    fastcgi_cache_path /var/lib/nginx/cache levels=1:2 keys_zone=MYAPP:100m inactive=60m max_size=40m;\r\n    fastcgi_cache_key \"$scheme$request_method$host$request_uri\";</pre>\n<p>接着修改server配置文件</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p><span style=\"background-color: #ffff00;\">server { location ~ \\.php$ { ... } }</span>中加入代码配置PHP缓存，60m是60分钟：</p>\n<pre class=\"codePre brush: js;\">        # Enable PHP cache\r\n        fastcgi_cache MYAPP;\r\n        fastcgi_cache_valid 200 301 302 60m;\r\n        fastcgi_cache_use_stale error timeout updating invalid_header http_500 http_503;\r\n        fastcgi_cache_min_uses 1;\r\n        fastcgi_cache_lock on;\r\n        add_header X-FastCGI-Cache $upstream_cache_status;</pre>\n<p>生成缓存文件夹，给权限</p>\n<pre class=\"codePre brush: js;\">mkdir /var/lib/nginx/cache</pre>\n<p><span style=\"color: #ff0000;\">必须给予权限才能从客户端访问缓存:</span></p>\n<pre class=\"codePre brush: js;\">sudo chown -R myftp1:www-data /var/lib/nginx/cache</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx php-fpm</pre>\n<p>新建一个PHP缓存测试文件</p>\n<pre class=\"codePre brush: js;\">vi /usr/share/nginx/html/wordpress/time.php</pre>\n<p>脚本如下：</p>\n<pre class=\"codePre brush: js;\">&lt;?php\r\necho time();\r\n?&gt;</pre>\n<p>测试缓存效果：</p>\n<pre class=\"codePre brush: js;\">curl -I https://yoursite.com/time.php</pre>\n<p><strong>x-fastcgi-cache</strong> 的值出现<span style=\"background-color: #ffff00;\">HIT</span>表示生效，而且time.php的时间数值不会变动</p>\n<p><img src=\"/static-remote/files/108f763c025f5b53287fe939-matrixflipcomapiwpcontentuploadsfcfbfejpg.jpg\" alt=\"\" /></p>\n<p>清除缓存：</p>\n<pre class=\"codePre brush: js;\">rm -rf /var/lib/nginx/cache/*</pre>\n<h4>Step2: Nginx静态文件缓存设置</h4>\n<p>先配置nginx的根文件，配置静态文件缓存的Expires map</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/nginx.conf</pre>\n<p>在<span style=\"background-color: #ffff00;\">http { ... }</span> 中加入代码（缓存某些目录下的文件30天，HTML文件不会被缓存）</p>\n<pre class=\"codePre brush: js;\">    # Expires map\r\n    map $sent_http_content_type $expires {\r\n        default                    off;\r\n        text/html                  epoch;\r\n        text/css                   30d;\r\n        application/javascript     30d;\r\n        ~image/                    30d;\r\n        ~images/                   30d;\r\n        ~videos/                   30d;\r\n        ~models/                   30d;\r\n        ~fonts/                    30d;\r\n        ~font/                     30d;\r\n        ~wp-content/uploads/       30d; \r\n    }</pre>\n<p>接着修改server配置文件</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p><span style=\"background-color: #ffff00;\">server { ... }</span>中加入代码配置静态文件缓存：</p>\n<pre class=\"codePre brush: js;\">    # Expires static files\r\n    expires $expires;</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx</pre>\n<p>测试缓存效果【注意：此缓存是储存在客户端(浏览器)上的配置，不是直接从服务端读取】：</p>\n<pre class=\"codePre brush: js;\">curl -I /static-remote/files/xxxxxxxxx-yoursitecomxxxxxxxxxjpg.jpg\r\n</pre>\n<p><img src=\"/static-remote/files/98786e1222cbd526f68bdbf1-matrixflipcomapiwpcontentuploadsecbdfbdbfjpg.jpg\" alt=\"\" /></p>\n<p><img src=\"/static-remote/files/df7a94714ae20101dfccb7ea-matrixflipcomapiwpcontentuploadsdfaaedfccbeajpg.jpg\" alt=\"\" /></p>\n<h3>（七）配置Redis缓存mysql数据</h3>\n<p>安装redis（目前版本5.0.3）</p>\n<pre class=\"codePre brush: js;\">dnf install redis -y</pre>\n<p>启动</p>\n<pre class=\"codePre brush: js;\">systemctl start redis\r\nsystemctl enable redis</pre>\n<p>查看状态</p>\n<pre class=\"codePre brush: js;\">systemctl status redis</pre>\n<p>检查端口</p>\n<pre class=\"codePre brush: js;\">ss -ant | grep 6379  或者  semanage port -l | grep \"redis\"</pre>\n<p>测试redis连接</p>\n<pre class=\"codePre brush: js;\">redis-cli</pre>\n<p><strong>输入：<span style=\"background-color: #ffff00;\">ping<br />\n</span>输入：<span style=\"background-color: #ffff00;\">INFO server</span></strong></p>\n<p><img src=\"/static-remote/files/77c66b8fda72b84189cede2c-matrixflipcomapiwpcontentuploadscbfdabcedecjpg.jpg\" alt=\"\" /></p>\n<p>配置redis,先备份一个</p>\n<pre class=\"codePre brush: js;\">cp /etc/redis.conf /etc/redis.conf.bak</pre>\n<p>配置</p>\n<pre class=\"codePre brush: js;\">vi /etc/redis.conf</pre>\n<p>结尾处添加：</p>\n<pre class=\"codePre brush: js;\">maxmemory 128mb\r\nmaxmemory-policy allkeys-lru</pre>\n<p>&nbsp;</p>\n<blockquote><p><strong>（可选）</strong></p>\n<p>默认情况下，redis-cli 允许您在 Raedis shell 中运行任何命令。 因此，使用密码保护 Redis shell 是一个好主意。 您可以启用密码验证：</p>\n<p>找到下面这行：</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\"># requirepass foobared</pre>\n<p>&nbsp;</p>\n<p>改成密码即可：</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\">requirepass yourpassword</pre>\n</blockquote>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart redis</pre>\n<p>WordPress安装插件来启用和检查redis使用情况</p>\n<p><strong>Redis Object Cache</strong>用来启用redis</p>\n<p><img src=\"/static-remote/files/6f92ed6bb2e8d8bd2ee362c8-matrixflipcomapiwpcontentuploadsfedbbedbdeecjpg.jpg\" alt=\"\" /></p>\n<p><strong>Query Monitor</strong>用来检测mysql链接情况，出现下图表示存在缓存（OK后卸载即可，使用一个插件就行）</p>\n<p><img src=\"/static-remote/files/dbb5907316dd4ccdaf6cfc0d-matrixflipcomapiwpcontentuploadsdbbddccdafcfcdjpg.jpg\" alt=\"\" /></p>\n<p>可以使用终端检查</p>\n<pre class=\"codePre brush: js;\">redis-cli monitor</pre>\n<p>刷新网站出现</p>\n<p><img src=\"/static-remote/files/6a7f44ef1037dab0b3dfc41e-matrixflipcomapiwpcontentuploadsafefdabbdfcejpg.jpg\" alt=\"\" /></p>\n<p><span style=\"color: #ff0000;\"><strong>注意：</strong>SELinux安全策略 （sudo setenforce 1）启动后redis连接将会失效，未来保障安全，我们不能关闭安全策略，所以暂时禁用redis。</span></p>\n<h3>（八）学会检查内存占用的程序</h3>\n<p>可以简单实用top命令，然后访问网站，就会动态出现内存占用的程序，学会分析他们</p>\n<p><img src=\"/static-remote/files/d084ae19524ed0b082f53106-matrixflipcomapiwpcontentuploadsdaeedbfjpg.jpg\" alt=\"\" /></p>\n<h3>（可选） 配置DNS到cloudflare提高性能和安全性</h3>\n<p>首先注册Cloudflare账号，然后添加一个域名，登录你的域名注册商的后台，把DNS修改为<span style=\"background-color: #ffff00;\">dax.ns.cloudflare.com</span> 和<span style=\"background-color: #ffff00;\">sue.ns.cloudflare.com</span>即可，具体的设置可以参看Cloudflare官网</p>\n<p><span style=\"color: #ff0000;\"><strong>注意：</strong>Cloudflare不支持特殊端口号，如果网站使用了其它端口号挂载资源，需要使用Cloudflare Spectrum来支持其它端口号（付费服务）</span></p>\n<h3>结语</h3>\n<p>看到这了，差不多完整的一整套部署已经可以正常稳定（相对稳定，并不代表不会被攻击，或者使用的后台有漏洞，这些需要自己去注意）使用了。目前CentOS 8的生命周期已经结束，我们也可以在此基础上，继续升级到CentOS Stream 9，整体的搭建思路其实差不多，主要注意一些命令、安全机制的差异，之后如果我自己的某些站点启用了CentOS Stream 9的话，也会实战一下从零部署并发布相关文章，希望本文对你有帮助，感兴趣可以继续关注我，会不定期分享一些东西。：）</p>\n","slug":"performance-and-security-optimization-guide-for-centos8-lemp-environment-2022","prev":[{"ID":893333,"title":"从零部署Linux服务器完全指南2022版(CentOS 8+Nginx+PHP)","excerpt":"之前我的一个CentOS 7 Apache的站点被攻击，导致流量过载损失了一笔钱，由于也是边学习边部署的，有不少安全隐患，为了避免常见安全隐患再次发生，后来找出大概的原因后决定重新部署一个基于CentOS 8 Nginx的服务器。这也是充分利用Google和自己探索的一些从零部署的技巧和方法。","slug":"the-complete-guide-to-deploying-a-linux-server-from-scratch-version-2022-for-centos8-nginx-php","post_date":"2022-04-06 17:28:22","post_date_gmt":"2022-04-06 17:28:22","thumbnail":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-matrixflipcomapiwpcontentuploadsccomeabeedcxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-150x150-matrixflipcomapiwpcontentuploadsccomeabeedcxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-matrixflipcomapiwpcontentuploadsccomeabeedcxjpg.jpg",770,340,false]}],"next":[{"ID":24272280,"title":"理解微前端 - 从部署一套自己的前端开发环境(脚手架)开始","excerpt":"很久以前的前端，没有太多工具化工程化思想，一堆代码塞进去完事儿。如今前端已经很卷，卷到了一个开发环境都够你折腾一宿。那么我们抛开类似nextjs、create-react-app这类的工具或框架，我们该如何从零部署一个属于自己的开发环境呢？这篇文章将讲述如何配置一个基础的脚手架，支持React、TypeScrit和单元测试等必要的功能。在这个基础上，大家能够很方便去个性化脚手架。","slug":"b214e53f0c655e422783718d","post_date":"2022-05-13 08:15:01","post_date_gmt":"2022-05-13 08:15:01","thumbnail":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-matrixflipcomapiwpcontentuploadsccomfcccaxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-150x150-matrixflipcomapiwpcontentuploadsccomfcccaxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-matrixflipcomapiwpcontentuploadsccomfcccaxjpg.jpg",770,340,false]}],"post_date":"2022-04-21 16:35:43","post_date_gmt":"2022-04-21 16:35:43","post_status":"publish","comment_status":"open","ping_status":"open","post_password":"","to_ping":"","pinged":"","post_modified":"2022-04-22 08:49:10","post_modified_gmt":"2022-04-22 08:49:10","post_content_filtered":"","post_parent":0,"guid":"https://matrixflip.com/api/?post_type=post&#038;p=903333","menu_order":0,"post_type":"post","post_mime_type":"","comment_count":"0","filter":"raw"},"postID":"performance-and-security-optimization-guide-for-centos8-lemp-environment-2022"},"__N_SSG":true}