{"pageProps":{"currentData":{"ID":24272785,"author":"2","author_nickname":"Matrix Flip","author_display_name":"Chuckie Chang","author_url":"","author_username":"changcheng","author_avatar":"https://secure.gravatar.com/avatar/?s=96&d=mm&r=g","categories":[87],"categories_output":[{"ID":87,"slug":"%e5%bc%80%e5%8f%91%e8%b6%a3%e5%91%b3","name":"开发趣味","term_taxonomy_id":87,"term_group":0,"taxonomy":"category","description":"","parent":0,"count":17}],"tags":[308,309,310],"tags_output":[{"ID":308,"slug":"envoy","name":"envoy","term_taxonomy_id":308,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":309,"slug":"grpc","name":"grpc","term_taxonomy_id":309,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":310,"slug":"http2","name":"http2","term_taxonomy_id":310,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1}],"thumbnail":["/static-remote/files/medium-blog-cover-1200x771-grpc-770x340-matrixflipcomapiwpcontentuploadsmediumblogcoverxgrpcxjpg.jpg",770,340,true],"thumbnail_mini":["/static-remote/files/medium-blog-cover-1200x771-grpc-150x150-matrixflipcomapiwpcontentuploadsmediumblogcoverxgrpcxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/medium-blog-cover-1200x771-grpc-1200x680-matrixflipcomapiwpcontentuploadsmediumblogcoverxgrpcxjpg.jpg",1200,680,true],"thumbnail_full":["/static-remote/files/medium-blog-cover-1200x771-grpc-matrixflipcomapiwpcontentuploadsmediumblogcoverxgrpcjpg.jpg",1200,771,false],"date_day":"16","date_month":"03","date_month_e":"March","date_year":"2023","date_weekday":"Thursday","title":"gRPC与前端应用的完整实现过程","excerpt":"最近我在参与设计一个软件的架构，期间也遇到不少困难，但是只要用心去思考还是可以解决的。前端和隔离层（包括 UI层，文件管理系统，插件系统，数据处理等）的微服务基于 React + Nextjs + Nodejs + Lerna + gRPC，后端协议遵循HTTP/2的长连接及其双向通信。那么不得不说一说 gRPC。也许很多中小型项目都并未采用，它相对于REST是有一些麻烦的地方。但是鉴于大型项目的数据交互，请求与相应，也许它是一个非常好的选择。关于 gRPC 请自行去搜索相关资料了解，这篇文章主要是完整实现一个从零到一的演示。","content":"<p>最近我在参与设计一个软件的架构，期间也遇到不少困难，但是只要用心去思考还是可以解决的。前端和隔离层（包括 UI层，文件管理系统，插件系统，数据处理等）的微服务基于 React + Nextjs + Nodejs + Lerna + gRPC，后端协议遵循HTTP/2的长连接及其双向通信。那么不得不说一说 gRPC。也许很多中小型项目都并未采用，它相对于REST是有一些麻烦的地方。但是鉴于大型项目的数据交互，请求与相应，也许它是一个非常好的选择。关于 gRPC 请自行去搜索相关资料了解，这篇文章主要是完整实现一个从零到一的演示。</p>\n<p>这个过程中，编译 proto 文件会用到 grpc, grpc-web 和相关的一些插件, 服务测试将使用 envoy 代理和 webpack。好了废话不多说，我们开始吧：</p>\n<p>&nbsp;</p>\n<h4><img class=\"alignnone size-full wp-image-24272798\" src=\"/static-remote/files/grpc-preview-matrixflipcomapiwpcontentuploadsgrpcpreviewgif.gif\" alt=\"\" width=\"1280\" height=\"720\" /></h4>\n<h4 id=\"-\">目录结构</h4>\n<pre>grpc-getting-started/\r\n├── README<span class=\"hljs-selector-class\">.md</span>\r\n├── LICENSE \r\n├── package<span class=\"hljs-selector-class\">.json</span>\r\n├── package-lock<span class=\"hljs-selector-class\">.json</span>\r\n├── envoy<span class=\"hljs-selector-class\">.yaml</span>\r\n├── server<span class=\"hljs-selector-class\">.js</span>\r\n├── build/          \r\n├── scripts/  \r\n├── dist/\r\n│   ├── client-main<span class=\"hljs-selector-class\">.js</span>\r\n│   └── index<span class=\"hljs-selector-class\">.html</span>\r\n├── proto/                \r\n│   ├── example<span class=\"hljs-selector-class\">.proto</span>\r\n│   └── other<span class=\"hljs-selector-class\">.proto</span>\r\n├── src/\r\n│   ├── proto/\r\n│   ├── client/\r\n│   └── server/\r\n└──\r\n</pre>\n<h3 id=\"-1-\">(1) 定义服务</h3>\n<p>我们首先定义一个服务，指定可以远程调用的方法及其参数和返回类型。</p>\n<p>这是使用在 .proto 文件中使用协议缓冲完成的，它们还用于描述有效负载消息的结构。</p>\n<p>创建一个 proto 文件 <code>proto/example.proto</code>：</p>\n<pre><span class=\"hljs-comment\">// 步骤 1. 基本配置</span>\r\n<span class=\"hljs-comment\">// ================================================ ====</span>\r\n<span class=\"hljs-comment\">// 第一行告诉编译器这个文件中使用了什么语法。</span>\r\n<span class=\"hljs-comment\">// 第二行属于命名空间，用来防止不同的消息类型有命名冲突</span>\r\n\r\nsyntax = <span class=\"hljs-string\">\"proto3\"</span>;\r\n<span class=\"hljs-keyword\">package</span> hello;\r\n\r\n\r\n<span class=\"hljs-comment\">// 步骤 2. 定义消息结构</span>\r\n<span class=\"hljs-comment\">// ================================================ ====</span>\r\n<span class=\"hljs-comment\">// 这定义了请求负载。 此处进入消息的每个属性都与其类型一起定义。</span>\r\n<span class=\"hljs-comment\">// 需要为每个属性分配一个唯一的编号，称为标签。 协议缓冲区使用此标记来表示属性，而不是使用属性名称。</span>\r\n<span class=\"hljs-comment\">// 所以，不像 JSON 我们每次都会传递属性名称 firstName，protocol buffer 会使用数字 1 来表示 firstName。 响应负载定义类似于请求。</span>\r\n\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">HelloRequest</span> </span>{\r\n    <span class=\"hljs-built_in\">string</span> firstName = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-built_in\">string</span> lastName = <span class=\"hljs-number\">2</span>;\r\n}\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">HelloResponse</span> </span>{\r\n    <span class=\"hljs-built_in\">string</span> greeting = <span class=\"hljs-number\">1</span>;\r\n}\r\n\r\n\r\n<span class=\"hljs-comment\">// 步骤 3. 定义服务契约</span>\r\n<span class=\"hljs-comment\">// ================================================ ====</span>\r\n<span class=\"hljs-comment\">// 最后，让我们定义服务契约。 对于我们的 HelloService，我们定义了一个 GetHelloReq() 操作：</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">service</span> <span class=\"hljs-title\">HelloService</span> </span>{\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">rpc</span> GetHelloReq(HelloRequest) <span class=\"hljs-keyword\">returns</span> (HelloResponse)</span>;\r\n}\r\n</pre>\n<h3 id=\"-2-proto-js-\">(2) 生成代码 —— 将 <code>.proto</code> 文件编译为 <code>.js</code></h3>\n<h4 id=\"-2-1-grpc-web-https-github-com-grpc-grpc-web-\">步骤 2.1。 安装 <a href=\"https://github.com/grpc/grpc-web\">grpc-web</a> 运行时库</h4>\n<pre><span class=\"hljs-variable\">$ </span>cd /{your_directory}/grpc-getting-started\r\n<span class=\"hljs-variable\">$ </span>npm i --save-dev grpc-web\r\n</pre>\n<h4 id=\"-2-2-typescript-ts-protoc-gen-https-github-com-improbable-eng-ts-protoc-gen-\">步骤 2.2。 安装生成 TypeScript 的插件 <a href=\"https://github.com/improbable-eng/ts-protoc-gen\">ts-protoc-gen</a></h4>\n<pre>$ <span class=\"hljs-built_in\">npm</span> i --save-dev ts-protoc-gen @improbable-eng/grpc-web\r\n</pre>\n<h4 id=\"-2-3-protoc-https-github-com-protocolbuffers-protobuf-releases-\">步骤 2.3。 安装代码生成器插件 <a href=\"https://github.com/protocolbuffers/protobuf/releases\">protoc</a></h4>\n<pre><span class=\"hljs-variable\">$ </span>PROTOC_ZIP=protoc-<span class=\"hljs-number\">22.2</span>-osx-x86_64.zip\r\n<span class=\"hljs-variable\">$ </span>curl -OL <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/github.com/protocolbuffers</span><span class=\"hljs-regexp\">/protobuf/releases</span><span class=\"hljs-regexp\">/download/v</span>22.<span class=\"hljs-number\">2</span>/<span class=\"hljs-variable\">$PROTOC_ZIP</span>\r\n<span class=\"hljs-variable\">$ </span>sudo unzip -o <span class=\"hljs-variable\">$PROTOC_ZIP</span> -d /usr/local bin/protoc\r\n<span class=\"hljs-variable\">$ </span>sudo unzip -o <span class=\"hljs-variable\">$PROTOC_ZIP</span> -d /usr/local <span class=\"hljs-string\">'include/*'</span>\r\n<span class=\"hljs-variable\">$ </span>rm -f <span class=\"hljs-variable\">$PROTOC_ZIP</span>\r\n</pre>\n<p>也可以使用如下命令安装（macOS）：</p>\n<pre>$ <span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>protobuf\r\n</pre>\n<p>安装完成后查看版本</p>\n<pre>$ protoc <span class=\"hljs-comment\">--version</span>\r\n</pre>\n<h4 id=\"-2-4-protoc-gen-js-https-www-npmjs-com-package-protoc-gen-js-protoc-gen-grpc-web-https-www-npmjs-com-package-protoc-gen-grpc-web-\">步骤 2.4。 继续安装插件 <a href=\"https://www.npmjs.com/package/protoc-gen-js\">protoc-gen-js</a> 和 <a href=\"https://www.npmjs.com/package/protoc-gen-grpc-web\">protoc-gen-grpc-web</a></h4>\n<pre>$ sudo npm i -<span class=\"hljs-keyword\">g</span> protoc-<span class=\"hljs-keyword\">gen</span>-js protoc-<span class=\"hljs-keyword\">gen</span>-grpc-web\r\n</pre>\n<h4 id=\"-2-5-\">步骤 2.5。 编译执行</h4>\n<p>运行以下命令编译<code>.proto</code>文件，生成我们可以识别的<code>.js</code>文件。</p>\n<pre>$ npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build:protos</span>\r\n</pre>\n<p>它会生成四个文件:</p>\n<ul>\n<li><code>src/proto/example_pb.js</code></li>\n<li><code>src/proto/example_pb.d.ts</code></li>\n<li><code>src/proto/example_pb_service.js</code></li>\n<li><code>src/proto/example_pb_service.d.ts</code></li>\n</ul>\n<hr />\n<blockquote><p>可以下载<a href=\"https://github.com/protocolbuffers/protobuf-javascript\">protobuf-javascript</a>进行测试。 教程请访问<a href=\"https://grpc.io/docs/platforms/web/basics/\">这里</a>。</p>\n<p><code>sh<br />\n$ mkdir src/proto</code></p>\n<p>要生成 <strong>protobuf 消息类</strong>，请运行以下命令：</p>\n<p><code>sh<br />\n$ protoc  --proto_path=./proto --plugin=protoc-gen-ts=./node_modules/.bin/protoc-gen-ts --js_out=import_style=commonjs,binary:src/proto --ts_out=\"src/proto\" proto/example.proto</code></p>\n<p>要生成 <strong>客户端存根</strong>，请运行以下命令：</p>\n<p><code>sh<br />\n$ protoc  --proto_path=./proto --plugin=protoc-gen-ts=./node_modules/.bin/protoc-gen-ts --ts_out=\"service=grpc-web:src/proto\"  proto/example.proto</code></p></blockquote>\n<h3 id=\"-3-\">(3) 服务器入口</h3>\n<p>接下来，我们在后端 gRPC 服务中使用 Node 实现我们的 <code>HelloService</code> 接口。 这将处理来自客户的请求。 教程请访问<a href=\"https://grpc.io/docs/platforms/web/basics/\">这里</a>。</p>\n<h4 id=\"-3-1-grpc-node-https-github-com-grpc-grpc-node-tree-master-\">步骤 3.1。 安装插件 <a href=\"https://github.com/grpc/grpc-node/tree/master\">grpc-node</a></h4>\n<pre>$ <span class=\"hljs-built_in\">npm</span> i --save-dev @grpc/grpc-js @grpc/proto-loader\r\n</pre>\n<h4 id=\"-3-2-src-server-index-js-\">步骤 3.2。 创建文件 <code>src/server/index.js</code>：</h4>\n<pre>\r\nconst path = require('path');\r\nconst grpc = require(\"@grpc/grpc-js\");\r\nconst protoLoader = require(\"@grpc/proto-loader\");\r\nconst PROTO_PATH = path.resolve(__dirname, '../../proto/example.proto');\r\n\r\n\r\nconst packageDefinition = protoLoader.loadSync(PROTO_PATH, {\r\n    keepCase: true,\r\n    longs: String,\r\n    enums: String,\r\n    defaults: true,\r\n    oneofs: true,\r\n});\r\nconst newsProto = grpc.loadPackageDefinition(packageDefinition);\r\n/*\r\n{\r\n    hello: {\r\n        HelloRequest: {\r\n            format: 'Protocol Buffer 3 DescriptorProto',\r\n            type: [Object],\r\n            fileDescriptorProtos: [Array]\r\n        },\r\n        HelloResponse: {\r\n            format: 'Protocol Buffer 3 DescriptorProto',\r\n            type: [Object],\r\n            fileDescriptorProtos: [Array]\r\n        },\r\n        HelloService: [class ServiceClientImpl extends Client] {\r\n            service: [Object],\r\n            serviceName: 'HelloService'\r\n        }\r\n    }\r\n} \r\n*/\r\n\r\n\r\nclass gRPC extends grpc.Server {\r\n    constructor() {\r\n        super();\r\n        this.addService(newsProto.hello.HelloService.service, {\r\n            getHelloReq: this.getHelloReq\r\n        });\r\n    }\r\n\r\n    /**\r\n     * request handler.\r\n     */\r\n    getHelloReq(call, callback) {\r\n        const { firstName, lastName } = call.request;\r\n\r\n        if( firstName !== '' ) {\r\n            callback(null, {\r\n                greeting: `Hello: ${firstName} ${lastName}`\r\n            });\r\n        } else {\r\n            callback({\r\n                message: 'Name not found',\r\n                code: grpc.status.INVALID_ARGUMENT\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction main() {\r\n    const server = new gRPC();\r\n    server.bindAsync(\r\n        '127.0.0.1:9090', grpc.ServerCredentials.createInsecure(), (err, port) =&gt; {\r\n            if (err) throw err;\r\n\r\n            console.log(`Server running at http://127.0.0.1:${port}`);\r\n            server.start();\r\n        }\r\n    );\r\n}\r\n\r\nmain();\r\n\r\n\r\n/*\r\n\r\nfunction copyMetadata(call) { \r\n    const metadata = call.metadata.getMap();\r\n    const responseMetadata = new grpc.Metadata();\r\n    for (let key in metadata) {\r\n        responseMetadata.set(key, metadata[key]);\r\n    }\r\n    return responseMetadata;\r\n}\r\nfunction getHelloReq(call, callback) { \r\n    const { firstName, lastName } = call.request;\r\n\r\n    if( firstName !== '' ) {\r\n        callback(null, {\r\n            greeting: `Hello: ${firstName} ${lastName}`\r\n        }, copyMetadata(call));\r\n    } else {\r\n        callback({\r\n            message: 'Name not found',\r\n            code: grpc.status.INVALID_ARGUMENT\r\n        });\r\n    }\r\n}\r\nfunction main() {\r\n    const server = new grpc.Server();\r\n    server.addService(newsProto.hello.HelloService.service, {\r\n        getHelloReq: getHelloReq\r\n    });\r\n    ...\r\n}\r\n\r\n*/\r\n</pre>\n<h3 id=\"-4-\">(4) 客户端入口</h3>\n<p>创建文件 <code>src/client/index.js</code>：</p>\n<pre>const { HelloRequest } = require('../proto/example_pb.js');\r\nconst { HelloServiceClient } = require('../proto/example_pb_service.js');\r\n\r\n\r\nconst client = new HelloServiceClient('http://' + window.location.hostname + ':12345', null, null);\r\n\r\n\r\nfunction todo(str1, str2) {\r\n\r\n    return new Promise((resolve, reject) =&gt; {\r\n        const req = new HelloRequest();\r\n        req.setFirstname(str1);\r\n        req.setLastname(str2);\r\n\r\n        client.getHelloReq(req, {}, function (err, response) {\r\n            if (err) {\r\n                resolve(err);\r\n                //reject(err);\r\n            } else {\r\n                resolve(response.getGreeting());\r\n            }\r\n        });\r\n        \r\n    })\r\n}\r\n\r\n// 创建一个表单\r\n//===================\r\nconst container = document.createElement(\"div\");\r\n\r\nconst input1 = document.createElement(\"input\");\r\ninput1.type = \"text\";\r\ninput1.id = \"input1\";\r\ninput1.placeholder = 'FirstName'\r\ncontainer.appendChild(input1);\r\n\r\nconst input2 = document.createElement(\"input\");\r\ninput2.type = \"text\";\r\ninput2.id = \"input2\";\r\ninput2.placeholder = 'LastName'\r\ncontainer.appendChild(input2);\r\n\r\nconst hr = document.createElement(\"hr\");\r\ncontainer.appendChild(hr);\r\n\r\nconst btn = document.createElement(\"button\");\r\nbtn.innerHTML = \"Submit\";\r\nbtn.id = \"btn\";\r\ncontainer.appendChild(btn);\r\n\r\ndocument.body.appendChild(container);\r\n\r\nconst $btn = document.getElementById('btn');\r\n$btn.addEventListener('click', (e) =&gt; {\r\n    e.preventDefault();\r\n    main(document.getElementById('input1').value, document.getElementById('input2').value);\r\n});\r\n\r\n\r\n// 显示后端服务器响应的内容\r\n//===================\r\nasync function main(str1, str2) {\r\n    const data = await todo(str1, str2);\r\n    console.log(data);\r\n\r\n    const div = document.createElement(\"h3\");\r\n    div.innerHTML = data;\r\n    document.body.appendChild(div);\r\n}\r\n\r\n</pre>\n<h3 id=\"-5-\">(5) 生成客户端文件</h3>\n<p>最后，将所有这些放在一起，我们可以将所有相关的 JS 文件编译成一个可以在浏览器中使用的 JS 库。</p>\n<h4 id=\"-5-1-\">步骤 5.1。 安装依赖</h4>\n<pre>$ npm i --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> webpack webpack-cli webpack-<span class=\"hljs-built_in\">dev</span>-server html-webpack-plugin browserify google-protobuf\r\n</pre>\n<h4 id=\"-5-2-webpack-\">步骤 5.2。 为自定义 webpack 配置创建一个文件</h4>\n<p><code>build/client.config.js</code>:</p>\n<pre><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\r\n<span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"html-webpack-plugin\"</span>);\r\n\r\n<span class=\"hljs-keyword\">const</span> clientPort = process.env.PORT || <span class=\"hljs-number\">10005</span>;\r\n<span class=\"hljs-keyword\">const</span> clientHost = process.env.HOST || <span class=\"hljs-string\">'localhost'</span>;\r\n<span class=\"hljs-keyword\">const</span> devMode = process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>;\r\n\r\n<span class=\"hljs-built_in\">module</span>.exports = {\r\n    <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'production'</span>,\r\n    <span class=\"hljs-attr\">performance</span>: {\r\n        <span class=\"hljs-attr\">hints</span>: !devMode ? <span class=\"hljs-string\">\"warning\"</span> : <span class=\"hljs-literal\">false</span>\r\n    }, \r\n    <span class=\"hljs-attr\">resolve</span>: {\r\n        <span class=\"hljs-attr\">fallback</span>: {\r\n            <span class=\"hljs-string\">\"fs\"</span>: <span class=\"hljs-literal\">false</span>\r\n          },\r\n        <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">'.js'</span>]\r\n    },\r\n    <span class=\"hljs-attr\">entry</span>: {\r\n        <span class=\"hljs-string\">'client-main'</span>: <span class=\"hljs-string\">'./src/client/index.js'</span>\r\n    },\r\n    <span class=\"hljs-attr\">output</span>: {\r\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'[name].js'</span>,\r\n        <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">'../dist'</span>)\r\n    },\r\n    <span class=\"hljs-attr\">plugins</span>: [\r\n        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\r\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"Webpack Output\"</span>,\r\n        }),\r\n    ],\r\n    <span class=\"hljs-attr\">devServer</span>: {\r\n\r\n        <span class=\"hljs-comment\">// Enable compression</span>\r\n        compress: <span class=\"hljs-literal\">false</span>,\r\n\r\n        <span class=\"hljs-comment\">//</span>\r\n        host: clientHost,\r\n        <span class=\"hljs-attr\">port</span>: clientPort\r\n\r\n    }\r\n};\r\n</pre>\n<h4 id=\"-5-3-js-\">步骤 5.3。 编译JS库</h4>\n<pre>$ npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build:client</span>\r\n</pre>\n<p>或者</p>\n<pre><span class=\"hljs-comment\">$</span> <span class=\"hljs-comment\">npx</span> <span class=\"hljs-comment\">webpack</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">progress</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">mode</span> <span class=\"hljs-comment\">production</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">config</span> <span class=\"hljs-string\">.</span><span class=\"hljs-comment\">/build/client</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">config</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">js</span>\r\n</pre>\n<p>它将生成一个 js 文件 <code>dist/client-main.js</code> 和一个 html 文件 <code>dist/index.html</code></p>\n<h4 id=\"-5-4-webpack-\">步骤 5.4。 Webpack 服务器配置</h4>\n<p>创建一个新的服务器文件 <code>server.js</code></p>\n<pre><span class=\"hljs-keyword\">const</span> Webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>);\r\n<span class=\"hljs-keyword\">const</span> WebpackDevServer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-dev-server'</span>);\r\n<span class=\"hljs-keyword\">const</span> webpackConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./client.config.js'</span>);\r\n\r\n<span class=\"hljs-keyword\">const</span> compiler = Webpack(webpackConfig);\r\n<span class=\"hljs-keyword\">const</span> devServerOptions = { ...webpackConfig.devServer, <span class=\"hljs-attr\">open</span>: <span class=\"hljs-literal\">true</span> };\r\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> WebpackDevServer(devServerOptions, compiler);\r\n\r\n<span class=\"hljs-keyword\">const</span> runServer = <span class=\"hljs-keyword\">async</span> () =&gt; {\r\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Starting server...'</span>);\r\n  <span class=\"hljs-keyword\">await</span> server.start();\r\n};\r\n\r\nrunServer();\r\n</pre>\n<h3 id=\"-6-\">(6) 部署后端服务并测试</h3>\n<h4 id=\"-6-1-envoy-https-www-envoyproxy-io-\">步骤 6.1。 安装 <a href=\"https://www.envoyproxy.io/\">envoy</a></h4>\n<p>编译 envoy 需要完整安装 Xcode.app。 仅安装命令行工具是不够的。</p>\n<p>如 <strong>macOS 12.6.3</strong>，需要下载：<br />\n<a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_14.2/Xcode_14.2.xip\">Xcode_14.2</a></p>\n<pre>$ brew <span class=\"hljs-keyword\">update</span>\r\n$ brew <span class=\"hljs-keyword\">install</span> envoy\r\n$ envoy <span class=\"hljs-comment\">--version</span>\r\n$ <span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">version</span>\r\n</pre>\n<blockquote>\n<h6 id=\"-a-brew-update-brew-install-envoy-\">⚠️ a) 如果运行 <code>brew update</code> 或 <code>brew install envoy</code> 出错，输入以下命令修复它：</h6>\n<p><strong>macOS 或 Linux</strong></p>\n<p>打开你的终端并执行</p>\n<pre>$ xcode-<span class=\"hljs-keyword\">select</span> <span class=\"hljs-comment\">--install</span>\r\n  $ cd /usr/<span class=\"hljs-keyword\">local</span>/Homebrew/<span class=\"hljs-keyword\">Library</span>/Taps/homebrew/homebrew-core/\r\n  $ git pull\r\n  $ brew <span class=\"hljs-keyword\">update</span>-<span class=\"hljs-keyword\">reset</span>\r\n  $ brew <span class=\"hljs-keyword\">install</span> envoy\r\n</pre>\n<h6 id=\"-b-go-dial-tcp-xx-xx-xx-xx-443-i-o-timeout\">⚠️ b) 使用go启动服务时报错 dial tcp xx.xx.xx.xx:443: i/o timeout</h6>\n<p>手动配置源</p>\n<pre>$ <span class=\"hljs-keyword\">export</span> GO111MODULE=<span class=\"hljs-keyword\">on</span>\r\n  $ <span class=\"hljs-keyword\">export</span> GOPROXY=https:<span class=\"hljs-comment\">//goproxy.cn</span>\r\n</pre>\n<p>以上配置步骤只会在当前终端生效，如何长期生效，这样就不用每次都配置环境变量了。</p>\n<pre>$ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"export GO111MODULE=on\"</span> &gt;&gt; ~/.<span class=\"hljs-keyword\">profile</span>\r\n  $ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"export GOPROXY=https://goproxy.cn\"</span> &gt;&gt; ~/.<span class=\"hljs-keyword\">profile</span>\r\n  $ <span class=\"hljs-keyword\">source</span> ~/.<span class=\"hljs-keyword\">profile</span>\r\n</pre>\n<h6 id=\"-c-bazelisk-\">⚠️ c) <code>bazelisk</code> 不支持旧版本。</h6>\n<p>升级您的操作系统。</p></blockquote>\n<h4 id=\"-6-2-envoy-\">步骤 6.2。 配置 Envoy 代理</h4>\n<p>创建一个新文件 <code>envoy.yaml</code>：</p>\n<pre><span class=\"hljs-attribute\">static_resources</span>:\r\n  <span class=\"hljs-attribute\">listeners</span>:\r\n    - <span class=\"hljs-attribute\">name</span>: listener_0\r\n      <span class=\"hljs-attribute\">address</span>:\r\n        <span class=\"hljs-attribute\">socket_address</span>: { <span class=\"hljs-attribute\">address</span>: <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-attribute\">port_value</span>: <span class=\"hljs-number\">12345</span> }\r\n      <span class=\"hljs-attribute\">filter_chains</span>:\r\n        - <span class=\"hljs-attribute\">filters</span>:\r\n          - <span class=\"hljs-attribute\">name</span>: envoy.filters.network.http_connection_manager\r\n            <span class=\"hljs-attribute\">typed_config</span>:\r\n              <span class=\"hljs-string\">\"@type\"</span>: type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\r\n              <span class=\"hljs-attribute\">codec_type</span>: auto\r\n              <span class=\"hljs-attribute\">stat_prefix</span>: ingress_http\r\n              <span class=\"hljs-attribute\">route_config</span>:\r\n                <span class=\"hljs-attribute\">name</span>: local_route\r\n                <span class=\"hljs-attribute\">virtual_hosts</span>:\r\n                  - <span class=\"hljs-attribute\">name</span>: local_service\r\n                    <span class=\"hljs-attribute\">domains</span>: [<span class=\"hljs-string\">\"*\"</span>]\r\n                    <span class=\"hljs-attribute\">routes</span>:\r\n                      - <span class=\"hljs-attribute\">match</span>: { <span class=\"hljs-attribute\">prefix</span>: <span class=\"hljs-string\">\"/\"</span> }\r\n                        <span class=\"hljs-attribute\">route</span>:\r\n                          <span class=\"hljs-attribute\">cluster</span>: hello_service\r\n                          <span class=\"hljs-attribute\">timeout</span>: <span class=\"hljs-number\">0s</span>\r\n                          <span class=\"hljs-attribute\">max_stream_duration</span>:\r\n                            <span class=\"hljs-attribute\">grpc_timeout_header_max</span>: <span class=\"hljs-number\">0s</span>\r\n                    <span class=\"hljs-attribute\">cors</span>:\r\n                      <span class=\"hljs-attribute\">allow_origin_string_match</span>:\r\n                        - <span class=\"hljs-attribute\">prefix</span>: <span class=\"hljs-string\">\"*\"</span>\r\n                      <span class=\"hljs-attribute\">allow_methods</span>: GET, PUT, DELETE, POST, OPTIONS\r\n                      <span class=\"hljs-attribute\">allow_headers</span>: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-<span class=\"hljs-number\">1</span>,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout\r\n                      <span class=\"hljs-attribute\">max_age</span>: <span class=\"hljs-string\">\"1728000\"</span>\r\n                      <span class=\"hljs-attribute\">expose_headers</span>: custom-header-<span class=\"hljs-number\">1</span>,grpc-status,grpc-message\r\n              <span class=\"hljs-attribute\">http_filters</span>:\r\n                - <span class=\"hljs-attribute\">name</span>: envoy.filters.http.grpc_web\r\n                  <span class=\"hljs-attribute\">typed_config</span>:\r\n                    <span class=\"hljs-string\">\"@type\"</span>: type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb\r\n                - <span class=\"hljs-attribute\">name</span>: envoy.filters.http.cors\r\n                  <span class=\"hljs-attribute\">typed_config</span>:\r\n                    <span class=\"hljs-string\">\"@type\"</span>: type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors\r\n                - <span class=\"hljs-attribute\">name</span>: envoy.filters.http.router\r\n                  <span class=\"hljs-attribute\">typed_config</span>:\r\n                    <span class=\"hljs-string\">\"@type\"</span>: type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\r\n  <span class=\"hljs-attribute\">clusters</span>:\r\n    - <span class=\"hljs-attribute\">name</span>: hello_service\r\n      <span class=\"hljs-attribute\">connect_timeout</span>: <span class=\"hljs-number\">0.25s</span>\r\n      <span class=\"hljs-attribute\">type</span>: logical_dns\r\n      <span class=\"hljs-attribute\">http2_protocol_options</span>: {}\r\n      <span class=\"hljs-attribute\">lb_policy</span>: round_robin\r\n      # win/mac <span class=\"hljs-attribute\">hosts</span>: Use <span class=\"hljs-attribute\">address</span>: host.docker.internal instead of <span class=\"hljs-attribute\">address</span>: localhost in the line below\r\n      <span class=\"hljs-attribute\">load_assignment</span>:\r\n        <span class=\"hljs-attribute\">cluster_name</span>: cluster_0\r\n        <span class=\"hljs-attribute\">endpoints</span>:\r\n          - <span class=\"hljs-attribute\">lb_endpoints</span>:\r\n            - <span class=\"hljs-attribute\">endpoint</span>:\r\n                <span class=\"hljs-attribute\">address</span>:\r\n                  <span class=\"hljs-attribute\">socket_address</span>:\r\n                    <span class=\"hljs-attribute\">address</span>: <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\r\n                    <span class=\"hljs-attribute\">port_value</span>: <span class=\"hljs-number\">9090</span>\r\n</pre>\n<blockquote><p>⚠️ 如果您在 Mac/Windows 上运行 Docker，请将最后一个地址：<code>localhost</code> 更改为</p>\n<pre>    ...\r\n    socket_address:\r\n        <span class=\"hljs-selector-tag\">address</span>: host<span class=\"hljs-selector-class\">.docker</span><span class=\"hljs-selector-class\">.internal</span>\r\n</pre>\n<p>或者如果您在 Mac 上的 Docker 版本比 v18.03.0 更早，请将其更改为：</p>\n<pre>    ...\r\n    socket_address:\r\n        <span class=\"hljs-selector-tag\">address</span>: docker<span class=\"hljs-selector-class\">.for</span><span class=\"hljs-selector-class\">.mac</span><span class=\"hljs-selector-class\">.localhost</span>\r\n</pre>\n</blockquote>\n<h4 id=\"-6-3-\">步骤 6.3。 运行特使代理。</h4>\n<p><strong>envoy.yaml</strong> 文件将 Envoy 配置为在端口 <code>12345</code> 监听浏览器请求，并将它们转发到端口 <code>9090</code>。</p>\n<pre>$ npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> proxy</span>\r\n</pre>\n<p>or</p>\n<pre><span class=\"hljs-variable\">$ </span>envoy -c ./envoy.yaml\r\n</pre>\n<h4 id=\"-6-4-http-localhost-10005-\">步骤 6.4。 当这些都准备好后，您可以打开浏览器选项卡并导航到 <code>http://localhost:10005</code></h4>\n<ul>\n<li>NodeJS gRPC 服务（端口 <code>9090</code>）</li>\n<li>webpack 服务器（端口 <code>10005</code>）</li>\n</ul>\n<p>运行以下命令进行测试：</p>\n<pre>$ npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> start</span>\r\n</pre>\n<p>或者</p>\n<pre>$ <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">./server</span>.js &amp; <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">./src</span>/server/index.js\r\n</pre>\n<h4 id=\"-6-5-\">步骤 6.5。 测试连接</h4>\n<p>使用下面的命令检测：</p>\n<pre>$ curl -I http:<span class=\"hljs-regexp\">//</span>localhost:<span class=\"hljs-number\">12345</span><span class=\"hljs-regexp\">/hello.HelloService/</span>GetHelloReq?firstName=Amy&amp;lastName=Grant\r\n</pre>\n<p>&nbsp;</p>\n<p>最后，希望这篇文章对你有用，您可以下载我的开源文件包 <a href=\"https://github.com/xizon/grpc-getting-started\" target=\"_blank\" rel=\"noopener\">https://github.com/xizon/grpc-getting-started</a></p>\n","slug":"implementation-process-of-grpc-and-front-end-applications-completely","prev":[{"ID":24272756,"title":"年终2022","excerpt":"这是一封总结吗？哦也许是，也许不是。但它就是这一年的所有。我将带着从未有过的收获，跟随自己的内心，继续下一步探险。成败？有必要担心吗，生活就是一场体验，干嘛非得给自己加那么多标签，没必要，真的没必要。","slug":"year-end-summary-2022","post_date":"2022-12-27 07:45:03","post_date_gmt":"2022-12-27 07:45:03","thumbnail":[],"thumbnail_mini":[],"thumbnail_retina":[]}],"next":[],"post_date":"2023-03-16 06:30:58","post_date_gmt":"2023-03-16 06:30:58","post_status":"publish","comment_status":"open","ping_status":"open","post_password":"","to_ping":"","pinged":"","post_modified":"2023-03-20 13:24:39","post_modified_gmt":"2023-03-20 13:24:39","post_content_filtered":"","post_parent":0,"guid":"https://matrixflip.com/api/?p=24272785","menu_order":0,"post_type":"post","post_mime_type":"","comment_count":"0","filter":"raw"},"postID":"implementation-process-of-grpc-and-front-end-applications-completely"},"__N_SSG":true}