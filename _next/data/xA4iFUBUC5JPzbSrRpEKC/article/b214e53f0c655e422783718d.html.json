{"pageProps":{"currentData":{"ID":24272280,"author":"1","author_nickname":"wpuser","author_display_name":"Chuckie Chang","author_url":"https://matrixflip.com/api","author_username":"wpuser","author_avatar":"https://secure.gravatar.com/avatar/?s=96&d=mm&r=g","categories":[87],"categories_output":[{"ID":87,"slug":"%e5%bc%80%e5%8f%91%e8%b6%a3%e5%91%b3","name":"开发趣味","term_taxonomy_id":87,"term_group":0,"taxonomy":"category","description":"","parent":0,"count":17}],"tags":[298,100,299,297,296,141,96,295],"tags_output":[{"ID":298,"slug":"jest","name":"jest","term_taxonomy_id":298,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":100,"slug":"react","name":"react","term_taxonomy_id":100,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":3},{"ID":299,"slug":"sass","name":"sass","term_taxonomy_id":299,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":297,"slug":"typescript","name":"typescript","term_taxonomy_id":297,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":296,"slug":"webpack","name":"webpack","term_taxonomy_id":296,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":141,"slug":"%e5%89%8d%e7%ab%af","name":"前端","term_taxonomy_id":141,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":4},{"ID":96,"slug":"%e5%89%8d%e7%ab%af%e5%bc%80%e5%8f%91","name":"前端开发","term_taxonomy_id":96,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":10},{"ID":295,"slug":"%e5%be%ae%e5%89%8d%e7%ab%af","name":"微前端","term_taxonomy_id":295,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1}],"thumbnail":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-matrixflipcomapiwpcontentuploadsccomfcccaxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-150x150-matrixflipcomapiwpcontentuploadsccomfcccaxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-matrixflipcomapiwpcontentuploadsccomfcccaxjpg.jpg",770,340,false],"thumbnail_full":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-matrixflipcomapiwpcontentuploadsccomfcccaxjpg.jpg",770,340,false],"date_day":"13","date_month":"05","date_month_e":"May","date_year":"2022","date_weekday":"Friday","title":"理解微前端 - 从部署一套自己的前端开发环境(脚手架)开始","excerpt":"很久以前的前端，没有太多工具化工程化思想，一堆代码塞进去完事儿。如今前端已经很卷，卷到了一个开发环境都够你折腾一宿。那么我们抛开类似nextjs、create-react-app这类的工具或框架，我们该如何从零部署一个属于自己的开发环境呢？这篇文章将讲述如何配置一个基础的脚手架，支持React、TypeScrit和单元测试等必要的功能。在这个基础上，大家能够很方便去个性化脚手架。","content":"<p>很久以前的前端，没有太多工具化工程化思想，一堆代码塞进去完事儿。如今前端已经很卷，卷到了一个开发环境都够你折腾一宿。那么我们抛开类似nextjs、create-react-app这类的工具或框架，我们该如何从零部署一个属于自己的开发环境呢？这篇文章将讲述如何配置一个基础的脚手架，支持React、TypeScrit和单元测试等必要的功能。在这个基础上，也能够很方便去个性化脚手架，让它支持比如Electron、Mobx、Redux、PM2、Express(可用来实现SSR服务端渲染)等你想要的扩展功能。</p>\n<p>首先，我们要知道对于实际的项目，当然是效率优先，尽可能使用成熟的工具和框架，比如类似Next.js、UmiJS、Ant Design等能够简化UI Elements和脚手架环境的东西，都推荐使用它。他们能够一次性完成常用的UI架构，网站的SEO优化，服务端渲染，资源优化，性能优化(打包，懒加载等)，安全优化等。对于一个项目的快速搭建和稳定性是有比较明显的作用的。这里我们学会从零部署开发环境，一方面可以利于提升自己扩展脚手架的能力，同时也能够在未来的工具和框架运用中，更加灵活的加入自己的想法。</p>\n<p>实质上，我们现在做的事情就是搭建一个比较基础的“<strong>微前端架构(Micro-Frontend Architectures)</strong>”，至于更加丰富的功能，可以在这个基础上不断丰富。目前某些大厂，都开源了自己的微前端架构工具，相当于也是把整个Web架构集于一体，极大提高了前后端分离、开发协作、部署测试发布迭代的整合效率，提高生产效率。萝卜各有所需，如果你的项目没有较多的约束性，可以直接使用现成的微前端架构工具，比如Bit、Piral、Modern.js等。当然如果不学习如何搭建自己的脚手架，一旦脱离了别人帮你写好的框架，你可能会显得很懵~</p>\n<p>微前端架构其实可以很复杂，复杂到一整个大团队的协作，一个公司的业务体系，甚至不同语言开发者的分布式合作。也可以很简洁，简洁到让他成为自己的生产工具，可以用来开发，调试，可以用来部署发布，可以用来协作交流。这次写这篇文章，其实也是想抛开理论，去从某个角度去理解如何才算是自己的架构？它不一定非要打包发布，不一定非要变成一个系统的框架，微前端架构，其实和自己的生存环境，工作方式息息相关。它并不是一种标准，相当于是人定义的一种规范，一个体系。用得好了，事半功倍，用不好了，还是有不好的影响的：）</p>\n<p>如果要真正搭建一个微前端架构，是非常复杂的，涉及的知识面很广，但是怎么去理解它的运作，从一个很小的方面去体验，就足够了。真正要使用微前端架构，还是建议引入比较成熟的架构方案，相对于中小型产品，自己瞎折腾下还是可以的。</p>\n<p>本文分为两大部分，一个是基础配置，一个是深入配置，它将能够更好地适配你的React项目或者传统的Web项目(当然我觉得Vue也是同理的思想)。读完这篇文章，我们将实现一个由浅入深完成一套 <code>Webpack5+TypeScript+Jest+ESLint+SASS+React </code>的开发环境，也可以把它当做脚手架成品。</p>\n<blockquote><p><strong>必须：</strong>在这之前，我们要确保你已经安装至少<strong>Node 10+</strong>以上的版本，我自己电脑目前的Node版本是<strong>v14.16.0</strong>。<br />\n(假设你的项目名称叫 <code>my-react-app</code>, 那么 <code>my-react-app </code>文件夹内就包含以下的目录和文件，你可以通过 <code>cd /{your_directory}/my-react-app</code> 命令进入你的目录，使用 <strong>npm </strong>命令安装和移除依赖项，它也会同时修改 <code>package.json</code>和 <code>package-lock.json</code> 文件，具体怎么操作，相信你使用过Node的话，基本没有啥问题的)</p></blockquote>\n<p>目录如下：</p>\n<p><img class=\"alignnone wp-image-24272281 size-full\" src=\"/static-remote/files/13d2346af377784f72099f77-matrixflipcomapiwpcontentuploadsdafffjpg.jpg\" alt=\"\" width=\"858\" height=\"732\" /></p>\n<p><span style=\"color: #ff0000;\">下面的步骤，尽可能按照顺序来：）</span></p>\n<h3>（一）创建package.json文件</h3>\n<p><strong>创建一个package.json文件，满足Webpack、TypeScript，Jest，ESLint等基本需求</strong>，同时它也满足基本的JS应用的需求。</p>\n<p>Node 项目在项目根目录中名为 package.json 的文件中跟踪依赖关系和元数据。这是项目的核心。它包含名称、描述和版本之类的信息，以及运行、开发以及有选择地将项目发布到 npm 所需的信息。如果大家想要详细了解这个文件的用途，可以参看NPM的官方文档 <a href=\"https://docs.npmjs.com/creating-a-package-json-file\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/creating-a-package-json-file</a></p>\n<p>关于某些Dependencies，具体的功能根据自己的需求增加，目前我主要针对我们要配置的这个环境选择，多余的依赖就不参与。</p>\n<p>下面是已经创建好的示例代码(并非最基础的package.json代码)，你可以根据需要修改它们。</p>\n<pre>{\r\n  \"name\": \"my-react-app\",\r\n  \"version\": \"0.0.1\",\r\n  \"description\": \"My React App.\",\r\n  \"main\": \"dist/my-react-app.js\",\r\n  \"directories\": {\r\n    \"test\": \"test\"\r\n  },\r\n  \"jest\": {\r\n    \"testEnvironment\": \"jsdom\",\r\n    \"transform\": {\r\n      \"^.+\\\\.(js|jsx)$\": \"babel-jest\",\r\n      \"^.+\\\\.(ts|tsx)?$\": \"ts-jest\"\r\n    }\r\n  },\r\n  \"scripts\": {\r\n    \"check\": \"tsc\",\r\n    \"dev\": \"cross-env NODE_ENV=development webpack --progress --mode development --config build/config.js\",\r\n    \"build\": \"cross-env NODE_ENV=production webpack --progress --mode production --config build/config.js\",\r\n    \"test\": \"cross-env NODE_ENV=test jest\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"my-react-app\"\r\n  },\r\n  \"keywords\": [\r\n    \"library\"\r\n  ],\r\n  \"license\": \"MIT\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/xizon/my-react-app/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/xizon/my-react-app#readme\",\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.13.14\",\r\n    \"@babel/plugin-transform-runtime\": \"^7.16.4\",\r\n    \"@babel/polyfill\": \"^7.0.0\",\r\n    \"@babel/preset-env\": \"^7.2.0\",\r\n    \"@babel/preset-typescript\": \"^7.1.0\",\r\n    \"@types/jest\": \"^27.0.3\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^4.28.5\",\r\n    \"@typescript-eslint/parser\": \"^4.28.5\",\r\n    \"babel-loader\": \"^8.0.4\",\r\n    \"babel-plugin-module-resolver\": \"^4.1.0\",\r\n    \"cross-env\": \"^7.0.3\",\r\n    \"eslint\": \"^7.32.0\",\r\n    \"jest\": \"^27.0.4\",\r\n    \"jsdom\": \"^18.1.1\",\r\n    \"moment\": \"^2.29.1\",\r\n    \"terser-webpack-plugin\": \"^5.1.4\",\r\n    \"ts-jest\": \"^27.0.4\",\r\n    \"ts-node\": \"^10.1.0\",\r\n    \"typescript\": \"^4.3.5\",\r\n    \"webpack\": \"^5.47.1\",\r\n    \"webpack-cli\": \"^4.9.1\"\r\n  },\r\n  \"eslintConfig\": {\r\n    \"parserOptions\": {\r\n      \"parser\": \"@typescript-eslint/parser\",\r\n      \"ecmaVersion\": 2018,\r\n      \"sourceType\": \"module\"\r\n    },\r\n    \"extends\": [\r\n      \"plugin:@typescript-eslint/recommended\"\r\n    ]\r\n  },\r\n  \"dependencies\": {},\r\n  \"author\": \"XXXXXXXXX\"\r\n}</pre>\n<h3>（二）创建tsconfig.json文件</h3>\n<p><strong><code>tsconfig.json</code> 文件用来配置TypeScript</strong>，具体的配置选项，请阅读官方文档 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/docs/handbook/tsconfig-json.html</a>，下面是我自己的配置</p>\n<pre>{\r\n    \"compilerOptions\": {\r\n      \"target\": \"esnext\",\r\n      \"lib\": [\r\n        \"dom\",\r\n        \"dom.iterable\",\r\n        \"esnext\"\r\n      ],\r\n      \"allowJs\": true,\r\n      \"skipLibCheck\": true,\r\n      \"esModuleInterop\": true,\r\n      \"allowSyntheticDefaultImports\": true,\r\n      \"strict\": true,\r\n      \"forceConsistentCasingInFileNames\": true,\r\n      \"module\": \"commonjs\",\r\n      \"moduleResolution\": \"node\",\r\n      \"isolatedModules\": true,\r\n      \"resolveJsonModule\": true,\r\n      \"noEmit\": true,\r\n      \"sourceMap\": true,\r\n      \"declaration\": true,\r\n      \"noUnusedLocals\": false,\r\n      \"noUnusedParameters\": false,\r\n      \"incremental\": true,\r\n      \"noFallthroughCasesInSwitch\": true,\r\n      \"noImplicitAny\": false,\r\n      \"baseUrl\": \"./src\"\r\n    },\r\n    \"include\": [\r\n      \"src/**/*.ts\"\r\n    ],\r\n    \"exclude\": [\"node_modules\"]\r\n}</pre>\n<h3>（三）创建babel.config.js文件</h3>\n<p><strong><code>babel.config.js</code> 文件主要用来配置babel</strong>，什么是babel，如何配置它的功能，请参看官方文档 <a href=\"https://babeljs.io/docs/en/config-files\" target=\"_blank\" rel=\"noopener\">https://babeljs.io/docs/en/config-files</a></p>\n<p>下面是我自己的配置代码：</p>\n<pre>module.exports = {\r\n  \"presets\": [\r\n\r\n    [\r\n      \"@babel/preset-env\",\r\n      {\r\n        \"targets\": {\r\n          \"node\": \"current\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      \"@babel/preset-typescript\"\r\n    ]\r\n  ],\r\n  \"plugins\": [\r\n    [\"@babel/plugin-transform-runtime\",\r\n      {\r\n        \"regenerator\": true\r\n      }\r\n    ],\r\n    [\"module-resolver\", {\r\n      \"root\": [\"./src\"]\r\n    }]\r\n\r\n  ]\r\n};</pre>\n<h3>（四）创建build/config.js文件</h3>\n<p>这个文件属于脚手架核心文件，项目的业务需求、开发功能、资源优化、性能、安全等都在这个文件中展示（你可以根据需要，使用多个build文件，这些脚手架文件将和package.json中的命令配置挂钩，让你能够运行它们）</p>\n<blockquote><p><span style=\"color: #ff0000;\">注意：path.resolve(__dirname, '../dist') 将返回：   /Applications/......./dist</span></p></blockquote>\n<p>文件的参考代码如下（你可以自由扩展和改良它，如何改良，你可以参看Webpack的官网文档 <a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/concepts/</a> ，目前我们使用Webpack 5以上版本，经过自己的实践，它在性能上要高于4的版本）：</p>\n<pre>'use strict';\r\n\r\nconst webpack = require('webpack');\r\nconst path = require('path');\r\nconst json = require('../package.json');\r\nconst moment = require('moment');\r\nconst TerserPlugin = require(\"terser-webpack-plugin\");\r\n\r\n/*! \r\n *************************************\r\n *  Main configuration\r\n *************************************\r\n */\r\nconst devMode = process.env.NODE_ENV !== 'production';\r\n\r\nconst webpackConfig = {\r\n\tdevtool: devMode ? 'source-map' : false,\r\n    mode: devMode === 'development' ? 'development' : 'production',\r\n\twatch: true,\r\n    resolve: {\r\n\t\tfallback: {\r\n\t\t    fs: false\r\n\t\t},\r\n        extensions: ['.js', '.ts'],\r\n    },\r\n\t\r\n\tentry: {\r\n\t\t'app': path.resolve(__dirname, '../src/index.ts'),\r\n\t\t'app.min': path.resolve(__dirname, '../src/index.ts')\r\n\t},\r\n\toutput: {\r\n\t  library: {\r\n\t\tname: 'RootLib',\r\n\t\ttype: 'var'\r\n\t  },\r\n\t  filename: '[name].js',\r\n\t  path: path.resolve(__dirname, '../dist'),\r\n\t},\r\n\t/*\r\n\tentry: path.resolve(__dirname, '../src/index.ts'),\r\n\toutput: {\r\n\t  filename: 'app.js',\r\n\t  path: path.resolve(__dirname, '../dist'),\r\n\t},\r\n\t*/\r\n\toptimization: {\r\n\t\tminimize: true,\r\n\t    minimizer: [\r\n\r\n\t\t\tnew TerserPlugin({\r\n\t\t\t\ttest: /\\.min\\.js$/i\r\n\t\t\t}),\r\n\t\t],\r\n\t\t\r\n\t},\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: /\\.(js|ts)$/,\r\n                loader: 'babel-loader',\r\n                exclude: path.resolve( __dirname, 'node_modules' ),\r\n                options: {  \r\n\t\t\t\t  'presets': [\r\n\t\t\t\t\t  '@babel/preset-env',\r\n\t\t\t\t\t  '@babel/preset-typescript'  \r\n\t\t\t\t  ]\r\n                }\r\n\t\t\t},\r\n        ],\r\n\t\t\r\n    },\r\n\tplugins: []\r\n\t\r\n\t\r\n};\r\n\r\n// Add souce maps\r\nwebpackConfig.plugins.push(\r\n\tnew webpack.SourceMapDevToolPlugin({\r\n\t  filename: '../dist/[file].map',\r\n\t})\r\n);\r\n\r\n// Adds a banner to the top of each generated chunk.\r\nwebpackConfig.plugins.push(\r\n    new webpack.BannerPlugin(`\r\n\tMy React App\r\n\r\n\t@source: https://github.com/xizon\r\n\t@version: ${json.version} (${moment().format( \"MMMM D, YYYY\" )})\r\n\t@license: MIT\r\n\t`)\r\n);\r\n\r\n\t\t\t\t\t\t\t\t\t\r\n/*! \r\n *************************************\r\n *  Exporting webpack module\r\n *************************************\r\n */\r\nmodule.exports = webpackConfig;</pre>\n<blockquote><p>有些时候我们的项目会发布到npm，然后直接通过Node安装并调用。<br />\n(1)注意：如果要使用npm发布的编译包，设置为下面的属性(如果导出的编译包不是为了使用import，则不要使用下面的配置，否则浏览器会报错)：</p>\n<pre class=\"codePre brush: javascript;\">\toutput: {\r\n\t\tlibrary: {\r\n\t\t\ttype: 'commonjs'\r\n\t\t},\r\n\t},</pre>\n<p>直接使用&lt;script src=\"global.js\" &gt;&lt;/script&gt; 也会报错<br />\n<span style=\"color: #ff0000;\"> Uncaught ReferenceError: exports is not defined</span></p>\n<p>正确的用法：</p>\n<pre class=\"codePre brush: javascript;\">&lt;script&gt;const exports = {\"__esModule\": true};&lt;/script&gt;\r\n&lt;script src=\"global.js\"&gt;&lt;/script&gt;\r\n</pre>\n<p>(2)并且导出的变量或者函数需要包含 {},如</p>\n<pre>import __ from './global';\r\nexport default __;\r\nexport { __ };</pre>\n<p>(3)使用可以减小编译后的js体积</p>\n<pre>[\"@babel/preset-env\", { \r\n        \"targets\": {\"esmodules\": true}\r\n}],</pre>\n</blockquote>\n<p><strong>至此，一个基础的Webpack5+TypeScript+Jest+ESLint的基础开发环境就已经完成了，接下去，我们还将深入配置React的环境。</strong></p>\n<h3>（五）深入搭建React环境</h3>\n<p>我们只是完成了基础的功能支持，如果我们需要使用React，那么我们还将进一步配置脚手架。当然，Vue支持也同理。在这个过程中，某些依赖会产生冲突，或者因为TypeScript的某些配置，会造成编译错误，所以我们需要一些测试和检查，就能发现这些错误，并修正一些配置。</p>\n<p>这些代码都是我经过测试后的基础参考示例代码（大部分已经修正了编译错误），出现JS代码编译错误不要紧，我们只要根据终端的报错，来找出原因，修正脚手架的配置即可。当然，如果是为了方便，你也可以直接使用React官方提供的 <code>create-react-app</code> 来编写你的应用程序，某些个性化的需求也需要参考文档增加。如果你的项目个性化需求比较多，可以直接创造自己的脚手架，方便混合其它第三方库和工具。不依赖与第三方的架构。</p>\n<p>接下去我们继续配置React的支持。</p>\n<h4 style=\"margin-bottom: 1.13043em; line-height: 1.41304em;\">第1步: 安装React相关的依赖项</h4>\n<blockquote><p>后面的步骤，如果需要使用npm命令安装新的依赖，同理进入目录</p></blockquote>\n<p>先进入你的项目的目录</p>\n<pre>cd /{your_directory}/my-react-app</pre>\n<p>然后运行命令：</p>\n<pre>sudo npm install</pre>\n<p>补全TypeScript对于React接口的支持，安装：</p>\n<pre>npm install @types/react --save-dev</pre>\n<p>安装完基本的依赖，然后安装react的依赖（这几个依赖有什么作用，可以自己去搜索引擎查询一下，一般是我项目里常用的一些依赖项）和继续配置（react入口文件也可以是ts文件）</p>\n<pre>npm install axios react react-dom react-router-config@5.1.1 react-router-dom@5.2.0\r\nnpm install @babel/preset-react @babel/plugin-proposal-class-properties --save-dev</pre>\n<p>安装新的依赖后，<code>package.json</code> 文件会自动修改。</p>\n<h4>第2步: 修改build/config.js</h4>\n<p>为了适配React，我们需要修改webpack配置文件 <code>build/config.js</code>，修改后的代码如下（<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）：</p>\n<pre>   context: __dirname, // to automatically find tsconfig.json\r\n    resolve: {\r\n        extensions: ['.js', '.jsx', '.ts', '.tsx', '.scss', '.sass'],\r\n        alias: {\r\n            // specific mappings.\r\n            // Supports directories and custom aliases for specific files when the express server is running, \r\n             // you need to configure the following files at the same time:\r\n             // 1) `babel.config.js`    --&gt; \"plugins\": [[\"module-resolver\", {\"alias\": {...}} ]]\r\n             //  2) `tsconfig.json`      --&gt; \"compilerOptions\": { \"paths\": {...} }\r\n             //  3) `package.json`       --&gt; \"jest\": { \"moduleNameMapper\": {...} }\r\n             '@': path.resolve(__dirname, '../src')\r\n        }\r\n    },\r\n\t\r\n\tentry: {\r\n\t\t'app': path.resolve(__dirname, '../src/index.js'),\r\n\t\t'app.min': path.resolve(__dirname, '../src/index.js')\r\n\t},\r\n\r\nmodule: {\r\n    rules: [\r\n        {\r\n            test: /\\.(js|jsx|ts|tsx)$/,\r\n            loader: 'babel-loader',\r\n            exclude: path.resolve(__dirname, '../node_modules' ),\r\n            options: {  \r\n              'presets': [\r\n                  '@babel/preset-env',\r\n                  '@babel/preset-react',\r\n                  '@babel/preset-typescript',\r\n                    {\r\n                      plugins: [\r\n                        '@babel/plugin-proposal-class-properties'\r\n                      ]\r\n                    }\t  \r\n              ]\r\n            }\r\n        },\r\n    ],\r\n    \r\n},</pre>\n<p>Babel的一些插件有什么作用，可以直接去官网多看看文档即可。这里主要说一下 <code>@babel/plugin-proposal-class-properties</code> 插件,主要是用来编译的，可以解决一些静态类属性编译的问题。</p>\n<h4>第3步: 安装SASS开发依赖</h4>\n<p>不论我们使用css-in-js还是外部引用CSS样式文件，我们都需要配置SASS插件，让其能够编译SASS,SCSS文件，我个人比较喜欢使用SCSS文件，单独外部引用，而不是直接css-in-js, 这样便于我自己维护样式表。</p>\n<p>运行命令</p>\n<pre>npm install sass-loader node-sass style-loader css-loader mini-css-extract-plugin@2.4.5 css-minimizer-webpack-plugin --save-dev</pre>\n<p><span style=\"color: #ff0000;\">【注意】node-sass(7.0.1)和sass-loader(12.4.0)的版本搭配，无需file-loader就可以提取文件。会和file-loader冲突，提取的文件可能无法使用，需要移除file-loader相关配置或者降级到node-sass(4.14.1)和sass-loader(7.1.0)才可搭配file-loader使用</span></p>\n<p>安装关联jest单元测试的一个依赖</p>\n<pre>npm install identity-obj-proxy --save-dev</pre>\n<p><code>identity-obj-proxy</code> 插件使用ES6代理的身份对象， 对模拟CSS模块之类的webpack导入很有用，它可以解决编译时导入CSS的一些错误</p>\n<p>下面的配置适用于node-sass7.x.x, sass-loader 12.x.x 版本<br />\nmini-css-extract-plugin2.5.0版本有bug无法运行<br />\n适配CSS文件，修改webpack文件 <code>build/config.js</code> （<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）</p>\n<pre>const MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n\r\n\r\noptimization: {\r\n    minimizer: [\r\n        new MiniCssExtractPlugin({\r\n            // Options similar to the same options in webpackOptions.output\r\n            // both options are optional\r\n            filename: '../dist/[name].css'\r\n        }),\r\n        new CssMinimizerPlugin({\r\n            test:/\\.min\\.css$/i,\r\n            parallel: true,\r\n            minimizerOptions: {\r\n                preset: [\r\n                    \"default\",\r\n                    {\r\n                        discardComments: { removeAll: true },\r\n                    },\r\n                ],\r\n            },\r\n        }),\r\n\r\n    ],\r\n},\r\nmodule: {\r\n    rules: [\r\n        {\r\n            test: /\\.(sa|sc|c)ss$/,\r\n            include: [\r\n                path.resolve(__dirname, '../src'),\r\n                // Prevent errors in calling the node library: Module parse failed: Unexpected character'@'\r\n                path.resolve(__dirname, '../node_modules'),\r\n            ],\r\n            use: [\r\n\t   /**\r\n\t  * Note:\r\n\t   * You can use `style-loader` to inject CSS into the DOM to generate a final js file\r\n\t  */\r\n                {\r\n                    loader: MiniCssExtractPlugin.loader, //Extracts CSS into separate files  ( Step 3 )\r\n                    options: {\r\n                        // you can specify a publicPath here\r\n                        // by default it use publicPath in webpackOptions.output\r\n                          publicPath: '../dist/'\r\n\r\n                    }\r\n                },\r\n\r\n                {\r\n                    loader: \"css-loader\",  // interprets @import and url() and will resolve them. ( Step 2 )\r\n                    options: {\r\n                        sourceMap: true\r\n                    }\r\n                },\r\n                {\r\n                    loader: 'sass-loader', // compiles Sass to CSS ( Step 1 )\r\n                    options: {\r\n                        sourceMap: true,\r\n\t\t     sassOptions: {\r\n\t\t\t  /* (nested | expanded | compact | compressed) */\r\n\t\t\t  outputStyle: 'expanded'\r\n\t\t     },\r\n                    }\r\n\r\n                },\r\n            ]\r\n        },\r\n    ],\r\n},</pre>\n<p><strong>提示：</strong>如果不单独引用生成的 <code>dist/*.css</code> 文件，使用js内置的css，删除 <code>mini-css-extract-plugin</code> 和 <code>css-minimizer-webpack-plugin</code> 相关的配置，然后将样式loader修改为下面的代码（<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）：</p>\n<pre>{\r\n    test: /\\.(sa|sc|c)ss$/,\r\n    include: [\r\n        path.resolve(__dirname, '../src'),\r\n        // Prevent errors in calling the node library: Module parse failed: Unexpected character'@'\r\n        path.resolve(__dirname, '../node_modules'),\r\n    ],\r\n    use: [\r\n        {\r\n            loader: \"style-loader\"  // creates style nodes from JS strings ( Step 3 )\r\n        },\r\n        {\r\n            loader: \"css-loader\",   // interprets @import and url() and will resolve them. \r\n                                    //(translates CSS into CommonJS) ( Step 2 )\r\n            options: {\r\n                sourceMap: true\r\n            }\r\n        },\r\n        {\r\n            loader: 'sass-loader', // compiles Sass to CSS ( Step 1 )\r\n            options: {\r\n                sourceMap: true,\r\n                sassOptions: {\r\n                    /* (nested | expanded | compact | compressed) */\r\n                    outputStyle: 'expanded'\r\n                },\r\n\r\n            }\r\n\r\n        },\r\n    ]\r\n},</pre>\n<h4>第4步: 继续安装引用文件的开发依赖</h4>\n<p>执行命令：</p>\n<pre>npm install raw-loader glslify-loader json-loader file-loader  --save-dev</pre>\n<blockquote><p><strong>注意(1)：</strong>path.resolve(__dirname, '../dist') 将返回：   /Applications/......./dist</p>\n<p><strong>注意(2)：</strong><code>mini-css-extract-plugin</code> 的 <code>publicPath</code> 设置会让 <code>file-loader</code> 的 <code>publicPath</code> 路径失效，导致文件重复提取，可以删除 <code>file-loader</code> 插件的相关配置（不删除此配置会导致生成图片解析错误）来解决</p></blockquote>\n<p>适配引用的字体，图片等文件，修改webpack文件<code>build/config.js </code>（<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）</p>\n<pre>module: {\r\n    rules: [\r\n        {\r\n            test: /\\.(glsl|vs|fs|vert|frag)$/,\r\n            exclude: path.resolve(__dirname, '../node_modules' ),\r\n            use: [\r\n                'raw-loader',\r\n                'glslify-loader'\r\n            ]\r\n        },\r\n        {\r\n            test: /\\.json$/,\r\n            use: 'json-loader'\r\n        },\r\n        \r\n      // Note:\r\n      // 1) Compatible with node-sass(4+) and sass-loader(7+)\r\n      // 2) The versions of node-sass (7+) and sass-loader (12+) are matched to extract files without `file-loader`\r\n        {\r\n             test: /\\.(png|jpe?g|gif|ttf|eot|svg|woff(2)?)(\\?[a-z0-9=&amp;.]+)?$/,\r\n            loader: 'file-loader', \r\n            options: {\r\n              esModule: false, //change the css path via output\r\n\t\tname (file) {\r\n\t\t    return '[name]_[hash].[ext]'\r\n\t\t},\r\n              outputPath: (url, resourcePath, context) =&gt; { //the files from `./src/...` will copy to `./dist/`\r\n                  \r\n                 //original name: path.basename(resourcePath)\r\n                 \r\n                 //fonts\r\n                 if ( resourcePath.indexOf( 'webfonts/' ) &gt;= 0 || resourcePath.indexOf( 'fonts/' ) &gt;= 0 ) {\r\n                     return '../dist/fonts/' + url;\r\n                 }\r\n                  \r\n                 //imags\r\n                 if ( resourcePath.indexOf( 'images/' ) &gt;= 0 || resourcePath.indexOf( 'img/' ) &gt;= 0 ) {\r\n                     return '../dist/mages/' + url;\r\n                 } \r\n                  \r\n                     \r\n                 return '../dist/misc/' + url;\r\n                \r\n              },\r\n              publicPath: (url, resourcePath, context) =&gt; { //the css path of output \r\n                 \r\n                // If the file is in the root directory, you can leave it empty. If in another directory, \r\n                // you can write: \"/blog\". (but no trailing slash)\r\n                const websiteRootDir = '';\r\n\r\n\r\n                 //fonts\r\n                 if ( resourcePath.indexOf( 'webfonts/' ) &gt;= 0 || resourcePath.indexOf( 'fonts/' ) &gt;= 0 ) {\r\n                     return `${websiteRootDir}/dist/fonts/${url}`;\r\n                 }\r\n                \r\n                 //imags\r\n                 if ( resourcePath.indexOf( 'images/' ) &gt;= 0 || resourcePath.indexOf( 'img/' ) &gt;= 0 ) {\r\n                     return `${websiteRootDir}/dist/images/${url}`;\r\n                 } \r\n                  \r\n                     \r\n                 return `${websiteRootDir}/dist/misc/${url}`;\r\n                  \r\n                \r\n              }\r\n            }\r\n        }\r\n\r\n    ],\r\n},</pre>\n<h4>第5步: 继续安装webpack本地开发服务器开发依赖</h4>\n<p>运行命令</p>\n<pre>npm install webpack-dev-server  --save-dev</pre>\n<p>适配4.x.x以上版本的本地服务，修改webpack文件<code>build/config.js</code> （<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）</p>\n<blockquote><p>设置 <code>static</code> 参数后，<code>public/index.html</code> 内的文件路径可以写成如：<code>../dist/app.min.css</code>, 使用 <code>localhost:8080/public/index.html</code> 访问，不设置此参数，则会自动定位到 <code>public</code> 和 <code>dist</code> 文件夹。可以直接使用 <code>localhost:8080</code> 访问</p></blockquote>\n<p>代码如下：</p>\n<pre>const WebpackDevServer = require('webpack-dev-server');\r\n\r\n/*! \r\n *************************************\r\n *  Listen the server\r\n *************************************\r\n */\r\n\r\nconst server = new WebpackDevServer(compiler, {\r\n\t // After setting the static parameter, the file path in `public/index.html` can be written as: `../dist/app.min.css`\r\n\t static: path.resolve(__dirname, '../' ),\r\n\t hot: true,\r\n\t // Disables a full-screen overlay in the browser when there are compiler errors or warnings.\r\n\t client: {\r\n\t\t overlay: {\r\n\t\t\t warnings: false,\r\n\t\t\t errors: true\r\n\t\t }\r\n\t },\r\n\r\n});\r\n\r\nserver.listen(8080, \"localhost\", function (err, result) {\r\n\tif (err) {\r\n\t\treturn console.log(err);\r\n\t}\r\n\r\n\tconsole.log( 'Listening at http://localhost:8080/');\r\n})\r\n</pre>\n<h4>第6步: 修改package.json文件的eslintConfig和jest部分</h4>\n<p>修改后的代码如下（<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）</p>\n<pre>  \"jest\": {\r\n    \"moduleNameMapper\": {\r\n      \"\\\\.(css|less|scss|sass)$\": \"identity-obj-proxy\",\r\n      \"^@/(.*)\": \"/src/$1\"\r\n    },\r\n  },\r\n \"eslintConfig\": {\r\n    \"parserOptions\": {\r\n      \"parser\": \"@typescript-eslint/parser\",\r\n      \"ecmaVersion\": 2018,\r\n      \"sourceType\": \"module\",\r\n      \"ecmaFeatures\": {\r\n        \"jsx\": true\r\n      }\r\n    },\r\n    \"extends\": [\r\n      \"plugin:react/recommended\",\r\n      \"plugin:@typescript-eslint/recommended\"\r\n    ],\r\n    \"rules\": {},\r\n    \"settings\": {\r\n      \"react\": {\r\n        \"version\": \"detect\"\r\n      }\r\n    }\r\n  },</pre>\n<p>别名如果指定更多，<code>package.json</code> 文件的 <code>eslintConfig</code> 和 <code>jest</code> 部分可以写成：</p>\n<pre>...\r\n  \"jest\": {\r\n    \"testEnvironment\": \"jsdom\",\r\n    \"moduleNameMapper\": {\r\n      \"\\\\.(css|less|scss|sass)$\": \"identity-obj-proxy\",\r\n      \"^@app.react/config/(.*)\": \"/src/config/$1\",\r\n      \"^@app.react/components/(.*)\": \"/src/client/components/$1\",\r\n      \"^@app.react/router/(.*)\": \"/src/client/router/$1\",\r\n      \"^@app.react/helpers/(.*)\": \"/src/client/helpers/$1\",\r\n      \"^@app.react/services/(.*)\": \"/src/client/services/$1\",\r\n      \"^@app.react/reducers/(.*)\": \"/src/client/reducers/$1\",\r\n      \"^@app.react/pages/(.*)\": \"/src/client/views/_pages/$1\",\r\n      \"^@app.react/actions/(.*)\": \"/src/client/actions/$1\",\r\n      \"^@app.react/server/(.*)\": \"/src/server/$1\",\r\n      \"^@app.react/store/(.*)\": \"/src/store/$1\"\r\n    },\r\n    \"transform\": {\r\n      \"^.+\\\\.(js|jsx)$\": \"babel-jest\",\r\n      \"^.+\\\\.(ts|tsx)?$\": \"ts-jest\"\r\n    }\r\n  },\r\n…\r\n</pre>\n<h4>第7步: 修改tsconfig.json文件</h4>\n<p><span style=\"color: #ff0000;\">特别注意：<code>baseUrl</code>, <code>\"@/*\": [\"*\"]</code> 和 <code>include</code>，这几个连带的设置不能出错。</span></p>\n<p>参考代码如下（<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）</p>\n<pre>{\r\n    \"compilerOptions\": {\r\n      \"jsx\": \"react\",\r\n     \"baseUrl\": \"./src\",\r\n      \"paths\": {\r\n        \"@/*\": [\"*\"]\r\n        }\r\n    },\r\n    \"include\": [\r\n      \"src/**/*.ts\", \"src/**/*.tsx\"\r\n    ],\r\n}</pre>\n<p>别名如果指定更多，<code>tsconfig.json</code> 可以写成：</p>\n<pre>...\r\n      \"baseUrl\": \"./src\",\r\n      \"paths\": {\r\n        \"@app.react/config/*\": [\"config/*\"],\r\n        \"@app.react/components/*\": [\"client/components/*\"],\r\n        \"@app.react/router/*\": [\"client/router/*\"],\r\n        \"@app.react/helpers/*\": [\"client/helpers/*\"],\r\n        \"@app.react/services/*\": [\"client/services/*\"],\r\n        \"@app.react/reducers/*\": [\"client/reducers/*\"],\r\n        \"@app.react/pages/*\": [\"client/views/_pages/*\"],\r\n        \"@app.react/actions/*\": [\"client/actions/*\"],\r\n        \"@app.react/server/*\": [\"server/*\"],\r\n        \"@app.react/store/*\": [\"store/*\"]\r\n      }\r\n    },\r\n…</pre>\n<h4>第8步: 修改babel.config.js文件</h4>\n<p>参考代码如下（<span style=\"background-color: #ffff00;\">自己可以对比之前的基础代码</span>）</p>\n<pre>module.exports = {\r\n  \"presets\": [\r\n    [\r\n      \"@babel/preset-react\"\r\n    ],\r\n  ],\r\n  \"plugins\": [\r\n    [\r\n      \"@babel/plugin-proposal-class-properties\"\r\n    ],\r\n    [\"module-resolver\", {\r\n      \"root\": [\"./src\"],\r\n      \"alias\": {\r\n        \"@/\": \"./src\"\r\n      }\r\n    }]\r\n\r\n  ]\r\n};</pre>\n<p>别名如果指定更多，<code>babel.config.js</code> 可以写成：</p>\n<pre>...\r\n    [\"module-resolver\", {\r\n      \"root\": [\"./src\"],\r\n      \"alias\": {\r\n        \"@app.react/config\": \"./src/config\",\r\n        \"@app.react/components\": \"./src/client/components\",\r\n        \"@app.react/router\": \"./src/client/router\",\r\n        \"@app.react/helpers\": \"./src/client/helpers\",\r\n        \"@app.react/services\": \"./src/client/services\",\r\n        \"@app.react/reducers\": \"./src/client/reducers\",\r\n        \"@app.react/pages\": \"./src/client/views/_pages\",\r\n        \"@app.react/actions\": \"./src/client/actions\",\r\n        \"@app.react/server\": \"./src/server\",\r\n        \"@app.react/store\": \"./src/store\"\r\n      }\r\n    }]\r\n \r\n…\r\n</pre>\n<h4>第9步: 修改webpack的externals属性【可选】</h4>\n<p>根据需要修改webpack的排除文件夹，方便创建npm包发布的编译文件。<code>externals</code> 属性防止将某些 import 的包(package)打包到 bundle 中,而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。参考代码如下：</p>\n<pre>\t//Exclude react from bundle\r\n\texternals: [\r\n\t\t{\r\n\t\t\t// String\r\n\t\t\t'react': 'React',\r\n\t\t\t'react-dom': 'ReactDOM',\r\n\t\t},\r\n\t\t// Function\r\n\t\tfunction ({ context, request }, callback) {\r\n\r\n\t\t\t// Use the same './_all' path to prohibit loading of general style sheets\r\n\t\t\tif ( request.indexOf( '@/components/_utils/styles' ) &gt;= 0 ) {\r\n\t\t\t\treturn callback(null, 'commonjs ' + './_all');\r\n\t\t\t}\r\n\r\n\t\t\tif ( request.indexOf( '@/components/_utils/_all' ) &gt;= 0 ) {\r\n\t\t\t\treturn callback(null, 'commonjs ' + './_all');\r\n\t\t\t}\t\r\n\t\t\tcallback();\r\n\t\t},\r\n\t\t// Regex\r\n\t\t/^(jquery|\\$)$/i,\r\n\t],\r\n</pre>\n<h4>第10步: 根据需要定义webpack的插件【可选】</h4>\n<p>下面的例子定义了一个编译完成后的插件，遍历目录并且移动删除。</p>\n<pre>/*! \r\n *************************************\r\n *  Run command after webpack build\r\n *************************************\r\n */\r\n const glob = require('glob');\r\n const fs = require('fs');\r\n \r\n \r\n const packagesRoot = glob.sync( path.resolve(__dirname, '../packages/*/*.ts') );\r\n const packagesSub = glob.sync( path.resolve(__dirname, '../packages/*.ts') );\r\n const packages = packagesRoot.concat( packagesSub );\r\n const componentsEntry = {};\r\n packages.map( ( path ) =&gt; {\r\n     const filename = path.split( '/' ).pop().replace('.ts', '');\r\n     componentsEntry[ filename ] = path;\r\n });\r\n \r\n console.log( 'componentsEntry: ', componentsEntry );\r\n\r\n class MyPluginCompiledFunction {\r\n\t// Define `apply` as its prototype method which is supplied with compiler as its argument\r\n\tapply(compiler) {\r\n\t\t// Specify the event hook to attach to\r\n\t\tcompiler.hooks.done.tap('MyPluginCompiledFunction', (compilation) =&gt; {\r\n\r\n\t\t\t//Move the components to folders of root directory\r\n\t\t\tconst comNames = Object.keys( componentsEntry );\r\n\t\t\tpackages.map( ( comPath, index ) =&gt; {\r\n\t\t\t\t\r\n\t\t\t\tconst newDir = path.resolve(__dirname, `../${comNames[index]}`);\r\n\t\t\t\tconst oldPath = path.resolve(__dirname, `../dist/cjs/${comNames[index]}.js`);\r\n\t\t\t\tconst newPath = `${newDir}/index.js`;\r\n\t\t\t\t\r\n\t\t\t\tif (!fs.existsSync(newDir)){\r\n\t\t\t\t\tfs.mkdirSync(newDir);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfs.rename(oldPath, newPath, function (err) {\r\n\t\t\t\t  if (err) throw err\r\n\t\t\t\t  console.log(`Successfully ${comNames[index]}.js moved!`);\r\n\t\t\t\t});\r\n\r\n\t\t\t});\r\n\r\n\t\t\t//remove old folder\r\n\t\t\t// Where the recursive option deletes the entire directory recursively.\r\n\t\t\tfs.rmdirSync(path.resolve(__dirname, '../dist/cjs'), { recursive: true });\r\n\t\t\t\r\n\t\t});\r\n\t}\r\n}\r\n  \r\n\r\n/*! \r\n *************************************\r\n *  Main configuration\r\n *************************************\r\n */\r\n module.export = {\r\n    ...\r\n\tplugins: [ new MyPluginCompiledFunction() ]\r\n};</pre>\n<h4>第11步: 根据需要定义Node脚本【可选】</h4>\n<p>脚本可以单独分离出来，抛弃webpack，直接执行，使用node来执行JS文件即可修改 <code>package.json</code> 文件：</p>\n<pre>  \"scripts\": {\r\n    \"clear\": \"node xxx.js\"\r\n  }</pre>\n<h3>（六）使用webpack内置生成HTML功能</h3>\n<p>如果创建Electron应用，需要单独调用生成的js，所以内置生成HTML的功能暂时不使用。这里做一个配置参考。</p>\n<p>您可以手动创建 <code>public/index.html</code> 来加载 <code>dist</code> 里生成的 <code>app.min.css</code> 和 <code>app.min.js</code>，8080端口将默认运行 <code>public</code> 里的<code>index.html</code>,它将自动定位到dist的文件，所以无需增加dist的二级目录。直接写 <code>app.min.css</code> 和 <code>app.min.js</code> 即可</p>\n<p>（<code>webpack-dev-server</code> 设置 <code>static</code>参数后，<code>public/index.html</code> 内的文件路径可以写成如：<code>../dist/app.min.css</code>, 使用 <code>localhost:8080/public/index.html</code> 访问）</p>\n<p>到目前为止，我们都是在 index.html 文件中手动引入所有资源，然而随着应用程序增长，并且一旦开始 在文件名中使用 hash 并输出 多个 bundle，如果继续手动管理 index.html 文件，就会变得困难起来。然而，通过一些插件可以使这个过程更容易管控。</p>\n<p>我们使用webpack的HTML生成功能直接打包生成，并且导入资源。参看：</p>\n<p><a href=\"https://webpack.docschina.org/guides/asset-management/\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/asset-management/</a><br />\n<a href=\"https://webpack.docschina.org/guides/output-management/\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/output-management/</a></p>\n<p>使用内置的<a href=\"https://webpack.docschina.org/guides/asset-modules/\" target=\"_blank\" rel=\"noopener\">Asset Modules</a>来导入图片文件等，使用 <code>HtmlWebpackPlugin</code> 插件来生成HTML文件</p>\n<h3 style=\"line-height: 1.42188em;\">（七）结语</h3>\n<p>好了，我们已经完成了从基础到深入的基础脚手架搭建，属于自己的一个微前端架构算是完成了一个雏形，以其说是雏形，也可以说其实可以直接用于部分适合需求的项目。你也可以再次基础上增加更多的配置，比如PM2的支持，Express的支持，资源压缩优化等等功能。</p>\n<p>都到这里了，接下去，我们要做一个项目，我们可以使用自己的脚手架，也可以大胆的使用诸如nextjs或者create-react-app这类的工具了，底气足了，学习起来是不是更有干劲了？如果文章对你有帮助，也可以持续关注我，不定期更新一个小技巧。</p>\n","slug":"b214e53f0c655e422783718d","prev":[{"ID":903333,"title":"CentOS 8.0  LEMP环境的性能与安全优化指南2022版","excerpt":"在上一篇文章《从零部署Linux服务器完全指南2022版(CentOS 8+Nginx+PHP)》的基础上，我们完成了LEMP环境的部署，接下去为了提高网站运行的稳定性，我们将对其进行进一步的性能与安全优化。","slug":"performance-and-security-optimization-guide-for-centos8-lemp-environment-2022","post_date":"2022-04-21 16:35:43","post_date_gmt":"2022-04-21 16:35:43","thumbnail":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-matrixflipcomapiwpcontentuploadsccomdddbcddcxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-150x150-matrixflipcomapiwpcontentuploadsccomdddbcddcxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-matrixflipcomapiwpcontentuploadsccomdddbcddcxjpg.jpg",770,340,false]}],"next":[{"ID":24272658,"title":"前端框架带来的疑惑与是非","excerpt":"说到框架，行业间的人都无数在争执前后端分离的Vue和React，跨平台软件开发的Qt 和Electron，快速搭建整站的高性能解决方案并可满足全栈需求的Nextjs和Gatsby，它们都有各自的职责和特色，整体上都是为了解决一些共同的问题。那作为用户到底怎么去看待？涉及到业务领域，那么相对应的产品的业务框架，到底又是什么？有没有现成的\"框架\"以供使用？这些问题总是在各种社区充满了战火。","slug":"the-confusion-of-the-front-end-framework","post_date":"2022-11-18 02:25:38","post_date_gmt":"2022-11-18 02:25:38","thumbnail":[],"thumbnail_mini":[],"thumbnail_retina":[]}],"post_date":"2022-05-13 08:15:01","post_date_gmt":"2022-05-13 08:15:01","post_status":"publish","comment_status":"open","ping_status":"open","post_password":"","to_ping":"","pinged":"","post_modified":"2022-11-18 02:31:20","post_modified_gmt":"2022-11-18 02:31:20","post_content_filtered":"","post_parent":0,"guid":"https://matrixflip.com/api/?p=24272280","menu_order":0,"post_type":"post","post_mime_type":"","comment_count":"0","filter":"raw"},"postID":"b214e53f0c655e422783718d"},"__N_SSG":true}