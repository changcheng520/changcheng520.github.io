{"pageProps":{"currentData":{"ID":893333,"author":"1","author_nickname":"wpuser","author_display_name":"Chuckie Chang","author_url":"https://matrixflip.com/api","author_username":"wpuser","author_avatar":"https://secure.gravatar.com/avatar/?s=96&d=mm&r=g","categories":[87],"categories_output":[{"ID":87,"slug":"%e5%bc%80%e5%8f%91%e8%b6%a3%e5%91%b3","name":"开发趣味","term_taxonomy_id":87,"term_group":0,"taxonomy":"category","description":"","parent":0,"count":17}],"tags":[88,89,92,91,90],"tags_output":[{"ID":88,"slug":"centos","name":"CentOS","term_taxonomy_id":88,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":3},{"ID":89,"slug":"linux","name":"Linux","term_taxonomy_id":89,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":2},{"ID":92,"slug":"nginx","name":"Nginx","term_taxonomy_id":92,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":91,"slug":"php","name":"PHP","term_taxonomy_id":91,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":90,"slug":"%e6%9c%8d%e5%8a%a1%e5%99%a8","name":"服务器","term_taxonomy_id":90,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":3}],"thumbnail":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-matrixflipcomapiwpcontentuploadsccomeabeedcxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-150x150-matrixflipcomapiwpcontentuploadsccomeabeedcxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-matrixflipcomapiwpcontentuploadsccomeabeedcxjpg.jpg",770,340,false],"thumbnail_full":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-matrixflipcomapiwpcontentuploadsccomeabeedcxjpg.jpg",770,340,false],"date_day":"06","date_month":"04","date_month_e":"April","date_year":"2022","date_weekday":"Wednesday","title":"从零部署Linux服务器完全指南2022版(CentOS 8+Nginx+PHP)","excerpt":"之前我的一个CentOS 7 Apache的站点被攻击，导致流量过载损失了一笔钱，由于也是边学习边部署的，有不少安全隐患，为了避免常见安全隐患再次发生，后来找出大概的原因后决定重新部署一个基于CentOS 8 Nginx的服务器。这也是充分利用Google和自己探索的一些从零部署的技巧和方法。","content":"<p><strong>之前我的一个CentOS 7 Apache的站点被攻击，导致流量过载损失了一笔钱，由于也是边学习边部署的，有不少安全隐患，为了避免常见安全隐患再次发生，后来找出大概的原因后决定重新部署一个基于CentOS 8 Nginx的服务器。这也是充分利用Google和自己探索的一些从零部署的技巧和方法。</strong></p>\n<p><em>注意：<span style=\"background-color: rgb(255, 255, 255);color:#ff0000;\">请按照由上至下的顺序操作，不保证每个人的Linux服务器都没有差错，如果保证服务器系统的纯净，大体上是没有问题的，如果出现问题可以自己根据问题日志谷歌一下寻找原因。我自己也是这么一步一步过来的。我的其中一个网站购买的是 <a href=\"https://www.vultr.com/?ref=6881040\" target=\"_blank\" rel=\"noopener\">Vultr</a> 的(以前也用过Bluehost、Linode公司的)，用了很多年了，作为国外服务器的品牌来说是很不错的一个选择。性价比不错，对于非土豪的我来说是绝佳选择。</span></em></p>\n<p>购买完CentOS 8.0版本的服务器之后，就可以正式开始从零部署咯，因为我的主系统是使用WordPress，因此我的配置也是需要支持PHP的，当然Node也是需要的(同理你可以配置支持其它后端语言)，我把一些用到的配置和命令都整理成文章，也方便自己未来查阅巩固。同时对于一个从来没有部署过或者使用过其它配置的Linux服务器的你，相信也能够提供不少帮助。目前自己的那个网站运营三个月以上暂没有受到相同的攻击和流量注入，对于一个新人来说我还是比较满意的，不求人，靠自己稳定运营下去：）</p>\n<p>服务器需要支持的基础功能关系如下：</p>\n<p><img src=\"/static-remote/files/c6fb89a72f4c1a189587080c-matrixflipcomapiwpcontentuploadscfbafcacpng.png\" alt=\"\" /></p>\n<p>整体步骤分为下面的八个：</p>\n<blockquote><p><strong>（一）购买VPS，设置Server Hostname<br />（二）Point a Domain Name to a Server域名指向<br />（三）CentOS8系统-进程监控和bandwidth带宽监控<br />（四）安装解压软件<br />（五）CentOS 8.0  LEMP (with Nginx, MySQL , and PHP-FPM)安装<br />（六）增加Nginx维护页面，临时维护使用<br />（七）完成 LEMP基础配置后，升级性能和安全性,其它配置<br />（八）Node环境配置（请完成此文档上面所有步骤后再继续）</strong></p></blockquote>\n<p>开始之前，我们先熟悉一些整个过程常用的一些<span style=\"background-color: rgb(255, 255, 0);\">命令：</span></p>\n</p>\n<pre class=\"codePre brush: js;\">#VI相关操作:\n#在用vi创建文件后，点击 i 即可进入编辑文本模式的insert状态，再点击ESC即可退出编辑，然后输入 :wq 即可保存文本并退出\n#后面不要有空格,在「命令行模式（command mode）」下，按一下 ： 冒号键进入「Last line mode」)\n#先按   /  键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按  n   会往后寻找到您要的关键字为止。\n#先按  ?  键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按  n  会往前寻找到您要的关键字为止。\n#查找后再 i 修改即可\n#向下查找关键字，按 n 可继续查找\n\nvi /path/filename.ext #修改/新增文件\n: w filename #输入 「w filename」将文章以指定的文件名filename保存\n: wq  #输入「wq」，存盘并退出vi\n: q!  #输入q!， 不存盘强制退出vi\n/word  #这个是查找文件中“word”这个单词，是从文件上面到下面查找 \n?word  #这个是查找文件中“word”这个单词，是从文件下上面到面查找\ndd #删除游标所在的一整行(非编辑模式)\n\n#退出当前正在执行的命令\nctrl z   \n\n#（字母是L）查看某文件夹内文件或者文件夹的权限\nll /var/lib/nginx/\n\n#（字母是L）查看当前目录的文件夹和文件\nls -d * \n\n #根据文件名查找文件路径\nfind / -xdev -name filename.suffix\n\n#查看某属性\ncat /etc/vsftpd/vsftpd.conf | grep write_enable \n\n#查看centOS版本 (目前版本：CentOS Linux release 7.1.1503 (Core) )\ncat /etc/redhat-release  \n\n#远程连接终端\nssh root@12.34.56.789\nssh -vv root@12.34.56.789  (可查看连接日志错误)\n密码：******\n\n\n#如果无法登陆远程终端，尝试\nssh-keygen -R 12.34.56.789\n#然后再登陆\n\n\n#新建文件夹\nmkdir /??? \n\n#文件夹改名\nmv ??? ???  \n\n#列出目录下所有文件\nls  \n\n#查找安装的程序的路径(比如查看Node)\nwhich node \n\n#重装系统登录失败要清楚公钥使用命令：\nsudo rm /Users/mac/.ssh/known_hosts  \n#或者\nsudo rm ~/.ssh/known_hosts\n\n\n#若登陆成功后出现” warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory”,则添加一个文件即可：\n#如果访问被拒绝，可能是IP原因，日本东京无法登陆，轻换VPN。\nsudo vi /etc/environment\n\n#添加以下代码：\nLANG=en_US.utf-8\nLC_ALL=en_US.utf-8\n\n#出现『Connection closed by 12.34.56.789』错误，尝试修正权限错误：\nsudo chmod 700 /etc/ssh_host_dsa_key\n\n#查看网络进程(比如httpd, mysqld, sshd等)\nnetstat -plntu\n\n#查看所有端口的进程\nss -tpln\n\n#访问URL获取请求信息\ncurl -I https://yoursite.com\n\n#检查httpd进程状态\nsystemctl list-unit-files\n\n# 输出激活的单元列表\nsystemctl list-units\n\n# 列出Nginx日志文件\nls -laZ /var/log/nginx/ \n\n#打开错误或访问日志\ncat  /var/log/nginx/access.log\ncat  /var/log/nginx/error.log\n\n#查看最新100条错误日志\nsudo tail -100 /var/log/nginx/error.log\n\n#错误日志会占用很多性能，要定期清理(配置 logrotate 来维护日志文件。\n#删除日志\nfind /var/log/nginx/error.log -type f -delete\nfind /var/log/nginx/error.log-* -type f -delete\n\n#查看日志及其大小\nls -la /var/log/nginx/ \n\n\n#下载解压\nwget https://wordpress.org/latest.tar.gz\ntar -xzvf latest.tar.gz\n\n#删除文件\nrm xxxxxx.zip\n\n#删除文件夹和文件 (强制删除)\nrm -rf xxxxx\n\n#改名\nmv file1.txt file2.txt\n\n#查找5天内修改过的文件\nfind /usr/share/nginx/html/wordpress/ -type f -mtime -5   #5days\n\n#查找包含某字符串的文件\ngrep -r &quot;jqueryeasyui&quot; /usr/share/nginx/html/wordpress/\n\n#将新解压的位于/usr/share/nginx/html/wordpress/目录中的wordpress 文件夹的文件移动\ncp -r /usr/share/nginx/html/wordpress/wordpress/* /usr/share/nginx/html/wordpress/</pre>\n<p>熟悉一下此次从零开始部署服务器过程中我常用的这些命令，好了，接下去我们正式开始<img alt=\"欢迎\" src=\"/static-remote/files/9-matrixflipcomapiwpcontentuploadsgif.gif\" />。</p>\n</p>\n<h3>（一）购买VPS，设置Server Hostname</h3>\n</p>\n<p>设置为你的域名比如 <strong>yoursite.com</strong></p>\n<p>1、每次登录到linux上，就会看到gaofeng@ubuntu:~$   这样的提示符，@后面的就是hostname</p>\n<pre class=\"codePre brush: js;\">gaofeng@ubuntu:~$ hostname\nubuntu</pre>\n<p>2、hostname有什么用呢？</p>\n<ul>\n<li>可以知道自己是不是登录错机器了。</li>\n<li> 在本机的/etc/hosts文件中添加经常访问的机器的ip地址和主机名的映射关系，下次访问时，可以ssh gaofeng@ubuntu来登录，不用记住IP地址了(前提是人家的ip没有变)。</li>\n</ul>\n<h3>（二）Point a Domain Name to a Server域名指向</h3>\n<h4>1、域名注册商绑定IP，并设置DNS指向到VPS注册商，</h4>\n<p>比如</p>\n<p><img src=\"/static-remote/files/36c519a043cadc7de3e0bb0e-matrixflipcomapiwpcontentuploadscacadcdeebbejpg.jpg\" alt=\"\" /></p>\n<p>点击自助解析DNS(这里我修改为<a href=\"https://www.vultr.com/?ref=6881040\" target=\"_blank\" style=\"font-style: italic;\" rel=\"noopener\">Vultr</a> 的DNS信息)</p>\n<p><img src=\"/static-remote/files/cece7d444a7d960827435c66-matrixflipcomapiwpcontentuploadscecedadcjpg.jpg\" alt=\"\" /></p>\n<h4>2.注册商配置NDS</h4>\n<p><img src=\"/static-remote/files/2b66840a29f061b9c915a615-matrixflipcomapiwpcontentuploadsbafbcajpg.jpg\" alt=\"\" /></p>\n<h3>（三）CentOS8系统-进程监控和bandwidth带宽监控</h3>\n</p>\n<h4>添加 EPEL 存储库</h4>\n<pre class=\"codePre brush: js;\">sudo yum install epel-release</pre>\n<h4> 安装进程监控软件</h4>\n<pre class=\"codePre brush: js;\">sudo yum install htop</pre>\n<p>运行</p>\n<pre class=\"codePre brush: js;\">htop</pre>\n<p><img src=\"/static-remote/files/9704ac8217a618aeb2b4e918-matrixflipcomapiwpcontentuploadsacaaebbejpg.jpg\" alt=\"\" /></p>\n</p>\n<h4>安装带宽监控软件iftop</h4>\n<p> iftop 是一个简单、易用、实时的类似 top 的基于命令行的网络带宽监控工具，用于快速了解界面上的网络活动。 它平均每 2、10 和 40 秒显示一次网络使用带宽更新。</p>\n<pre class=\"codePre brush: js;\">sudo yum install  iftop -y</pre>\n<p>运行 interface top 命令以查看终端上的网络带宽活动。</p>\n<pre class=\"codePre brush: js;\">iftop</pre>\n<p>运行后如图：</p>\n<p><img src=\"/static-remote/files/88756a05bc5a370dbf8630ac-matrixflipcomapiwpcontentuploadsabcadbfacjpg.jpg\" alt=\"\" /></p>\n<p></p>\n</p>\n<h3>（四）安装解压软件</h3>\n</p>\n<p>Tar 不再默认安装在 RHEL 8 / CentOS 8 上，需要安装</p>\n</p>\n<pre class=\"codePre brush: js;\">yum install -y tar</pre>\n</p>\n<p>P7Zip用于zip文件包的解压</p>\n<pre class=\"codePre brush: js;\">dnf install p7zip p7zip-plugins</pre>\n<p>解压命令如：</p>\n<pre class=\"codePre brush: js;\">tar -zxvf /path/***.tar.gz\n7za x /path/***.zip</pre>\n<p>备份整站压缩命令如：</p>\n<pre class=\"codePre brush: js;\">cd /usr/share/nginx/html/wordpress/\n7za a /usr/share/nginx/html/wordpress/xxx.7z /usr/share/nginx/html/wordpress\nrm -rf /usr/share/nginx/html/wordpress/xxx.7z   #下载后删除</pre>\n<p></p>\n<h3>（五）CentOS 8.0  LEMP (with Nginx, MySQL , and PHP-FPM)安装</h3>\n</p>\n<p><span style=\"color:#ff0000;\">注意：请严格按1~11的步骤进行</span></p>\n<blockquote><p><strong>1.安装Nginx<br />2.安装MariaDB<br />3.安装PHP7.4<br />4.配置PHP到Nginx服务器<br />5.新建WordPress数据库需要的表，测试是否能连接<br />6.安装WordPress<br />7.Nginx 基础配置和基本安全配置<br />8. WordPress命令配置（不通过网址进入UI界面，参考）<br />9. 安装SFTP<br />10.配置HTTPS<br />11.修改Nginx配置，将http跳转到https<br />12.Nginx配置https支持PHP和常用功能，重装配置WordPress</strong></p></blockquote>\n</p>\n<p>我们先查看一下CentOS版本</p>\n<pre class=\"codePre brush: js;\">cat /etc/os-release</pre>\n<p><strong><img src=\"/static-remote/files/24f25cebe3225536860bb4f9-matrixflipcomapiwpcontentuploadsfcebebbfjpg.jpg\" alt=\"\" /><br /></strong></p>\n<h4>1.安装Nginx</h4>\n</p>\n<p>当前版本：1.14.1</p>\n</p>\n<pre class=\"codePre brush: js;\">yum install nginx -y</pre>\n</p>\n<p>运行：</p>\n</p>\n<pre class=\"codePre brush: js;\">systemctl start nginx</pre>\n</p>\n<p>开机时启动</p>\n</p>\n<pre class=\"codePre brush: js;\">systemctl enable nginx</pre>\n</p>\n<p>状态查看</p>\n</p>\n<pre class=\"codePre brush: js;\">systemctl status nginx</pre>\n<p><img src=\"/static-remote/files/0813f49a963b2b40e1069855-matrixflipcomapiwpcontentuploadsfabbejpg.jpg\" alt=\"\" /></p>\n</p>\n<p>查看版本（目前使用1.14.1）</p>\n</p>\n<pre class=\"codePre brush: js;\">nginx -v</pre>\n</p>\n<p></p>\n<p>RHEL 8 / CentOS 8 默认没有配置 firewalld 来服务 Web 流量，运行以下命令</p>\n<p>允许 HTTP 和 https 的 Web 服务器流量的命令，具有永久规则，这些规则将在一段时间后持续存在<br />重启。</p>\n</p>\n<pre class=\"codePre brush: js;\">firewall-cmd --permanent --zone=public --add-service=http\nfirewall-cmd --permanent --zone=public --add-service=https</pre>\n</p>\n<p>重新加载防火墙守护程序以进行更改</p>\n</p>\n<pre class=\"codePre brush: js;\">firewall-cmd --reload</pre>\n</p>\n<p>重启</p>\n</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx </pre>\n</p>\n<p>运行绑定好的域名，可以看到：</p>\n<p><img src=\"/static-remote/files/274b252a00cf4337b9f3a2a8-matrixflipcomapiwpcontentuploadsbacfbfaajpg.jpg\" alt=\"\" /></p>\n<h4>2.安装MariaDB</h4>\n</p>\n<p>使用 dnf 安装 MariaDB 包</p>\n</p>\n<pre class=\"codePre brush: js;\">sudo dnf install mariadb-server</pre>\n</p>\n<p>启动</p>\n<pre class=\"codePre brush: js;\">sudo systemctl start mariadb</pre>\n<p>检查状态</p>\n<pre class=\"codePre brush: js;\">sudo systemctl status mariadb</pre>\n<p>设置开机启动</p>\n<pre class=\"codePre brush: js;\">sudo systemctl enable mariadb</pre>\n<p></p>\n<p>保护 MariaDB 服务器，MariaDB 包含一个安全脚本，用于更改一些不太安全的默认选项，例如远程 root 登录和示例用户。 使用此命令运行安全脚本：</p>\n</p>\n<pre class=\"codePre brush: js;\">sudo mysql_secure_installation</pre>\n</p>\n<p>键入 Y 然后按 ENTER 输入 root 数据库用户的密码，然后按照提示操作。更新密码后，我们将通过按 y 然后按 ENTER 接受所有安全建议。 这将删除匿名用户，禁止远程 root 登录，删除测试数据库，并重新加载权限表。现在我们已经保护了安装，我们将通过连接到数据库来验证它是否正常工作。</p>\n<p><strong>根据提示设置密码。</strong></p>\n<p>测试登录</p>\n<pre class=\"codePre brush: js;\">mysqladmin -u root -p version</pre>\n<p></p>\n<p>重启MariaDB</p>\n<pre class=\"codePre brush: js;\">systemctl restart mariadb.service </pre>\n<h4>3.安装PHP7.4</h4>\n</p>\n<p>Nginx本身不能处理PHP，它只是个web服务器，当接收到请求后，如果是php请求，则发给php解释器处理，并把结果返回给客户端。nginx一般是把请求发fastcgi管理进程处理，fascgi管理进程选择cgi子进程处理结果并返回被Nginx。<br />PHP-FPM是一个PHP FastCGI进程管理器，此版本安装默认就附带。</p>\n<p>使用dnf安装</p>\n<pre class=\"codePre brush: js;\">dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm</pre>\n<p>要确认 EPEL 存储库是否存在，请运行以下 rpm 命令</p>\n<pre class=\"codePre brush: js;\">rpm -qa | grep epel</pre>\n<p>接下来，运行以下命令以添加 Remi 存储库</p>\n<pre class=\"codePre brush: js;\">dnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm</pre>\n<p></p>\n<p>再次，要验证 Remi 存储库是否存在，请运行该命令</p>\n<pre class=\"codePre brush: js;\">rpm -qa | grep remi</pre>\n<p>成功添加 EPEL 和 Remi 存储库后，执行以下命令以获取可用 PHP 模块流的列表</p>\n<pre class=\"codePre brush: js;\">dnf module list php</pre>\n<p><img src=\"/static-remote/files/cce91263748737b29f6ae1e1-matrixflipcomapiwpcontentuploadsccebfaeejpg.jpg\" alt=\"\" /></p>\n</p>\n<p>从上面的输出来看，remi-7.4 是合适版本的PHP 流，因此我们将启用模块流，如下所示</p>\n<pre class=\"codePre brush: js;\">dnf module enable php:remi-7.4</pre>\n<p>启用 PHP remi-7.4 模块后，您可以使用以下命令继续安装 PHP。 这还将安装许多其他软件包，例如 Apache 和 Nginx 模块</p>\n<pre class=\"codePre brush: js;\">dnf install php php-cli php-common</pre>\n<p>检查版本（目前安装7.4.26）</p>\n<pre class=\"codePre brush: js;\">php -v</pre>\n<p><img src=\"/static-remote/files/a455fec8215b86461e97d4c9-matrixflipcomapiwpcontentuploadsafecbedcjpg.jpg\" alt=\"\" /></p>\n</p>\n<p><span style=\"background-color: rgb(255, 255, 0);\">安装完核心模块后，继续安装缺失的模块(特别是mysqli数据库模块)，解决WordPress无法运行的问题，数据库无法链接的问题</span></p>\n<pre class=\"codePre brush: js;\">yum install -y  php-mysqlnd php-gd </pre>\n<p>安装服务和模块后，启动 PHP-FPM</p>\n<pre class=\"codePre brush: js;\">systemctl start php-fpm</pre>\n<p>配置开机启动</p>\n<pre class=\"codePre brush: js;\">systemctl enable php-fpm</pre>\n<p>检查状态</p>\n<pre class=\"codePre brush: js;\">systemctl status php-fpm</pre>\n<p><img src=\"/static-remote/files/5cce6dd7ccecd697dea6c7b7-matrixflipcomapiwpcontentuploadscceddccecddeacbjpg.jpg\" alt=\"\" /></p>\n</p>\n<p>默认的 PHP-FPM 配置文件设置为以 apache 用户身份运行，找到并更改以下内容<br />条目如下所示(将apache改成nginx)：</p>\n<p>先备份一个原配置：</p>\n<pre class=\"codePre brush: js;\">cp /etc/php-fpm.d/www.conf /etc/php-fpm.d/www.conf.bak</pre>\n<p>修改配置：</p>\n<pre class=\"codePre brush: js;\">vi /etc/php-fpm.d/www.conf</pre>\n<p>    配置如下：</p>\n</p>\n<pre class=\"codePre brush: js;\">user = nginx\ngroup = nginx\nlisten.owner = nginx\nlisten.group = nginx</pre>\n</p>\n<p></p>\n<p>    重新加载 PHP-FPM 以进行更改</p>\n</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx php-fpm</pre>\n<h4>    4.配置PHP到Nginx服务器</h4>\n</p>\n<p>    首先，使用cat命令找出PHP-FPM FastCGI服务器配置的位置</p>\n<pre class=\"codePre brush: js;\">cat /etc/nginx/conf.d/php-fpm.conf</pre>\n<p><img src=\"/static-remote/files/bbece5b114cb257eeb734261-matrixflipcomapiwpcontentuploadsbbecebcbeebjpg.jpg\" alt=\"\" /></p>\n<p>    确保 Unix 套接字已启动并正在运行，运行：</p>\n<pre class=\"codePre brush: js;\">ls -l /run/php-fpm/www.sock</pre>\n<p><img src=\"/static-remote/files/4568b89d0b7e3c44ac315c33-matrixflipcomapiwpcontentuploadsbdbecaccjpg.jpg\" alt=\"\" /></p>\n<p>    我的 CentOS 8 和 Nginx 的 php-fpm 配置，运行命令行获取到代码</p>\n<pre class=\"codePre brush: js;\">cat /etc/nginx/default.d/php.conf</pre>\n<p>    代码如下：</p>\n</p>\n<pre class=\"codePre brush: js;\"># pass the PHP scripts to FastCGI server\n#\n# See conf.d/php-fpm.conf for socket configuration\n#\nindex index.php index.html index.htm;\n\nlocation ~ \\.php$ {\n    try_files $uri =404;\n    fastcgi_intercept_errors on;\n    fastcgi_index  index.php;\n    include        fastcgi_params;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n    fastcgi_pass   php-fpm;\n}</pre>\n</p>\n<p>    再次运行 systemctl 命令：</p>\n<pre class=\"codePre brush: js;\">sudo systemctl restart nginx.service</pre>\n<p>    新建测试文件：</p>\n<pre class=\"codePre brush: js;\">sudo vi /usr/share/nginx/html/hello.php</pre>\n<p>    内容如下</p>\n</p>\n<pre class=\"codePre brush: js;\">&lt;?php\nphpinfo();\n?&gt;</pre>\n<p>运行网址，我们可以看到浏览器如下界面：</p>\n<p>    <img src=\"/static-remote/files/508325a00983fcae1b98e71d-matrixflipcomapiwpcontentuploadsafcaebedjpg.jpg\" alt=\"\" /></p>\n</p>\n<p>    注意看数据库连接的模块：</p>\n<pre class=\"codePre brush: js;\">php -m</pre>\n<h4>    5.新建WordPress数据库需要的表，测试是否能连接</h4>\n</p>\n<p>    进入 MySQL 脚本（shell，注意要写分号），输入刚才创建的密码</p>\n<pre class=\"codePre brush: js;\">mysql -u root -p</pre>\n<p>具体的命令如下(注意把名称和密码换成你自己的)：</p>\n<pre class=\"codePre brush: js;\">数据库名：wpdbname \n用户名: membername \n密码：password!!here\n\n\n创建数据库wpdbname\n\nCREATE DATABASE wpdbname;\n\n查看数据库列表\nSHOW DATABASES;\n\n查看版本状态\nSTATUS;\n\n针对MySQL 5.7 or MySQL 8的命令，mysql_native_password是插件名，不要去修改它\n#目前使用此命令\n\nCREATE USER 'membername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password!!here';\n\n针对MySQL 5.1, MySQL 5.5, MySQL 5.6的命令（参考）：\n\nCREATE USER 'membername'@'localhost' IDENTIFIED BY 'password!!here';\n\n\n授予此用户 membername 访问您的 wpdbname 数据库的权限\n#目前使用此命令\n\nGRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, DROP, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON wpdbname.* TO 'membername'@'localhost';\n\n或者\n\nGRANT ALL ON wpdbname.* TO membername@localhost;\n\n\n（可选）授予此用户 membername FILE 全局权限：（如果启用，由于 LOAD DATA INFILE 功能，报告将被更快地存档）\n\nGRANT FILE ON *.* TO 'membername'@'localhost';\n\n继续刷新权限\n\nFLUSH PRIVILEGES;\n\n退出mysql命令\n\nQUIT;\n</pre>\n</p>\n<p>    重启mysql</p>\n</p>\n<pre class=\"codePre brush: js;\">sudo systemctl restart mysqld</pre>\n</p>\n<p>    测试数据库连接：</p>\n</p>\n<pre class=\"codePre brush: js;\">vi /usr/share/nginx/html/data.php</pre>\n</p>\n<p>    代码为(使用mysqli链接)：</p>\n</p>\n<pre class=\"codePre brush: js;\">&lt;?php\n  \n    // echo &quot;Welcome to Connecting of DB Tutorial!&quot;;\n    // echo &quot;\n&quot;;\n\n    // 1. PDO - Php Data Objects\n    // 2. MySQLi extension\n\n    // Set Connection Variable\n    $server = &quot;localhost&quot;;\n    $username = &quot;membername&quot;;\n    $password = &quot;password!!here&quot;;\n    $database = &quot;dbname&quot;;\n\n    // Create A Connection\n    $con = mysqli_connect($server, $username, $password, $database);\n\n     // Check For Connection\n     if(!$con){\n        die (&quot;Connection Terminated! by Die() function&quot;. mysqLi_connect_error());\n       \n    }\n    else {\n        echo &quot;Connection Succefully Happened! \n&quot;;\n    }</pre>\n</p>\n<p>    代码为(使用PDO模块链接数据库)：</p>\n</p>\n<pre class=\"codePre brush: js;\">&lt;?php\n$servername = &quot;localhost&quot;;\n$username = &quot;membername&quot;;\n$password = &quot;password!!here&quot;;\n$database = &quot;dbname&quot;;\n\ntry {\n    $conn = new PDO(&quot;mysql:host=$servername;dbname=$database&quot;, $username, $password);\n    // set the PDO error mode to exception\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    echo &quot;Connected successfully&quot;;\n    }\ncatch(PDOException $e)\n    {\n    echo &quot;Connection failed: &quot; . $e-&gt;getMessage();\n    }</pre>\n</p>\n<p>    <img src=\"/static-remote/files/06fd1f414820c03a2ece7b46-matrixflipcomapiwpcontentuploadsfdfcaecebjpg.jpg\" alt=\"\" /></p>\n<p>测试成功以后删除它</p>\n<pre class=\"codePre brush: js;\">rm -rf /usr/share/nginx/html/data.php</pre>\n</p>\n<p>    备份SQL,输入root密码</p>\n<pre class=\"codePre brush: js;\">mysqldump -u root -p mydatabasename &gt; /usr/share/nginx/html/wordpress/data-dump-2022-XXX.sql</pre>\n</p>\n<h4>    6.安装WordPress</h4>\n<p>    <span style=\"color:#ff0000;\">注意：5.8以上版本推荐PHP7.4</span></p>\n<div>\n<pre class=\"codePre brush: js;\">如果已经存在/usr/share/nginx/html/wordpress/文件夹，要安装根目录的WordPress\ncd /usr/share/nginx/html/wordpress\n\n下载并解压：\nwget https://wordpress.org/wordpress-5.8.2.tar.gz\n\n解压：\ntar -zxvf wordpress-5.8.2.tar.gz\n\n删除文件(删除文件夹是rm -rf  xxx)\nrm -rf wordpress-5.8.2.tar.gz\n\n将/usr/share/nginx/html/wordpress/wordpress/里的所有文件和文件夹\n复制到/usr/share/nginx/html/wordpress/里\ncp -r /usr/share/nginx/html/wordpress/wordpress/* /usr/share/nginx/html/wordpress/\n\n删除原文件夹\nrm -rf /usr/share/nginx/html/wordpress/wordpress/</pre>\n<p></div>\n<div>\n<p>        切换到 Nginx 根目录    </p>\n<pre class=\"codePre brush: js;\">cd /usr/share/nginx/html</pre>\n<p>        下载并解压：    </p>\n<pre class=\"codePre brush: js;\">wget https://wordpress.org/wordpress-5.8.2.tar.gz</pre>\n<p>        解压：    </p>\n<pre class=\"codePre brush: js;\">tar -zxvf wordpress-5.8.2.tar.gz</pre>\n<p>    </p>\n<p>        删除文件(删除文件夹是rm -rf  xxx)    </p>\n<pre class=\"codePre brush: js;\">rm -rf wordpress-5.8.2.tar.gz</pre>\n<p>        解压后设置权限（每次安装新的WordPress或者上传新的文件夹时都要执行）    </p>\n<pre class=\"codePre brush: js;\">find /usr/share/nginx/html/wordpress -type d -exec chmod 755 {} \\; #所有【目录】更新八进制权限\nfind /usr/share/nginx/html/wordpress -type f -exec chmod 644 {} \\; #所有【文件】更新八进制权限</pre>\n<p>    </p>\n<p>        确保您的文档根目录和所有内容都归myftp1和 www-data 所有    </p>\n<p>        ①支持FTP上传文件 <br />            ②wordpress能选择语言/写入文件/创建config.php/在线删除、安装主题插件    </p>\n<pre class=\"codePre brush: js;\">sudo chown -R myftp1:www-data /usr/share/nginx/html/wordpress</pre>\n<p>        设置完权限后FTP工具显示如：    </p>\n<p>        <img src=\"/static-remote/files/d42d03b553205eb11cf6a395-matrixflipcomapiwpcontentuploadsddbebcfajpg.jpg\" alt=\"\" />    </p>\n</p>\n<p>        打开临时安全通道，可以让其写入，否则就算设置了写入权限和分组也无法执行    </p>\n<pre class=\"codePre brush: js;\">sudo setenforce 0</pre>\n<p>    </p>\n<p>        然后就可以看到选择语言界面    </p>\n<p>        【注意：必须是选择语言的界面，才算成功】    </p>\n</div>\n<div>    <img src=\"/static-remote/files/22a82e12628aa3469afabb97-matrixflipcomapiwpcontentuploadsaeaaafabbjpg.jpg\" alt=\"\" /></div>\n<div>\n<p>        安装主题，插件，缓存插件配置后再运行：    </p>\n<p>        关闭临时安全通道，无法在线安装主题插件，无法写入    </p>\n<pre class=\"codePre brush: js;\">sudo setenforce 1</pre>\n</div>\n<h4>    7.Nginx 基础配置和基本安全配置</h4>\n<div>\n<p>        接下来对于我们的 WordPress LEMP CentOS 8 安装，我们将继续进行 Nginx 和 wpconfig.php 设置，包括一些安全检查。 此配置不适用于            SSL，文档后面会讲述配置SSL。如果您发现自己面临各种与 SSL 相关的错误，Really Simple SSL 插件可能是一个非常有用的工具。    </p>\n<p>        从您的主 nginx.conf 中排除 XML-RPC 支持，因为它是常见的 DOS 攻击位置。    </p>\n<p>        先备份一个原配置：    </p>\n</p>\n<pre class=\"codePre brush: js;\">cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak</pre>\n</p>\n<p>        先添加一个错误日志到核心配置中    </p>\n<pre class=\"codePre brush: js;\">vi  /etc/nginx/nginx.conf</pre>\n<p>        默认配置的代码（增加了一行错误日志配置，注释了server{}默认配置，其它未改动，做初始参考）：    </p>\n<pre class=\"codePre brush: js;\"># For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\n# user nginx;\nuser myftp1;\n\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '\n                      '$status $body_bytes_sent &quot;$http_referer&quot; '\n                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';\n\n    access_log  /var/log/nginx/access.log  main;\n    error_log  /var/log/nginx/error.log  warn;  #这是增加的代码\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n\n    # 这里是注释掉的 server {...} 部分的代码\n    # server {\n    #     listen       80 default_server;\n    #     listen       [::]:80 default_server;\n    #     server_name  _;\n    #     root         /usr/share/nginx/html;\n\n    #     # Load configuration files for the default server block.\n    #     include /etc/nginx/default.d/*.conf;\n\n    #     location / {\n    #     }\n\n    #     error_page 404 /404.html;\n    #         location = /40x.html {\n    #     }\n\n    #     error_page 500 502 503 504 /50x.html;\n    #         location = /50x.html {\n    #     }\n    # }\n    \n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;\n#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers PROFILE=SYSTEM;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n\n}</pre>\n<p>        <span style=\"color:#ff0000;\">重要提示：请注释掉 /etc/nginx/nginx.conf 文件中的server{}80端口部分代码，使用独立的配置文件去管理，避免混淆。    </span></p>\n<p>        <span style=\"color: rgb(255, 0, 0); \">新建文件/etc/nginx/conf.d/default.conf(它将默认替代原配置文件-如果存在, 核心服务配置文件/etc/nginx/nginx.conf内的server {...}内容就无效化，包括原来默认存在的80端口代码)    </span></p>\n<p>        server_name( 请不要写多个) 进行调整，这样就可以把wordpress目录镜像到根目录    </p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p>    代码如下：</p></div>\n<div>\n<pre class=\"codePre brush: js;\">server {\n    listen 80;\n    server_name &quot;~^www\\.(.*)$&quot; ;\n    return 301 $scheme://$1$request_uri ;\n}\n\nserver {\n    listen 80;\n    server_name yoursite.com;\n    # note that these lines are originally from the &quot;location /&quot; block\n    root /usr/share/nginx/html/wordpress;\n    index index.php index.html index.htm;\n\n    # MIME sniffing prevention\n    add_header X-Content-Type-Options &quot;nosniff&quot;;\n\n    # Enable cross-site scripting filter in supported browsers.\n    add_header X-Xss-Protection &quot;1; mode=block&quot;;\n\n    # Fix WordPress upload error\n    client_max_body_size 100M;\n\n\n    # robots support\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Github source\n    location ~* \\/poemkit($|/$) {\n        return 301 https://yoursite.com:3000/index;\n    }\n\n     # PHP support\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_intercept_errors on;\n        fastcgi_index  index.php;\n        include        fastcgi_params;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        fastcgi_pass   php-fpm;\n    }\n\n   # -------------------------------------- \n   location / {\n        try_files $uri $uri/ =404;\n\n        #503\n        if (-f /usr/share/nginx/html/maintenance.html) {\n            return 503;\n        }\n    }\n\n    #debug status\n    # location / {\n    #     try_files $uri $uri/ /maintenance.html;\n    # }\n\n\n\n    #502\n    error_page 502 =503 /50x.html;\n\n\n    #other page status(Original configuration modification)\n    error_page 404 /404.html;\n    error_page 500 502 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n\n    error_page 503 /maintenance.html;\n    location = /maintenance.html {\n        root /usr/share/nginx/html/wordpress;\n    }\n\n    # --------------------------------------\n\n}\n</pre>\n<p></div>\n<div>\n<blockquote><p>        location ~ \\.php$ { ... } 是上面通过 <strong>cat /etc/nginx/default.d/php.conf</strong> 命令获取的代码<br />        如果/usr/share/nginx/html/wordpress目录中存在404.html页面，网站会渲染自定义404    </p></blockquote>\n<p></div>\n<div>\n<blockquote>\n<p><span style=\"background-color: rgb(255, 255, 0);\"><strong>下面的代码都是可选的，根据情况添加(目前都未添加)</strong></span></p>\n</p>\n<p>图片防盗链：</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\">#Prevent image hotlinking / stealing from your site with nginx\nlocation ~* \\.(gif|png|jpe?g)$ {\n    valid_referers none blocked yoursite.com *.yoursite.com;\n    if ($invalid_referer) {\n        rewrite (.*) /path/to/image/hotlinking-denied.jpg redirect;\n    }\n}</pre>\n<p>测试防盗链的重写效果，修改valid_referers属性，然后直接使用浏览器输出图片地址，即可被重写跳转。</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\">#Prevent image hotlinking / stealing from your site with nginx\nlocation ~* \\.(gif|png|jpe?g)$ {\n    valid_referers yoursite.com *.yoursite.com;\n    if ($invalid_referer) {\n        rewrite (.*) /path/to/image/hotlinking-denied.jpg redirect;\n    }\n}</pre>\n<p>禁止访问某些文件：</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\"># Prevent access to hidden files\nlocation ~* /\\.(?!well-known\\/) {\n        deny all;\n}\n\n\n# Prevent access to certain file extensions\nlocation ~\\.(ini|log|conf)$ {\n        deny all;\n}\n</pre>\n<p>缓存静态文件【注意：此缓存是储存在客户端(浏览器)上的配置，不是直接从服务端读取】</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\">#all content in static and media folders will be cached by browsers during 30 days\nlocation ~* \\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip|glb|obj|usdz|gltf)$ {\n    expires 30d;\n    add_header Pragma public;\n    add_header Cache-Control &quot;public&quot;;\n}\n</pre>\n<p>静态文件的重写，rewrite写在 location XXX{} 外面也会生效。当我访问https://xxxxx/abc/navs的时候，实际访问的是 https:/xxxxx/abc/navs.html</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\"># For HTML Files \nlocation /abc {\n    rewrite ^/abc/(.*)$ /abc/$1.html break;\n}</pre>\n<p>某些网址的指定跳转，比如 /abc 跳转到/abc/index</p>\n</p>\n<pre class=\"codePre brush: js;\" style=\"line-height: 1.42857;\"># Github source\nlocation ~* \\/abc$ {\n    return 301 /abc/index;\n}</pre>\n<div></div>\n</blockquote>\n</div>\n<div>\n<p>        测试配置文件是否正常    </p>\n<pre class=\"codePre brush: js;\">nginx -t</pre>\n<p>        确保 Nginx 和 PHP-FPM 接受更改    </p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx php-fpm</pre>\n<p>        检测www是否直接301跳转到没有non-www的域名    </p>\n<pre class=\"codePre brush: js;\">curl -I http://www.xxxxxx.com</pre>\n<p>    <img src=\"/static-remote/files/8858dc56623bcb8f944052a6-matrixflipcomapiwpcontentuploadsdcbcbfajpg.jpg\" alt=\"\" /></div>\n<p>    <strong>正确运行WordPress！！</strong></p>\n<blockquote>\n<p>        <span style=\"color:#ff0000;\">由于SELinux模式保留权限问题，WordPress不能访问远程的api，需要设置防火墙，才能允许远程安装插件和主题<br />            【强烈建议不要禁用 SELinux，而是将模式更改为 permissive。 仅在应用程序正常运行需要时禁用 SELinux】    </span></p>\n</p>\n<p>        查看错误日志    </p>\n<pre class=\"codePre brush: js;\">sudo cat /var/log/audit/audit.log | grep nginx | grep denied</pre>\n<p>        下面的代码测试是否可以远程连接：    </p>\n<pre class=\"codePre brush: js;\">curl http://api.wordpress.org -I</pre>\n<p>    <img src=\"/static-remote/files/2e7dfd5a7d54c30b6157bc54-matrixflipcomapiwpcontentuploadsedfdadcbbcjpg.jpg\" alt=\"\" />    </p>\n<p>        查看SELinux Mode状态    </p>\n<pre class=\"codePre brush: js;\">sestatus</pre>\n<p>    <img src=\"/static-remote/files/ae971884783223fb0611fc0b-matrixflipcomapiwpcontentuploadsaefbfcbjpg.jpg\" alt=\"\" />    </p>\n<p>        将 SELinux 模式更改为Permissive启用后，SELinux 可以处于强制或许可模式。 您可以使用以下命令暂时将模式从有针对性更改为宽松模式：    </p>\n<p>        <strong>下面的代码是临时关闭SELinux安全策略</strong>【建议使用，不要永久改变，它可能保护流量的非法攻击，也可以保护网站被黑的风险】    </p>\n<pre class=\"codePre brush: js;\">sudo setenforce 0</pre>\n<p>    </p>\n<p>        使用后重新开启    </p>\n<pre class=\"codePre brush: js;\">sudo setenforce 0</pre>\n<p>    </p>\n<p>        注意：下面的代码开启后也会运行远程连接（但它不会控制文件读写）。在布尔值关闭的情况下，PHP 代码无法与远程网站通信（就像 curl_ 函数被禁用一样）。    </p>\n<pre class=\"codePre brush: js;\">sudo setsebool -P httpd_can_network_connect 1</pre>\n<hr />\n<p>        <strong>永久更改：</strong>    </p>\n<p>        但是，此更改仅对当前运行时会话有效，并且不会在重新启动之间持续存在。要将 SELinux 模式永久设置为 permissive，请按照以下步骤操作：    </p>\n<p>        打开 /etc/selinux/config 文件并将 <span style=\"color:#ff0000;\">SELINUX mod</span> 设置为 <span style=\"color:#ff0000;\">permissive</span>:  </p>\n<pre class=\"codePre brush: js;\">vi /etc/selinux/config</pre>\n<p>        把 <span style=\"color:#ff0000;\">SELINUX=enforcing</span> 改为         <span style=\"color:#ff0000;\">SELINUX=permissive</span>    </p>\n<p>        保存文件并运行 setenforce 0 命令来更改当前会话的 SELinux 模式，关机重启：    </p>\n<pre class=\"codePre brush: js;\">sudo shutdown -r now</pre>\n</blockquote>\n<h4>    8. WordPress命令配置（参考，不使用）</h4>\n<div>\n<p>        进入wordpress目录    </p>\n<pre class=\"codePre brush: js;\">cd /usr/share/nginx/html/wordpress</pre>\n<p>        将 wp-config-sample.php 文件复制到 wp-config.php。    </p>\n<pre class=\"codePre brush: js;\">sudo cp wp-config-sample.php wp-config.php</pre>\n<p>        将 wp-config.php 的所有权更改为 Nginx            </p>\n<pre class=\"codePre brush: js;\">chown nginx.nginx wp-config.php</pre>\n<p>        生成安全密钥    </p>\n<pre class=\"codePre brush: js;\">curl -s https://api.wordpress.org/secret-key/1.1/salt/</pre>\n<p>        如下获取匹配的输出并替换您的 wp-config.php 中的相应行文件,打开您的 wp-config.php 并修改以匹配我们配置时使用的凭据MariaDB 服务。    </p>\n</p>\n<pre class=\"codePre brush: js;\">vi wp-config.php</pre>\n</p>\n<p>        将wp-config.php的内容替换为下面的部分：    </p>\n<pre class=\"codePre brush: js;\">define('DB_NAME', 'dbname');\ndefine('DB_USER', 'membername');\ndefine('DB_PASSWORD', 'password!!here');</pre>\n<p>        重新启动 PHP-FPM 和 Nginx 服务以获取最近的更改    </p>\n<pre class=\"codePre brush: js;\">systemctl restart php-fpm nginx</pre>\n</div>\n<h4>9. 安装SFTP</h4>\n<div>\n<p>运行yum命令安装</p>\n<pre class=\"codePre brush: js;\">yum install -y vsftpd\nsystemctl enable vsftpd\nsystemctl start vsftpd</pre>\n<p>状态检查</p>\n<pre class=\"codePre brush: js;\">systemctl status vsftpd</pre>\n<p>生成用于加密连接的 SSL 证书，输入一个CN即可，其它留空生成</p>\n<pre class=\"codePre brush: js;\">openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/vsftpd/vsftpd.pem -out /etc/vsftpd/vsftpd.pem</pre>\n<p>修改配置文件：</p>\n<pre class=\"codePre brush: js;\">vi /etc/vsftpd/vsftpd.conf</pre>\n<p>确保以下设置，它们应该是默认值</p>\n<pre class=\"codePre brush: js;\">anonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES</pre>\n<p>以下条目将需要手动添加</p>\n<pre class=\"codePre brush: js;\">rsa_cert_file=/etc/vsftpd/vsftpd.pem\nrsa_private_key_file=/etc/vsftpd/vsftpd.pem\nssl_enable=YES</pre>\n<p>重启sftp</p>\n<pre class=\"codePre brush: js;\">systemctl restart vsftpd</pre>\n<p>防火墙需要打开端口</p>\n<pre class=\"codePre brush: js;\">firewall-cmd --permanent –add-port=20-21/tcp\nfirewall-cmd –reload</pre>\n<blockquote><p><strong></strong></p>\n<div>\n<p><strong>设置 SFTP 用户和权限</strong></p>\n</div>\n<div>\n<pre class=\"codePre brush: js;\">创建新的 FTP 用户，其中 /usr/share/nginx/ 是用户的主文件夹\nuseradd -d /usr/share/nginx/ myftp1\n\n设置密码\npasswd myftp1\n\n创建 www-data 组\ngroupadd www-data\n\n将 myftp1 用户添加到 www-data 组\nusermod -aG www-data myftp1</pre>\n</div>\n</blockquote>\n</div>\n<p>打开 核心nginx.conf 并更新 Nginx 用户</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/nginx.conf</pre>\n<p><span style=\"background-color: rgb(255, 255, 0);\">user myftp1;</span></p>\n<p></p>\n<p>测试 Nginx 配置，您可以在设置权限之前避免重新加载</p>\n<pre class=\"codePre brush: js;\">nginx -t</pre>\n<p>打开 www.conf 并更新 PHP-FPM 用户</p>\n<pre class=\"codePre brush: js;\">vi /etc/php-fpm.d/www.conf</pre>\n<p>代码如下（注意最后一行）：</p>\n<pre class=\"codePre brush: js;\">user = myftp1\ngroup = www-data \nlisten.owner = myftp1\nlisten.group = www-data\nlisten.acl_users = apache,nginx,myftp1</pre>\n<p>测试文件</p>\n<pre class=\"codePre brush: js;\">php-fpm -t</pre>\n<p>使用新用户和组设置所有权</p>\n<pre class=\"codePre brush: js;\">chown -R myftp1:www-data /usr/share/nginx/html</pre>\n<p>更新 /var/lib/nginx 的所有权</p>\n<pre class=\"codePre brush: js;\">chown -R myftp1:www-data /var/lib/nginx</pre>\n<p>确保日志权限到位</p>\n<pre class=\"codePre brush: js;\">chown -R myftp1:www-data /var/log/nginx</pre>\n<p>确认权限和配置通过测试后，继续重启 Nginx 和 PHP-FPM</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx\nsystemctl restart php-fpm</pre>\n<p><strong>注意；连接的时候端口使用22，默认远程路径是/html</strong></p>\n<div><img src=\"/static-remote/files/58ed0d3f5279aa726444ca1b-matrixflipcomapiwpcontentuploadseddfaacabjpg.jpg\" alt=\"\" /></div>\n<h4>10. 配置HTTPS</h4>\n<div>\n<p><strong>Step 1：使用 dnf 命令安装 mod_ssl 模块：</strong></p>\n<pre class=\"codePre brush: js;\">dnf install mod_ssl</pre>\n<p><strong>Step 2：首先在服务器上生成一个csr文件</strong></p>\n<p>如果您选择使用商业上受信任的证书，则可以通过运行以下命令来生成 CSR。 相应地替换密钥和 CSR 的名称。<br />这里命名为：ca.key</p>\n</p>\n<pre class=\"codePre brush: js;\">openssl req -new -newkey rsa:4096 -nodes -keyout ca.key -out ca.csr</pre>\n</p>\n<p>一次输入自己的证书信息，如下：</p>\n</div>\n<div><img src=\"/static-remote/files/ab1437d9860c9a0dc951beff-matrixflipcomapiwpcontentuploadsabdcadcbeffjpg.jpg\" alt=\"\" /></div>\n<div>\n<p>生成后，将 CSR 内容提交给签名证书颁发机构。上面的命令会生成私钥和 CSR。 确保私钥安全，因为稍后安装证书时需要。接下去我们查看内容</p>\n<p><strong>Step 3：查看csr文件的内容</strong>(此内容也用于网站申请发放证书和签名，验证等)</p>\n<div>\n<pre class=\"codePre brush: js;\">cat ca.csr</pre>\n<p>内容如下：</p></div>\n<p></p>\n<pre class=\"codePre brush: js;\">-----BEGIN CERTIFICATE REQUEST-----\n…....\n-----END CERTIFICATE REQUEST-----</pre>\n</div>\n<p>将ca.csr的内容填入到证书商家的表单生成：</p>\n<div><img src=\"/static-remote/files/be53e47b268e62b743eac37b-matrixflipcomapiwpcontentuploadsbeebebeacbjpg.jpg\" alt=\"\" /> <img src=\"/static-remote/files/7f2ead6f367f0d99380dda98-matrixflipcomapiwpcontentuploadsfeadffdddajpg.jpg\" alt=\"\" /></div>\n<div>\n<p><strong>Step 4：FTP上传颁发的3个证书文件到根目录</strong></p>\n<p>上传到nginx目录/usr/share/nginx/html/中【如果更新证书，必须修改原来的3个证书文件】</p>\n<p>新建一个证书目录（因为权限问题，FTP无法直接上传到此）：</p>\n<pre class=\"codePre brush: js;\">mkdir /usr/share/nginx/ssl</pre>\n<p></p>\n<p>FTP上传后拷贝3个证书文件到所需要的目录</p>\n</p>\n<pre class=\"codePre brush: js;\">sudo cp /usr/share/nginx/html/yoursite.com.crt /usr/share/nginx/ssl/\nsudo cp /usr/share/nginx/html/yoursite.com.ca-bundle /usr/share/nginx/ssl/\nsudo cp /usr/share/nginx/html/yoursite.com.p7b /usr/share/nginx/ssl/</pre>\n</p>\n<p>拷贝后删除：</p>\n<pre class=\"codePre brush: js;\">rm -rf /usr/share/nginx/html/yoursite.com.crt\nrm -rf /usr/share/nginx/html/yoursite.com.ca-bundle\nrm -rf /usr/share/nginx/html/yoursite.com.p7b</pre>\n<p><img src=\"/static-remote/files/2c52ab9c1b951e71119ed32d-matrixflipcomapiwpcontentuploadscabcbeeddjpg.jpg\" alt=\"\" /></div>\n<div>\n<p>查看私钥ca.key的内容</p>\n</p>\n<pre class=\"codePre brush: js;\">cat ca.key </pre>\n</p>\n<p>内容如下：</p>\n</p>\n<pre class=\"codePre brush: js;\">-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----</pre>\n</p>\n<p>将ca.key的内容，重新创建成一个文件，供nginx配置文件使用</p>\n<pre class=\"codePre brush: js;\">vi /usr/share/nginx/ssl/ca.key</pre>\n<p><strong>Step 5：创建bundle.crt最终证书文件</strong></p>\n<p>nginx中没有证书链的选项，只需连接域的证书文件和 CA 的链文件,用编辑吧yoursite.com.crt和yoursite.com.ca-bundle文件的内容拼接在一起即可，注意顺序要正确。</p>\n</p>\n<pre class=\"codePre brush: js;\">vi /usr/share/nginx/ssl/bundle.crt</pre>\n</p>\n<p>内容为拼接后的内容</p>\n<p></p>\n<p><strong>Step 6：修改nginx配置文件,新增443端口的代码(将www跳转到non-www)：</strong></p>\n</div>\n<div><img src=\"/static-remote/files/e4ee8d6c45a8ae186d1a78b8-matrixflipcomapiwpcontentuploadseeedcaaedabjpg.jpg\" alt=\"\" /></div>\n<div>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p>内容如下：</p>\n<pre class=\"codePre brush: js;\">server {\n    listen 443 ssl http2;\n    server_name &quot;~^www\\.(.*)$&quot; ;\n    return 301 $scheme://$1$request_uri;\n\n    ssl on;\n    ssl_certificate /usr/share/nginx/ssl/bundle.crt;\n    ssl_certificate_key /usr/share/nginx/ssl/ca.key;\n    ssl_session_cache shared:SSL:20m;\n    ssl_session_timeout 60m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n    ssl_buffer_size 8k;\n    ssl_session_tickets off;\n\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 10s;\n\n\n}\n\n\nserver {\n    listen  443 ssl http2;\n    server_name  yoursite.com;\n\n    ssl on;\n    ssl_certificate /usr/share/nginx/ssl/bundle.crt;\n    ssl_certificate_key /usr/share/nginx/ssl/ca.key;\n    ssl_session_cache shared:SSL:20m;\n    ssl_session_timeout 60m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n    ssl_buffer_size 8k;\n    ssl_session_tickets off;\n\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 10s;\n    \n}</pre>\n<p></div>\n<div>\n<p>检查</p>\n<pre class=\"codePre brush: js;\">nginx -t</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx</pre>\n<p>最后测试一下证书的级别</p>\n<pre class=\"codePre brush: js;\">http://stool.chinaz.com/https?url=yoursite.com</pre>\n</div>\n<div><img src=\"/static-remote/files/d287a0f3552374d254e54332-matrixflipcomapiwpcontentuploadsdafdejpg.jpg\" alt=\"\" /></div>\n<h4>11. 修改Nginx配置，将http跳转到https</h4>\n<p>修改配置文件</p>\n<div>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p>在侦听80端口(非www跳转)的地方增加一行即可：</p>\n<pre class=\"codePre brush: js;\">return 301 https://$host$request_uri;</pre>\n<p><img src=\"/static-remote/files/c31ca7d4ba2ab7077a352157-matrixflipcomapiwpcontentuploadsccadbaabajpg.jpg\" alt=\"\" /></p>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx</pre>\n<h4>12.Nginx配置https支持PHP和常用功能，重装配置WordPress</h4>\n</div>\n<div>\n<p>修改Nginx配置，让https支持php等常用配置，代码如下，修改443端口(非www部分)</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n</div>\n<p>代码如下：</p>\n<div>\n<pre class=\"codePre brush: js;\">server {\n    listen  443 ssl http2;\n    server_name  yoursite.com;\n\n    ssl on;\n    ssl_certificate /usr/share/nginx/ssl/bundle.crt;\n    ssl_certificate_key /usr/share/nginx/ssl/ca.key;\n    ssl_session_cache shared:SSL:20m;\n    ssl_session_timeout 60m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n    ssl_buffer_size 8k;\n    ssl_session_tickets off;\n\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 10s;\n\n\n\n    # note that these lines are originally from the &quot;location /&quot; block\n    root /usr/share/nginx/html/wordpress;\n    index index.php index.html index.htm;\n\n    # MIME sniffing prevention\n    add_header X-Content-Type-Options &quot;nosniff&quot;;\n\n    # Enable cross-site scripting filter in supported browsers.\n    add_header X-Xss-Protection &quot;1; mode=block&quot;;\n\n    # Fix WordPress upload error\n    client_max_body_size 100M;\n\n    # robots support\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Github source\n    location ~* \\/poemkit($|/$) {\n        return 301 https://yoursite.com:3000/index;\n    }\n\n    # PHP support\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_intercept_errors on;\n        fastcgi_index  index.php;\n        include        fastcgi_params;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        fastcgi_pass   php-fpm;\n\n    }\n\n     # -------------------------------------- \n   location / {\n        try_files $uri $uri/ =404;\n\n        #503\n        if (-f /usr/share/nginx/html/maintenance.html) {\n            return 503;\n        }\n    }\n\n    #debug status\n    # location / {\n    #     try_files $uri $uri/ /maintenance.html;\n    # }\n\n\n    #502\n    error_page 502 =503 /50x.html;\n\n\n    #other page status(Original configuration modification)\n    error_page 404 /404.html;\n    error_page 500 502 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n\n    error_page 503 /maintenance.html;\n    location = /maintenance.html {\n        root /usr/share/nginx/html/wordpress;\n    }\n\n    # --------------------------------------\n    \n}</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx</pre>\n<p>删除WordPress旧的文件夹（看接下去的步骤增加一个维护页面临时使用）</p>\n<pre class=\"codePre brush: js;\">rm -rf /usr/share/nginx/html/wordpress</pre>\n<p></p>\n<blockquote>\n<p><strong>重新安装和配置WordPress（参看安装步骤），根据需要修改名称</strong></p>\n<p>（如果上传到根目录则不需要改名，因设置了  Nginx的root目录/usr/share/nginx/html/wordpress/）</p>\n<pre class=\"codePre brush: js;\">cd /usr/share/nginx/html/wordpress/{NEW_FOLDER_NAME}</pre>\n<p>这时候安装后需要改名</p>\n<pre class=\"codePre brush: js;\">mv /usr/share/nginx/html/wordpress /usr/share/nginx/html/wordpress/{NEW_FOLDER_NAME}</pre>\n</blockquote>\n</div>\n<div></div>\n<div>\n<p>修改Nginx配置443端口(非www部分)</p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p></p>\n<blockquote>\n<div>\n<p><strong>WP 配置（1）</strong></p>\n<p>由于nginx不支持.htaccess文件重写，当使用了Permalink功能重写网址的功能后，需要配置nginx来适配你的重写功能。如果您在 /blog 等子目录（即/usr/share/nginx/html/wordpress/blog） URL 下运行您的博客，如：</p>\n<pre class=\"codePre brush: js;\"># -------------------------------------- For WordPress Settings begin\n# WordPress Permalink\nlocation /blog {\n    index index.php index.html index.htm;\n    try_files $uri $uri/ /blog/index.php?$args;\n\n    #503\n    if (-f /usr/share/nginx/html/maintenance.html) {\n        return 503;\n    }\n}\n# -------------------------------------- For WordPress Settings end\n</pre>\n<p>如果是默认的网站根目录，就写成注意：如果有重复的location / { ... }代码段，请删除它</p>\n<pre class=\"codePre brush: js;\"># -------------------------------------- For WordPress Settings begin\n# WordPress Permalink\nlocation / {\n    index index.php index.html index.htm;\n    try_files $uri $uri/ /index.php?$args;\n\n    #503\n    if (-f /usr/share/nginx/html/maintenance.html) {\n        return 503;\n    }\n}\n# -------------------------------------- For WordPress Settings end\n</pre>\n<p><strong>WP 配置（2）</strong></p>\n<p>WordPress EDD插件需要的配置保护：</p>\n<pre class=\"codePre brush: js;\"># -------------------------------------- For WordPress  Plugin-EDD Settings begin\n# To protect your EDD files while using EDD\nlocation ~* \\/wp-content\\/uploads\\/edd\\/(.*?)\\.(gz|zip|tar|rar)$ {\n    rewrite (.*) / permanent;\n}\n# -------------------------------------- For WordPress  Plugin-EDD Settings end\n</pre>\n<p><strong>WP 配置（3）</strong></p>\n<p>WordPress安全保护：</p>\n<pre class=\"codePre brush: js;\"># -------------------------------------- For WordPress Security begin\n# DDos prevent\nlocation = /xmlrpc.php {\n    deny all;\n    access_log off;\n    log_not_found off;\n    return 444;\n}\nlocation = /blog/xmlrpc.php {\n    deny all;\n    access_log off;\n    log_not_found off;\n    return 444;\n}\n# -------------------------------------- For WordPress  Security  end\n</pre>\n<p><strong>WP 配置（4）（可选 ，不需要使用）</strong></p>\n<p>WordPress网站地图重写（如果已经增加了WordPress Permalink配置，就不用增加）：last标记告诉 NGINX 跳过当前服务器或位置块中的任何后续 Rewrite-module 指令，并开始搜索与重写的 URL 匹配的新位置。</p>\n<pre class=\"codePre brush: js;\"># -------------------------------------- For WordPress  Sitemap  begin\nrewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\\.xml$ &quot;/index.php?xml_sitemap=params=$2&quot; last;\nrewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\\.xml\\.gz$ &quot;/index.php?xml_sitemap=params=$2;zip=true&quot; last;\nrewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\\.html$ &quot;/index.php?xml_sitemap=params=$2;html=true&quot; last;\nrewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\\.html.gz$ &quot;/index.php?xml_sitemap=params=$2;html=true;zip=true&quot; last;\n# -------------------------------------- For WordPress  Sitemap begin</pre>\n</div>\n</blockquote>\n<p><span>重启</span></p>\n</div>\n<div>\n<pre class=\"codePre brush: js;\">systemctl restart nginx</pre>\n<p>即可看到目录/usr/share/nginx/html/wordpress/blog 内的wordpress系统的效果：</p>\n</div>\n<div><img src=\"/static-remote/files/f55058f79cded9364b5674c4-matrixflipcomapiwpcontentuploadsffcdedbcjpg.jpg\" alt=\"\" /></div>\n<div></div>\n<div></div>\n<div></div>\n<h3>    （六）增加Nginx维护页面，临时维护使用</h3>\n</p>\n<p>新建一个目录</p>\n<pre class=\"codePre brush: js;\">mkdir /usr/share/nginx/html/wordpress</pre>\n<p></p>\n<p>在Nginx根目录上传一个文文件用来识别维护状态（作为保留备用）</p>\n<pre class=\"codePre brush: js;\">vi /usr/share/nginx/html/maintenance.html</pre>\n<p></p>\n<p>不需要维护模式时记得改名：</p>\n<pre class=\"codePre brush: js;\">mv /usr/share/nginx/html/maintenance.html /usr/share/nginx/html/maintenance-no.html</pre>\n<p><span style=\"color:#f60;\">maintenance.html</span> 和 <span style=\"color:#f60;\">404.html</span> 的HTML代码请自己搞定)</p>\n<p>在/usr/share/nginx/html/wordpress/目录新建2个文件：maintenance.html和404.html</p>\n<pre class=\"codePre brush: js;\">vi /usr/share/nginx/html/wordpress/maintenance.html  \nvi /usr/share/nginx/html/wordpress/404.html   </pre>\n<p>设置权限（每次安装新的WordPress或者上传新的文件夹时都要执行）</p>\n<pre class=\"codePre brush: js;\">find /usr/share/nginx/html/wordpress -type d -exec chmod 755 {} \\; #所有【目录】更新八进制权限\nfind /usr/share/nginx/html/wordpress -type f -exec chmod 644 {} \\; #所有【文件】更新八进制权限</pre>\n<p>确保您的文档根目录和所有内容都归myftp1和 www-data 所有,</p>\n<p>①支持FTP上传文件 <br />②wordpress能选择语言/写入文件/创建config.php/在线删除、安装主题插件</p>\n<pre class=\"codePre brush: js;\">sudo chown -R myftp1:www-data /usr/share/nginx/html/wordpress</pre>\n</p>\n<blockquote>\n<p>        <strong>如果只是调试状态【当网站有正式内容时才使用】，并不是真正的全站维护返回503，按下面的步骤进行：</strong>    </p>\n<p>        （1）先改名    </p>\n<pre class=\"codePre brush: js;\">mv /usr/share/nginx/html/maintenance.html /usr/share/nginx/html/maintenance-no.html</pre>\n<p>        （2）再在Nginx配置中增加维护页面判断代码（在443端口非www的部分）：    </p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p>    修改方法：    </p>\n</p>\n<pre class=\"codePre brush: js;\">注释代码：\nlocation / {\n    try_files $uri $uri/ =404;\n\n    #503\n    if (-f /usr/share/nginx/html/maintenance.html) {\n        return 503;\n    }\n}\n\n执行代码(只强制跳转根目录的，子目录不会强制跳转)：\n#debug status\nlocation / {\n     try_files $uri $uri/ /maintenance.html;\n}</pre>\n</p>\n</blockquote>\n</p>\n<p>检查</p>\n<pre class=\"codePre brush: js;\">nginx -t</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart  nginx</pre>\n<p></p>\n<h3>    （七）完成 LEMP基础配置后，升级性能和安全性,其它配置</h3>\n<p>    下面这些配置是保证WordPress能够更好的运行</p>\n<blockquote><p>    <strong>1. Mariadb和Nginx服务断开后自动重启<br />    2. PHP配置修改<br />    3. 启用GZIP压缩<br />    4. 创建交换空间swap space<br />    5. 进一步优化Mariadb<br />    6. 静态文件缓存和PHP缓存<br />    7.  配置Redis缓存mysql数据<br />    8. 学会检查内存占用的程序</strong></p></blockquote>\n<p><strong>这一部分篇幅有有点分量，当您完成第(一)到(六)步骤后，服务器就可以使用了，此部分性能和安全提升的内容，我会在下一篇相关文章中进行归纳整理。</strong></p>\n<h3>    （八）Node环境配置（请完成此文档上面所有步骤后再继续）</h3>\n</p>\n<p><strong>Step1: Node环境</strong></p>\n<p>安装Node16+ (目前安装后版本为 16.13.1)</p>\n<pre class=\"codePre brush: js;\">curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -\nsudo yum install -y nodejs\nnode -v</pre>\n<p>全局安装pm2</p>\n<pre class=\"codePre brush: js;\">sudo npm install pm2@latest -g </pre>\n<p>全局安装babel</p>\n<pre class=\"codePre brush: js;\">sudo npm install -g babel-cli</pre>\n<p>全局安装最新babel</p>\n<pre class=\"codePre brush: js;\">sudo npm install -g @babel/core @babel/cli @babel/preset-env </pre>\n<p>全局安装ts-node</p>\n<pre class=\"codePre brush: js;\">sudo npm install -g ts-node</pre>\n<p></p>\n<p><strong>Step2: 防火墙设置</strong></p>\n<p>设置Node应用需要的防火墙（这里需要3000端口）：</p>\n<pre class=\"codePre brush: js;\">firewall-cmd --permanent --zone=public --add-port=3000/tcp\nfirewall-cmd --reload </pre>\n<blockquote>\n<p>    如果是同一个域名挂载反向代理，可能会被阻止访问，这时需要考虑远程连接的问题：</p>\n<p>    SELinux 提供了一个安全层，用于在 Linux 内核中实现强制访问控制 (MAC)。 每个操作系统对象（进程、文件描述符、文件等）都标有一个 SELinux 上下文，该上下文定义了对象可以执行的权限和操作。setsebool命令是用来修改SElinux策略内各项规则的布尔值。</p>\n<p>    Nginx 被标记为 httpd_t 上下文，因此，除非明确允许，否则有许多配置被 SELinux 阻止。 为了演示这一点，请运行以下命令以确认 Nginx 服务标记为 httpd_t：</p>\n<pre class=\"codePre brush: js;\">ps -eZ</pre>\n<p></p>\n<p>    该命令提供进程状态信息，搜索Nginx特定进程信息可以看到标签。 您将看到 httpd_t，类似于以下内容：</p>\n<pre class=\"codePre brush: js;\">...\nsystem_u:system_r:httpd_t:s0    10208 ?        00:00:00 nginx\nsystem_u:system_r:httpd_t:s0    10209 ?        00:00:00 nginx\n...\n</pre>\n<p></p>\n<p>    查看安全策略列表(按q退出)</p>\n<pre class=\"codePre brush: js;\">getsebool -a | less</pre>\n<p>    修改SELinux 中httpd对外访问的状态，httpd_can_network_connect默认是off的。请改为on，这样才能访问。<br />    注意：下面的代码开启后也会运行远程连接（但它不会控制文件读写）。在布尔值关闭的情况下，PHP 代码无法与远程网站通信（就像 curl_ 函数被禁用一样）。</p>\n<pre class=\"codePre brush: js;\">sudo setsebool -P httpd_can_network_connect 1</pre>\n</blockquote>\n<p><strong>Step3: 部署node应用测试端口</strong></p>\n<p>测试一下是不是成功用pm2挂载上了，使用IP能正常访问 https://yoursite.com:3000</p>\n<blockquote><p>部署express的https端口，需要再原来的服务器文件中增加以下代码：</p>\n<pre class=\"codePre brush: js;\">// Supprt https\nconst cert = fs.readFileSync('/usr/share/nginx/ssl/bundle.crt');\nconst key = fs.readFileSync('/usr/share/nginx/ssl/ca.key');\nimport https from 'https';\nconst server = https.createServer({key: key, cert: cert }, app);\n\n\n...\napp.get('/', (req, res) =&gt; { res.send('this is an secure server') });\n...\n\n\nserver.listen(port, () =&gt; console.log(`Frontend service listening on port: ${port}, access https://localhost:${port} in the web browser`));</pre>\n</blockquote>\n<p></p>\n<p>下面的代码可以查看使用端口的程序</p>\n<pre class=\"codePre brush: js;\">sudo netstat -pan | grep &quot;:3000&quot;</pre>\n<p></p>\n<p><strong>Step4: 反向代理配置(不同域名的时候才使用)</strong></p>\n<pre class=\"codePre brush: js;\">vi /etc/nginx/conf.d/default.conf</pre>\n<p>代码如下：</p>\n<pre class=\"codePre brush: js;\">    server {\n    listen      443 ssl;\n    server_name backend1.example.com;\n\n    ...\n    location / {\n        proxy_set_header Host $http_host;\n        proxy_pass http://{YOUR_IP}:3000;\n    }\n\n}</pre>\n</p>\n<p>检查</p>\n<pre class=\"codePre brush: js;\">nginx -t</pre>\n<p>重启</p>\n<pre class=\"codePre brush: js;\">systemctl restart nginx</pre>\n<p></p>\n<h3>结语</h3>\n<p>好咯，这漫长的一篇文章终于OK了，下一次我们会继续完成第七部分性能和安全的内容，如果文章对你有帮助，也可以继续关注我。希望看完它，你可以从零开始部署配置你自己的Linux服务器：）其他语言同理可以扩展到Nginx中，可以自由发挥。</p>\n","slug":"the-complete-guide-to-deploying-a-linux-server-from-scratch-version-2022-for-centos8-nginx-php","prev":[{"ID":883333,"title":"23种设计模式的完整例子和分类","excerpt":"设计模式是可复用面向对象软件的基础，也许不知不觉从工作的那时候开始，就已经隐约使用了一些设计模式，但是它们到底是什么呢？常用的设计模式大家并不陌生，搜索引擎也可以搜索到，现在详细回顾一下23种设计模式，如何使用JavaScript实现？","slug":"86f20bd39f03310b956c2dc4","post_date":"2022-04-04 12:15:26","post_date_gmt":"2022-04-04 12:15:26","thumbnail":[],"thumbnail_mini":[],"thumbnail_retina":[]}],"next":[{"ID":903333,"title":"CentOS 8.0  LEMP环境的性能与安全优化指南2022版","excerpt":"在上一篇文章《从零部署Linux服务器完全指南2022版(CentOS 8+Nginx+PHP)》的基础上，我们完成了LEMP环境的部署，接下去为了提高网站运行的稳定性，我们将对其进行进一步的性能与安全优化。","slug":"performance-and-security-optimization-guide-for-centos8-lemp-environment-2022","post_date":"2022-04-21 16:35:43","post_date_gmt":"2022-04-21 16:35:43","thumbnail":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-matrixflipcomapiwpcontentuploadsccomdddbcddcxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-150x150-matrixflipcomapiwpcontentuploadsccomdddbcddcxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_98d2146dd4b7cd755d21140c-770x340-1-matrixflipcomapiwpcontentuploadsccomdddbcddcxjpg.jpg",770,340,false]}],"post_date":"2022-04-06 17:28:22","post_date_gmt":"2022-04-06 17:28:22","post_status":"publish","comment_status":"open","ping_status":"open","post_password":"","to_ping":"","pinged":"","post_modified":"2022-04-06 17:28:22","post_modified_gmt":"2022-04-06 17:28:22","post_content_filtered":"","post_parent":0,"guid":"https://matrixflip.com/api/?post_type=post&amp;p=893333","menu_order":0,"post_type":"post","post_mime_type":"","comment_count":"0","filter":"raw"},"postID":"the-complete-guide-to-deploying-a-linux-server-from-scratch-version-2022-for-centos8-nginx-php"},"__N_SSG":true}