{"pageProps":{"currentData":{"ID":24272658,"author":"2","author_nickname":"Matrix Flip","author_display_name":"Chuckie Chang","author_url":"","author_username":"changcheng","author_avatar":"https://secure.gravatar.com/avatar/?s=96&d=mm&r=g","categories":[87],"categories_output":[{"ID":87,"slug":"%e5%bc%80%e5%8f%91%e8%b6%a3%e5%91%b3","name":"开发趣味","term_taxonomy_id":87,"term_group":0,"taxonomy":"category","description":"","parent":0,"count":17}],"tags":[305,306,304],"tags_output":[{"ID":305,"slug":"%e4%b8%9a%e5%8a%a1%e6%a1%86%e6%9e%b6","name":"业务框架","term_taxonomy_id":305,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":306,"slug":"%e5%89%8d%e7%ab%af%e6%a1%86%e6%9e%b6","name":"前端框架","term_taxonomy_id":306,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1},{"ID":304,"slug":"%e6%a1%86%e6%9e%b6","name":"框架","term_taxonomy_id":304,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1}],"thumbnail":[],"thumbnail_mini":[],"thumbnail_retina":[],"thumbnail_full":[],"date_day":"18","date_month":"11","date_month_e":"November","date_year":"2022","date_weekday":"Friday","title":"前端框架带来的疑惑与是非","excerpt":"说到框架，行业间的人都无数在争执前后端分离的Vue和React，跨平台软件开发的Qt 和Electron，快速搭建整站的高性能解决方案并可满足全栈需求的Nextjs和Gatsby，它们都有各自的职责和特色，整体上都是为了解决一些共同的问题。那作为用户到底怎么去看待？涉及到业务领域，那么相对应的产品的业务框架，到底又是什么？有没有现成的\"框架\"以供使用？这些问题总是在各种社区充满了战火。","content":"<p>说到框架，行业间的人都无数在争执前后端分离的Vue和React，跨平台软件开发的Qt 和Electron，快速搭建整站的高性能解决方案并可满足全栈需求的Nextjs和Gatsby，它们都有各自的职责和特色，整体上都是为了解决一些共同的问题。那作为用户到底怎么去看待？涉及到业务领域，那么相对应的产品的业务框架，到底又是什么？有没有现成的\"框架\"以供使用？这些问题总是在各种社区充满了战火。</p>\n<p>感觉“框架”这个词其实比较泛，它可以是基于Node的工具，可以是一个开发轮子，可以是UI组件的架构，可以是软件架构，也可以是达成业务的一套系统，可以是测试的一套方案。就好比Scrum敏捷开发框架，其实它不是代码层面的开发框架，而是一种遍布生活每个角落的方法论+思维方式+其它影响的综合体。</p>\n<p>用敏捷开发的一个重要观点来说，就是永远不可能有“最佳实践”，这是一个不断改进，不断探索，不断尝试，不断革新的过程，只有更好更合适，没有最好最合适。这里的最佳实践其实是一个“上限”，框架也一样，是没有上限的。</p>\n<p>同样的，“前端业务框架”，这个框架可以是代码层面的，可以是一种工作流程，可以是一套现成的开发架构，可以是代码层面和工作流的组合，也可以是纯方法论。</p>\n<p>譬如Vue和React只是工具，一种手段，不要把它当成是目的。通常处理大型的业务体系，大厂都有自己的微前端架构，从前中后台、前后端分离、组件化、团队协作、不同的编程语言的兼容、发布测试集成部署一条线，这是一个庞大的体系，它并不一定单纯就是业务框架化，当然也可以绑定一些常用业务功能(注册登录、JWT验证、分页、SEO等)，很大程度能给业务提速提效。需求不同，一定程度上来说业务代码还是需要去手写的，但是工具、组件和软件架构是可以重复利用的。比如WordPress也是属于一个工具，通过它提供的接口可以实现不同的业务需求，它也可以CD/CI化，也可以vue/react化，使用RESTful API，也可以用于Java环境，也可以直接开发小程序，App。</p>\n<p>如果要做套框架，必要的封装肯定是需要的，但是软件设计模式的运用好坏，几乎直接影响了框架的好坏。关乎耦合、维护、迭代、目的、业务实现等方面。</p>\n<p>如果你进一家非常规范的大公司，会需要去适应他们的研发体系，使用他们已经成熟的框架，也许你也只需要负责业务代码。如果项目独立性较强，也不是很庞大，完全可以自己构建工具，或者使用现成的第三方工具完成开发部署。</p>\n<p>其实说了那么多，无非就是：<span style=\"text-decoration: underline;\"><strong>萝卜各有所爱，在什么地方用什么工具，达成目的即可。</strong></span></p>\n<p>同样的原理，细微的差别，换一个人，换一个公司，可能就是另一套“框架”了。无需较真。我觉得真正要在意的，还是底层的技术和基础知识，任何框架都脱离不了他们，基础上去了，学什么框架都只是看看文档快速上手的问题，当然英语要尽量跟上，因为大多实时文档都是英文的。</p>\n<p>如今框架已经非常卷了，开发框架亦是如此，那么设计框架呢？下次再思考一下这个问题。</p>\n","slug":"the-confusion-of-the-front-end-framework","prev":[{"ID":24272280,"title":"理解微前端 - 从部署一套自己的前端开发环境(脚手架)开始","excerpt":"很久以前的前端，没有太多工具化工程化思想，一堆代码塞进去完事儿。如今前端已经很卷，卷到了一个开发环境都够你折腾一宿。那么我们抛开类似nextjs、create-react-app这类的工具或框架，我们该如何从零部署一个属于自己的开发环境呢？这篇文章将讲述如何配置一个基础的脚手架，支持React、TypeScrit和单元测试等必要的功能。在这个基础上，大家能够很方便去个性化脚手架。","slug":"b214e53f0c655e422783718d","post_date":"2022-05-13 08:15:01","post_date_gmt":"2022-05-13 08:15:01","thumbnail":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-matrixflipcomapiwpcontentuploadsccomfcccaxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-150x150-matrixflipcomapiwpcontentuploadsccomfcccaxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_74f6c1c0c632283a68276851-770x340-1-matrixflipcomapiwpcontentuploadsccomfcccaxjpg.jpg",770,340,false]}],"next":[{"ID":24272756,"title":"年终2022","excerpt":"这是一封总结吗？哦也许是，也许不是。但它就是这一年的所有。我将带着从未有过的收获，跟随自己的内心，继续下一步探险。成败？有必要担心吗，生活就是一场体验，干嘛非得给自己加那么多标签，没必要，真的没必要。","slug":"year-end-summary-2022","post_date":"2022-12-27 07:45:03","post_date_gmt":"2022-12-27 07:45:03","thumbnail":[],"thumbnail_mini":[],"thumbnail_retina":[]}],"post_date":"2022-11-18 02:25:38","post_date_gmt":"2022-11-18 02:25:38","post_status":"publish","comment_status":"open","ping_status":"open","post_password":"","to_ping":"","pinged":"","post_modified":"2022-11-18 02:25:38","post_modified_gmt":"2022-11-18 02:25:38","post_content_filtered":"","post_parent":0,"guid":"https://matrixflip.com/api/?p=24272658","menu_order":0,"post_type":"post","post_mime_type":"","comment_count":"0","filter":"raw"},"postID":"the-confusion-of-the-front-end-framework"},"__N_SSG":true}