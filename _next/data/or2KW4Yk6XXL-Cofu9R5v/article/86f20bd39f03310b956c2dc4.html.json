{"pageProps":{"currentData":{"ID":883333,"author":"1","author_nickname":"wpuser","author_display_name":"Chuckie Chang","author_url":"https://matrixflip.com/api","author_username":"wpuser","author_avatar":"https://secure.gravatar.com/avatar/?s=96&d=mm&r=g","categories":[87],"categories_output":[{"ID":87,"slug":"%e5%bc%80%e5%8f%91%e8%b6%a3%e5%91%b3","name":"开发趣味","term_taxonomy_id":87,"term_group":0,"taxonomy":"category","description":"","parent":0,"count":17}],"tags":[301,96,95],"tags_output":[{"ID":301,"slug":"javascript","name":"javascript","term_taxonomy_id":301,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":2},{"ID":96,"slug":"%e5%89%8d%e7%ab%af%e5%bc%80%e5%8f%91","name":"前端开发","term_taxonomy_id":96,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":10},{"ID":95,"slug":"%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f","name":"设计模式","term_taxonomy_id":95,"term_group":0,"taxonomy":"post_tag","description":"","parent":0,"count":1}],"thumbnail":[],"thumbnail_mini":[],"thumbnail_retina":[],"thumbnail_full":[],"date_day":"04","date_month":"04","date_month_e":"April","date_year":"2022","date_weekday":"Monday","title":"23种设计模式的完整例子和分类","excerpt":"设计模式是可复用面向对象软件的基础，也许不知不觉从工作的那时候开始，就已经隐约使用了一些设计模式，但是它们到底是什么呢？常用的设计模式大家并不陌生，搜索引擎也可以搜索到，现在详细回顾一下23种设计模式，如何使用JavaScript实现？","content":"<p><strong><em>本文是对国内外大学教材和专业出版书籍的自主学习和总结，部分代码和文字说明均出自书籍(文章中某些原创的个人见解和内容没有一一标注，请自行甄别)，也可能会有自己的理解和改动，以及平时的实战积累与逻辑转化。</em></strong></p>\n<p>设计模式是可复用面向对象软件的基础，也许不知不觉从工作的那时候开始，就已经隐约使用了一些设计模式，但是它们到底是什么呢？常用的设计模式大家并不陌生，搜索引擎也可以搜索到，现在详细回顾一下23种设计模式，如何使用JavaScript实现？</p>\n<p>先打个比方，MVC是采用模型/视图/控制器来构建用户界面，它的主要关系还是由观察者模式(用来让视图关联，可以互相影响)，组合模式(视图可以嵌套)，策略模式(不同的算法构成不同的视图效果)。设计模式无处不在，那么我们还是详细了解一下吧，顺便使用前端来模拟一下，加深印象。</p>\n<p><em>为了更好地代码阅读，实例代码有经过我的优化和改动。</em></p>\n<h3>几个重要概念</h3>\n<h4>设计模式的四个要素：</h4>\n<p>模式名、问题、解决方案、效果</p>\n<h4>面向对象设计的因素：</h4>\n<p>封装、粒度、依赖关系、灵活性、性能、演化、复用等。</p>\n<h4>接口：</h4>\n<p>对象声明的每一个操作指定操作名、作为参数的对象和返回值，是所谓的操作的[<strong>型构</strong>]。对象操作所定义的所有操作型构的集合被称为该对象的接口。</p>\n<h4>多态：</h4>\n<p>为不同数据类型的实现提供统一的接口。</p>\n<h4>鸭子类型：</h4>\n<p>只关心对象的行为，不关心对象本身（起源：意大利软件工程师、Python软件基金会研究员Alex Martelli 于2000年左右在Python的邮件组中最早将这个概念引入了程序设计范畴中。）</p>\n<h4>面向对象设计的原则：</h4>\n<ul>\n<li>a)针对接口编程，而不是针对实现编程</li>\n<li>b) 优先使用对象组合，而不是类继承(组合和继承也经常同时使用)</li>\n</ul>\n<h3 id=\"分类\">分类</h3>\n<p><img src=\"/static-remote/files/8629b0c3abf260c4c23501d0-matrixflipcomapiwpcontentuploadsbcabfccdjpg.jpg\" alt=\"\" width=\"250\" /></p>\n<h3 id=\"singleton\">Singleton</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>单例</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>一个类的唯一实例（提供一个访问它的全局访问点）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>当我创建了一个JS库，为了方便全站使用，并且有一个醒目的调用名字，可以把它导出为一个唯一的实例，这个实例可以是惰性单例(是指在需要的时候才创建,即使用new关键字)，但是我常常会直接把工具类的单例new之后再导出，这样就可以在脚本中直接调用。</p>\n<p>重要特点是每次请求只能创建一个实例。</p>\n<pre><code class=\"language-js\">const Singleton = (function () {\r\n    let instance;\r\n\r\n    function createInstance() {\r\n        const object = new Object(\"I am the instance\");\r\n        return object;\r\n    }\r\n\r\n    return {\r\n        getInstance: function () {\r\n            if (!instance) {\r\n                instance = createInstance();\r\n            }\r\n            return instance;\r\n        }\r\n    };\r\n})();\r\n\r\n\r\nfunction run() {\r\n    const instance1 = Singleton.getInstance();\r\n    const instance2 = Singleton.getInstance();\r\n    console.log(\"Same instance? \" + (instance1 === instance2));  \r\n}\r\nrun();  // Same instance? true\r\n</code></pre>\n<h3 id=\"abstract-factory\">Abstract Factory</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>抽象工厂</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>产品对象家族（创建相关或相互依赖的结构，无需指定具体类）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>不在 JavaScript 中直接使用, 而是声明一个用于创建产品的接口。</p>\n<pre><code class=\"language-js\">function Employee(name) {\r\n    this.name = name;\r\n\r\n    this.say = function () {\r\n        console.log(\"I am employee \" + name);\r\n    };\r\n}\r\n\r\nfunction EmployeeFactory() {\r\n\r\n    this.create = function (name) {\r\n        return new Employee(name);\r\n    };\r\n}\r\n\r\nfunction Vendor(name) {\r\n    this.name = name;\r\n\r\n    this.say = function () {\r\n        console.log(\"I am vendor \" + name);\r\n    };\r\n}\r\n\r\nfunction VendorFactory() {\r\n\r\n    this.create = function (name) {\r\n        return new Vendor(name);\r\n    };\r\n}\r\n\r\n\r\nfunction run() {\r\n    const persons = [];\r\n    const employeeFactory = new EmployeeFactory();\r\n    const vendorFactory = new VendorFactory();\r\n\r\n    persons.push(employeeFactory.create(\"Joan DiSilva\"));\r\n    persons.push(employeeFactory.create(\"Tim O'Neill\"));\r\n    persons.push(vendorFactory.create(\"Gerald Watson\"));\r\n    persons.push(vendorFactory.create(\"Nicole McNight\"));\r\n\r\n    for (let i = 0, len = persons.length; i &lt; len; i++) {\r\n        persons[i].say();\r\n    }\r\n}\r\nrun();\r\n/*\r\nI am employee Joan DiSilva\r\nI am employee Tim O'Neill\r\nI am vendor Gerald Watson\r\nI am vendor Nicole McNight\r\n*/\r\n\r\n</code></pre>\n<h3 id=\"builder\">Builder</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>创建者</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>如何创建一个组合对象</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>不在 JavaScript 中直接使用, builder用于声明用于创建复杂产品的多个接口（也可以说成需要多个步骤才能创建出一个复杂的产品）。</p>\n<pre><code class=\"language-js\">class Shop {\r\n    init(builder) {\r\n        builder.step1();\r\n        builder.step2();\r\n        return builder.get();\r\n    }\r\n}\r\n\r\nfunction CarBuilder() {\r\n    this.car = null;\r\n\r\n    this.step1 = () =&gt; this.car = new Car();\r\n    this.step2 = () =&gt; this.car.addParts();\r\n    this.get = () =&gt; this.car;\r\n}\r\n\r\nfunction TruckBuilder() {\r\n    this.truck = null;\r\n\r\n    this.step1 = () =&gt; this.truck = new Truck();\r\n    this.step2 = () =&gt; this.truck.addParts();\r\n    this.get = () =&gt; this.truck;\r\n}\r\n\r\nfunction Car() {\r\n    this.doors = 0;\r\n\r\n    this.addParts = () =&gt; this.doors = 4;\r\n    this.say = () =&gt; console.log(\"I am a \" + this.doors + \"-door car\");\r\n}\r\n\r\nfunction Truck() {\r\n    this.doors = 0;\r\n\r\n    this.addParts = () =&gt; this.doors = 2;\r\n    this.say = () =&gt; console.log(\"I am a \" + this.doors + \"-door truck\");\r\n}\r\n\r\nfunction run() {\r\n    const shop = new Shop();\r\n    const carBuilder = new CarBuilder();\r\n    const truckBuilder = new TruckBuilder();\r\n    const car = shop.init(carBuilder);\r\n    const truck = shop.init(truckBuilder);\r\n\r\n    car.say();\r\n    truck.say();\r\n}\r\nrun();\r\n/*\r\nI am a 4-door car\r\nI am a 2-door truck\r\n*/\r\n</code></pre>\n<h3 id=\"factory-method\">Factory Method</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>工厂方法</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>被实例化的子类（定义一个用于创建对象的接口，让子类决定将哪一个类实例化）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>Factory创建新产品的“工厂”对象, 所有产品都支持相同的接口（属性和方法）。</p>\n<pre><code class=\"language-js\">const Factory = function () {\r\n    this.createEmployee = function (type) {\r\n        let employee;\r\n\r\n        switch(type) {\r\n            case 'fulltime' :\r\n                employee = new FullTime();\r\n                break;\r\n            case 'parttime' :\r\n            employee = new PartTime();\r\n            break;\r\n\r\n        }\r\n\r\n        employee.type = type;\r\n        employee.say = function () {\r\n            console.log(this.type + \": rate \" + this.hourly + \"/hour\");\r\n        }\r\n\r\n        return employee;\r\n    }\r\n}\r\n\r\nconst FullTime = function () {\r\n    this.hourly = \"$25\";\r\n};\r\n\r\nconst PartTime = function () {\r\n    this.hourly = \"$8\";\r\n};\r\n\r\n\r\nfunction run() {\r\n\r\n    const employees = [];\r\n    const factory = new Factory();\r\n\r\n    employees.push(factory.createEmployee(\"fulltime\"));\r\n    employees.push(factory.createEmployee(\"parttime\"));\r\n\r\n    for (let i = 0, len = employees.length; i &lt; len; i++) {\r\n        employees[i].say();\r\n    }\r\n}\r\nrun();\r\n/*\r\nfulltime: rate $25/hour\r\nparttime: rate $8/hour\r\n*/\r\n</code></pre>\n<h3 id=\"prototype\">Prototype</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>原型</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>被实例化的类</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>可以通过原型克隆来创建一个新对象。</p>\n<pre><code class=\"language-js\">class CustomerPrototype {\r\n    constructor(product) {\r\n        this.productAttrs = product;\r\n    }\r\n\r\n    clone() {\r\n        const customer = new Customer();\r\n        customer.first = this.productAttrs.first;\r\n        customer.last = this.productAttrs.last;\r\n        customer.status = this.productAttrs.status;\r\n\r\n        return customer;\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction Customer(first, last, status) {\r\n\r\n    this.first = first;\r\n    this.last = last;\r\n    this.status = status;\r\n\r\n    this.say = function () {\r\n        return `name: ${this.first} ${this.last}, status: ${this.status}`;\r\n    };\r\n}\r\n\r\nfunction run() {\r\n\r\n    const product = new Customer(\"F\", \"L\", \"pending\");\r\n    console.log( 'product: ', product.say() );\r\n\r\n    //\r\n    const newProduct = new CustomerPrototype(product);\r\n    const customer = newProduct.clone();\r\n    console.log( 'newProduct: ', customer.say() );\r\n    \r\n}\r\nrun();\r\n/*\r\nproduct:  name: F L, status: pending\r\nnewProduct:  name: F L, status: pending\r\n*/\r\n</code></pre>\n<h3 id=\"adapter\">Adapter</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>适配器</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>对象的接口（将一个类的接口转化为另一个解决兼容性）</p>\n<p><strong>● 使用场景 ●</strong><br />\n客户端调用适配器请求服务后，实现客户期望的接口。同样的输入，可以变成不同的输出或者界面。</p>\n<pre><code class=\"language-js\">// old interface\r\nfunction Shipping() {\r\n    this.request = function (weight) {\r\n        return parseFloat(weight) * 1.5;\r\n    }\r\n}\r\n\r\n// new interface\r\nfunction AdvancedShipping() {\r\n    this.login = function (credentials) { /* ... */ };\r\n    this.calculate = function (weight) { \r\n        return parseFloat(weight) * 2.5;\r\n    };\r\n}\r\n\r\n// adapter interface\r\nfunction ShippingAdapter(credentials) {\r\n    const shipping = new AdvancedShipping();\r\n\r\n    shipping.login(credentials);\r\n\r\n    return {\r\n        request: function (weight) {\r\n            return shipping.calculate(weight);\r\n        }\r\n    };\r\n}\r\n\r\nfunction run() {\r\n\r\n    const shipping = new Shipping();\r\n    const credentials = { token: \"30a8-6ee1\" };\r\n    const adapter = new ShippingAdapter(credentials);\r\n\r\n    let cost = shipping.request(\"2kg\");\r\n    console.log(\"Old cost: $\" + cost);\r\n\r\n    //\r\n    cost = adapter.request(\"2kg\");\r\n    console.log(\"New cost: $\" + cost);\r\n}\r\nrun();\r\n/*\r\nOld cost: $3\r\nNew cost: $5\r\n*/\r\n</code></pre>\n<h3 id=\"bridge\">Bridge</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>桥接</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>对象的实现（抽象与实现分离）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>不在 JavaScript 中直接使用，实现和扩展抽象定义的接口。（属性和方法相同，可能存在接口覆盖，改变其输出的结果）</p>\n<pre><code class=\"language-js\">// input devices\r\nconst EventGestures = function (output) {\r\n    this.output = output;\r\n\r\n    this.tap = function () { this.output.click(); }\r\n    this.swipe = function () { this.output.move(); }\r\n};\r\n\r\n// output devices\r\nconst Screen = function () {\r\n    this.click = function () { console.log(\"Screen select\"); }\r\n    this.move = function () { console.log(\"Screen move\"); }\r\n};\r\n\r\nfunction run() {\r\n    const screen = new Screen();\r\n    const hand = new EventGestures(screen);\r\n\r\n    hand.tap();\r\n    hand.swipe();\r\n}\r\n\r\nrun();\r\n/*\r\nScreen select\r\nScreen move\r\n*/\r\n</code></pre>\n<h3 id=\"composite\">Composite</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>组合</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>一个对象的结构和组成（单个对象和组合对象的使用一致性）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>使用Node(结点)来表示组合中的分支（或子树），维护子组件的集合。</p>\n<pre><code class=\"language-js\">class Node {\r\n    constructor(name) {\r\n        this.children = [];\r\n        this.name = name;\r\n    }\r\n\r\n    add(child) {\r\n        this.children.push(child);\r\n    }\r\n    remove(child) {\r\n        const length = this.children.length;\r\n        for (let i = 0; i &lt; length; i++) {\r\n            if (this.children[i] === child) {\r\n                this.children.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    getChild(i) {\r\n        return this.children[i];\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction run() {\r\n    const tree = new Node(\"root\");\r\n    const left = new Node(\"left\")\r\n    const right = new Node(\"right\");\r\n\r\n    tree.add(left);\r\n    tree.add(right);\r\n    tree.remove(right);\r\n    tree.add(right);\r\n\r\n    console.log(tree);\r\n\r\n}\r\n\r\nrun();\r\n/*\r\n{\r\n    \"children\": [\r\n        {\r\n            \"children\": [],\r\n            \"name\": \"left\"\r\n        },\r\n        {\r\n            \"children\": [],\r\n            \"name\": \"right\"\r\n        }\r\n    ],\r\n    \"name\": \"root\"\r\n}\r\n*/\r\n</code></pre>\n<h3 id=\"decorator\">Decorator</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>装饰</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>对象的职责，不生成子类（动态添加职责）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>定义一个新的接口(符合原始组件的接口)，来扩展原组件的功能。</p>\n<pre><code class=\"language-js\">const User = function (name) {\r\n    this.name = name;\r\n\r\n    this.say = function () {\r\n        console.log(\"User: \" + this.name);\r\n    };\r\n}\r\n\r\nconst DecoratedUser = function (user, street, city) {\r\n    this.user = user;\r\n    this.name = user.name;  // ensures interface stays the same\r\n    this.street = street;\r\n    this.city = city;\r\n\r\n    this.say = function () {\r\n        console.log(\"Decorated User: \" + this.name + \", \" +\r\n            this.street + \", \" + this.city);\r\n    };\r\n}\r\n\r\nfunction run() {\r\n\r\n    const user = new User(\"Kelly\");\r\n    user.say();\r\n\r\n    const decorated = new DecoratedUser(user, \"Broadway\", \"New York\");\r\n    decorated.say();\r\n}\r\nrun();\r\n/*\r\nUser: Kelly\r\nDecorated User: Kelly, Broadway, New York\r\n*/\r\n</code></pre>\n<h3 id=\"facade\">Facade</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>外观</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>一个子系统的接口（定义一个高层接口，一致的界面）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>将目标请求委托给适当的子系统对象(例如：A对象传入，分别用函数a,b,c来运行A对象)，实现并执行专门的子系统功能，得出不同的结果。</p>\n<pre><code class=\"language-js\">const Mortgage = function (name) {\r\n    this.name = name;\r\n}\r\n\r\nMortgage.prototype = {\r\n\r\n    applyFor: function (amount) {\r\n        // access multiple subsystems...\r\n        const status = \"approved\";\r\n        if (!new Bank().verify(this.name, amount)) {\r\n            status = \"denied\";\r\n        } else if (!new Credit().get(this.name)) {\r\n            status = \"denied\";\r\n        } else if (!new Background().check(this.name)) {\r\n            status = \"denied\";\r\n        }\r\n        return `name: ${this.name}, status:  ${status}, amount: ${amount}`;\r\n    }\r\n}\r\n\r\nconst Bank = function () {\r\n    this.verify = function (name, amount) {\r\n        // complex logic ...\r\n        return true;\r\n    }\r\n}\r\n\r\nconst Credit = function () {\r\n    this.get = function (name) {\r\n        // complex logic ...\r\n        return true;\r\n    }\r\n}\r\n\r\nconst Background = function () {\r\n    this.check = function (name) {\r\n        // complex logic ...\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction run() {\r\n    const mortgage = new Mortgage(\"David\");\r\n    const result = mortgage.applyFor(\"$100,000\");\r\n\r\n    console.log(result);\r\n}\r\nrun();  // name: David, status:  approved, amount: $100,000\r\n\r\n</code></pre>\n<h3 id=\"flyweight\">Flyweight</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>享元</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>对象的存储开销（共享技术）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>调用享元工厂获取享元对象(享元工厂内可能会有多个对象)，根据对象是否存在，来维护要在应用程序之间共享的内部数据（可以输出数据，也可以处理数据）。也就是将原数据传递下去，共用，分析和处理它们的异同，根据异同来输出不同的结果，于此同时，不需要在其它函数上再次录入新的数据或者原数据。</p>\n<pre><code class=\"language-js\">const Flyweight = function(make, model, processor) {\r\n    this.make = make;\r\n    this.model = model;\r\n    this.processor = processor;\r\n};\r\n\r\n\r\nclass FlyWeightFactory {\r\n    static data = {};\r\n\r\n    static get(make, model, processor) {\r\n        if ( this.data[`${make}-${model}`] === undefined ) {\r\n            this.data[`${make}-${model}`] = new Flyweight(make, model, processor);\r\n        }\r\n        return this.data[`${make}-${model}`];\r\n    }\r\n\r\n    static getCount() {\r\n        let count = 0;\r\n        for (const f in this.data) count++;\r\n        return count;\r\n    }\r\n}\r\n\r\nfunction ComputerCollection() {\r\n    const computers = {};\r\n    let count = 0;\r\n\r\n    \r\n    const Computer = function (make, model, processor, memory, tag) {\r\n        this.flyweight = FlyWeightFactory.get(make, model, processor);\r\n        this.memory = memory;\r\n        this.tag = tag;\r\n        this.getMake = function () {\r\n            return this.flyweight.make;\r\n        }\r\n        // ...\r\n    };\r\n\r\n    return {\r\n        add: function (make, model, processor, memory, tag) {\r\n            computers[tag] = new Computer(make, model, processor, memory, tag);\r\n            count++;\r\n        },\r\n\r\n        getCount: function () {\r\n            return count;\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\nfunction run() {\r\n    const computers = new ComputerCollection();\r\n\r\n    computers.add(\"Dell\", \"XPS\", \"Intel\", \"5G\", \"Y755P\");\r\n    computers.add(\"Dell\", \"XPS\", \"Intel\", \"6G\", \"X997T\");\r\n    computers.add(\"HP\", \"Envy\", \"Intel\", \"4G\", \"CNU883701\");\r\n\r\n    console.log(\"Computers: \" + computers.getCount());\r\n    console.log(\"Flyweights: \" + FlyWeightFactory.getCount());\r\n}\r\nrun();\r\n/*\r\nComputers: 3\r\nFlyweights: 2\r\n*/\r\n</code></pre>\n<h3 id=\"proxy\">Proxy</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>代理</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>如何访问一个对象；该对象的位置</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>客户端调用代理请求操作，代理提供了最后的结果，并维护一个允许代理访问真实对象的引用。代理会处理各种请求，并转发到真正的对象中。</p>\n<p>代理缓存了频繁请求，如果对象未被缓存则执行真正的服务并将结果存储在缓存中。</p>\n<pre><code class=\"language-js\">function RealOperation() {\r\n    this.getLatLng = function (address) {\r\n        switch (address) {\r\n            case 'Amsterdam' : return \"52.3700° N, 4.8900° E\";\r\n            case 'London' : return \"51.5171° N, 0.1062° W\";\r\n            default : return '';\r\n        }\r\n    };\r\n}\r\n\r\nfunction GeoProxy() {\r\n    const geocoder = new RealOperation();\r\n    const geocache = {};\r\n\r\n    return {\r\n        getLatLng: function (address) {\r\n            if (!geocache[address]) {\r\n                geocache[address] = geocoder.getLatLng(address);\r\n            }\r\n            console.log(address + \": \" + geocache[address]);\r\n            return geocache[address];\r\n        },\r\n        getCount: function () {\r\n            let count = 0;\r\n            for (const code in geocache) { count++; }\r\n            return count;\r\n        }\r\n    };\r\n};\r\n\r\nfunction run() {\r\n\r\n    const geo = new GeoProxy();\r\n\r\n    geo.getLatLng(\"Paris\");\r\n    geo.getLatLng(\"London\");\r\n    geo.getLatLng(\"Amsterdam\");\r\n    geo.getLatLng(\"Amsterdam\");\r\n    geo.getLatLng(\"London\");\r\n    geo.getLatLng(\"London\");\r\n    geo.getLatLng(\"London\");\r\n\r\n    console.log(\"\\nCache size: \" + geo.getCount());\r\n\r\n}\r\nrun();\r\n/*\r\n\r\nParis: \r\nLondon: 51.5171° N, 0.1062° W\r\nAmsterdam: 52.3700° N, 4.8900° E\r\nAmsterdam: 52.3700° N, 4.8900° E\r\nLondon: 51.5171° N, 0.1062° W\r\nLondon: 51.5171° N, 0.1062° W\r\nLondon: 51.5171° N, 0.1062° W\r\n\r\nCache size: 3\r\n*/\r\n</code></pre>\n<h3 id=\"chain-of-responsibility\">Chain of Responsibility</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>职责链</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>满足一个请求的对象（解除请求的发送者和接收者之间的耦合，使多个对象都有机会处理这个请求）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>就算很常用的原型链的写法，一个关键点就是方法中的 return, 要返回这个对象，这样才能形成后继的结果链。</p>\n<pre><code class=\"language-js\">const Request = function (amount) {\r\n    this.amount = amount;\r\n    console.log(\"Requested: $\" + amount + \"\\n\");\r\n}\r\n\r\nRequest.prototype = {\r\n    get: function (bill) {\r\n        const count = Math.floor(this.amount / bill);\r\n        this.amount -= count * bill;\r\n        console.log(\"Dispense \" + count + \" $\" + bill + \" bills\");\r\n        return this; //关键\r\n    }\r\n}\r\nfunction run() {\r\n    const request = new Request(378);\r\n    request.get(100).get(50).get(20);\r\n}\r\nrun();\r\n/*\r\n\r\nRequested: $378\r\n\r\nDispense 3 $100 bills\r\nDispense 1 $50 bills\r\nDispense 1 $20 bills\r\n*/\r\n</code></pre>\n<h3 id=\"command\">Command</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>命令</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>何时、怎样满足一个请求（封装请求，参数化）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>客户端引用一个命令接收器(对象)，接收器知道如何执行与命令相关的操作。把这些命令和相关的函数绑定即可。</p>\n<pre><code class=\"language-js\">function add(x, y) { return x + y; }\r\nfunction sub(x, y) { return x - y; }\r\n\r\nconst Command = function (execute, undo, value) {\r\n    this.execute = execute;\r\n    this.undo = undo;\r\n    this.value = value;\r\n}\r\n\r\nconst AddCommand = function (value) {\r\n    return new Command(add, sub, value);\r\n};\r\n\r\nconst SubCommand = function (value) {\r\n    return new Command(sub, add, value);\r\n};\r\n\r\n\r\nconst Calculator = function () {\r\n    let current = 0;\r\n    const commands = [];\r\n\r\n    function action(command) {\r\n        const name = command.execute.toString().substr(9, 3);\r\n        return name.charAt(0).toUpperCase() + name.slice(1);\r\n    }\r\n\r\n    return {\r\n        execute: function (command) {\r\n            current = command.execute(current, command.value);\r\n            commands.push(command);\r\n            console.log(action(command) + \": \" + command.value);\r\n        },\r\n\r\n        undo: function () {\r\n            const command = commands.pop();\r\n            current = command.undo(current, command.value);\r\n            console.log(\"Undo \" + action(command) + \": \" + command.value);\r\n        },\r\n\r\n        getCurrentValue: function () {\r\n            return current;\r\n        }\r\n    }\r\n}\r\n\r\nfunction run() {\r\n\r\n    const calculator = new Calculator();\r\n\r\n    // issue commands\r\n    calculator.execute(new AddCommand(100));\r\n    calculator.execute(new SubCommand(24));\r\n\r\n    // reverse last two commands\r\n    calculator.undo();\r\n\r\n    console.log(\"\\nValue: \" + calculator.getCurrentValue());\r\n}\r\nrun();\r\n/*\r\n\r\nAdd: 100\r\nSub: 24\r\nUndo Sub: 24\r\n\r\nValue: 100\r\n*/\r\n\r\n</code></pre>\n<h3 id=\"interpreter\">Interpreter</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>解释器</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>一个语言的文法及解释</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>输入一个字符串，构建出这个字符串的相应的语法树，然后使用相应的表达式输出最后的结果。</p>\n<pre><code class=\"language-js\">const Context = function (input) {\r\n    this.input = input;\r\n    this.output = 0;\r\n}\r\n\r\nContext.prototype = {\r\n    startsWith: function (str) {\r\n        return this.input.substr(0, str.length) === str;\r\n    }\r\n}\r\n\r\nconst Expression = function (name, one, four, five, nine, multiplier) {\r\n    this.name = name;\r\n    this.one = one;\r\n    this.four = four;\r\n    this.five = five;\r\n    this.nine = nine;\r\n    this.multiplier = multiplier;\r\n}\r\n\r\nExpression.prototype = {\r\n    interpret: function (context) {\r\n        if (context.input.length == 0) {\r\n            return;\r\n        }\r\n        else if (context.startsWith(this.nine)) {\r\n            context.output += (9 * this.multiplier);\r\n            context.input = context.input.substr(2);\r\n        }\r\n        else if (context.startsWith(this.four)) {\r\n            context.output += (4 * this.multiplier);\r\n            context.input = context.input.substr(2);\r\n        }\r\n        else if (context.startsWith(this.five)) {\r\n            context.output += (5 * this.multiplier);\r\n            context.input = context.input.substr(1);\r\n        }\r\n        while (context.startsWith(this.one)) {\r\n            context.output += (1 * this.multiplier);\r\n            context.input = context.input.substr(1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction run() {\r\n    const roman = \"MCMXXVIII\"\r\n    const context = new Context(roman);\r\n    const tree = [];\r\n\r\n    tree.push(new Expression(\"thousand\", \"M\", \" \", \" \", \" \", 1000));\r\n    tree.push(new Expression(\"hundred\", \"C\", \"CD\", \"D\", \"CM\", 100));\r\n    tree.push(new Expression(\"ten\", \"X\", \"XL\", \"L\", \"XC\", 10));\r\n    tree.push(new Expression(\"one\", \"I\", \"IV\", \"V\", \"IX\", 1));\r\n\r\n    for (let i = 0, len = tree.length; i &lt; len; i++) {\r\n        tree[i].interpret(context);\r\n    }\r\n\r\n    console.log(roman + \" = \" + context.output);\r\n}\r\nrun();\r\n/*\r\n\r\nMCMXXVIII = 1928\r\n*/\r\n</code></pre>\n<h3 id=\"iterator\">Iterator</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>迭代器</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>如何遍历、访问一个聚合的各元素</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>客户端调用迭代器(通常传入一个数组)，迭代器使用方法 first()、next() 等实现迭代器接口遍历对象。</p>\n<pre><code class=\"language-js\">\r\nconst Iterator = function (items) {\r\n    this.index = 0;\r\n    this.items = items;\r\n}\r\n\r\nIterator.prototype = {\r\n    first: function () {\r\n        this.reset();\r\n        return this.next();\r\n    },\r\n    next: function () {\r\n        return this.items[this.index++];\r\n    },\r\n    hasNext: function () {\r\n        return this.index &lt;= this.items.length;\r\n    },\r\n    reset: function () {\r\n        this.index = 0;\r\n    },\r\n    each: function (callback) {\r\n        for (let item = this.first(); this.hasNext(); item = this.next()) {\r\n            callback(item);\r\n        }\r\n    }\r\n}\r\n\r\nfunction run() {\r\n\r\n    const items = [\"one\", 2, \"three\", true];\r\n    const iter = new Iterator(items);\r\n\r\n    // using for loop\r\n    for (let item = iter.first(); iter.hasNext(); item = iter.next()) {\r\n        console.log(item);\r\n    }\r\n    console.log(\"-----\");\r\n\r\n    // using Iterator's each method\r\n    iter.each(function (item) {\r\n        console.log(item);\r\n    });\r\n}\r\nrun();\r\n/*\r\n\r\none\r\n2\r\nthree\r\ntrue\r\n-----\r\none\r\n2\r\nthree\r\ntrue\r\n*/\r\n</code></pre>\n<h3 id=\"mediator\">Mediator</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>中介者</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>对象间怎样交互、和谁交互（用一个中介对象封装交互）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>中介者提供一个通信的接口(会有多个参与者加入，参与者作为参数传递给中介者)，维护和管理一个或者多个对象的引用。</p>\n<pre><code class=\"language-js\">const Participant = function (name) {\r\n    this.name = name;\r\n    this.chatroom = null;\r\n};\r\n\r\nParticipant.prototype = {\r\n    send: function (message, to) {\r\n        this.chatroom.send(message, this, to);\r\n    },\r\n    receive: function (message, from) {\r\n        console.log(from.name + \" to \" + this.name + \": \" + message);\r\n    }\r\n};\r\n\r\nconst Chatroom = function () {  // Mediator\r\n    const participants = {};\r\n\r\n    return {\r\n\r\n        register: function (participant) {\r\n            participants[participant.name] = participant;\r\n            participant.chatroom = this;\r\n        },\r\n\r\n        send: function (message, from, to) {\r\n            if (to) {                      // single message\r\n                to.receive(message, from);\r\n            } else {                       // broadcast message\r\n                for (key in participants) {\r\n                    if (participants[key] !== from) {\r\n                        participants[key].receive(message, from);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nfunction run() {\r\n\r\n    const yoko = new Participant(\"A\");\r\n    const john = new Participant(\"B\");\r\n\r\n    const chatroom = new Chatroom();\r\n    chatroom.register(yoko);\r\n    chatroom.register(john);\r\n\r\n    yoko.send(\"I am A.\");\r\n    yoko.send(\"I am 15.\");\r\n    john.send(\"Hello\", yoko);\r\n}\r\nrun();\r\n/*\r\nA to B: I am A.\r\nA to B: I am 15.\r\nB to A: Hello\r\n*/\r\n</code></pre>\n<h3 id=\"memento\">Memento</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>备忘录</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>一个对象中那些私有信息存放在该对象之外，以及在什么时候进行存储（不破坏封装，捕获对象内部的状态）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>通过一个对象来存储原来的对象的属性，它并不改变原来的对象。这样可以方便在不同的状态时使用存储的数据。</p>\n<pre><code class=\"language-js\">const Person = function (name, state) {\r\n    this.name = name;\r\n    this.state = state;\r\n}\r\n\r\nPerson.prototype = {\r\n\r\n    hydrate: function () {\r\n        const memento = JSON.stringify(this);\r\n        return memento;\r\n    },\r\n\r\n    dehydrate: function (memento) {\r\n        const m = JSON.parse(memento);\r\n        this.name = m.name;\r\n        this.state = m.state;\r\n    }\r\n}\r\n\r\nconst CareTaker = function () {\r\n    this.mementos = {};\r\n    this.add = function (key, memento) {\r\n        this.mementos[key] = memento;\r\n    }\r\n    this.get = function (key) {\r\n        return this.mementos[key];\r\n    }\r\n}\r\n\r\nfunction run() {\r\n\r\n    const mike = new Person(\"AB\", \"TX\");\r\n    const john = new Person(\"CD\", \"CA\");\r\n    const caretaker = new CareTaker();\r\n\r\n    // save state\r\n    caretaker.add(1, mike.hydrate());\r\n    caretaker.add(2, john.hydrate());\r\n\r\n    // mess up their names\r\n    mike.name = \"GGG\";\r\n    john.name = \"MMM\";\r\n\r\n    // restore original state\r\n    mike.dehydrate(caretaker.get(1));\r\n    john.dehydrate(caretaker.get(2));\r\n\r\n    console.log(mike.name);\r\n    console.log(john.name);\r\n}\r\nrun();\r\n/*\r\nAB\r\nCD\r\n\r\n注释掉 dehydrate方法则输出：\r\n\r\nGGG\r\nMMM\r\n\r\n*/\r\n</code></pre>\n<h3 id=\"observer\">Observer</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>观察者</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>多个对象依赖于另外一个对象，而这些对象又如何保持一致（得到通知并自动刷新）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>这种模式实现了松耦合，任意数量的观察者对象都可以观察一个目标对象，实现一个让观察者对象订阅或取消订阅的接口。</p>\n<p>当它的状态改变时向它的观察者发送通知，然后可以调用观察者的绑定的函数来触发事件。</p>\n<p>它也可以说是发布订阅模式，他们都可以增加一个第三者(经纪人：Broker)，来通知发布者/订阅者，它们也可以完全解耦，实质上都是为了让对象之间互不相识却可以相互通信。</p>\n<pre><code class=\"language-js\">function Click() {\r\n    this.handlers = [];  // observers\r\n}\r\n\r\nClick.prototype = {\r\n\r\n    subscribe: function (fn) {\r\n        this.handlers.push(fn);\r\n    },\r\n\r\n    unsubscribe: function (fn) {\r\n        this.handlers = this.handlers.filter(\r\n            function (item) {\r\n                if (item !== fn) {\r\n                    return item;\r\n                }\r\n            }\r\n        );\r\n    },\r\n\r\n    fire: function (o, thisObj) {\r\n        const scope = thisObj || window;\r\n        this.handlers.forEach(function (item) {\r\n            item.call(scope, o);\r\n        });\r\n    }\r\n}\r\n\r\nfunction run() {\r\n\r\n    const clickHandler = function (item) {\r\n        console.log(\"fired: \" + item);\r\n    };\r\n\r\n    const click = new Click();\r\n\r\n    click.subscribe(clickHandler);\r\n    click.fire('event #1');\r\n    click.unsubscribe(clickHandler);\r\n    click.fire('event #2');\r\n    click.subscribe(clickHandler);\r\n    click.fire('event #3');\r\n}\r\nrun();\r\n/*\r\nfired: event #1\r\nfired: event #3\r\n*/\r\n</code></pre>\n<h3 id=\"state\">State</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>状态</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>对象的状态（状态改变时改变它的行为）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>创建一个函数 (上下文，即起到一个承上启下的作用，作为一个中间量，根据输入控制输出) 公开支持目标对象的接口，它用来维护这个引用的对象，并允许改变对象的状态属性。根据这些不同的状态，会有不同的事件触发。</p>\n<pre><code class=\"language-js\">const TrafficLight = function () {\r\n    let count = 0;\r\n    let currentState = new Red(this);\r\n\r\n    this.change = function (state) {\r\n        // limits number of changes\r\n        if (count++ &gt;= 10) return;\r\n        currentState = state;\r\n        currentState.go();\r\n    };\r\n\r\n    this.start = function () {\r\n        currentState.go();\r\n    };\r\n}\r\n\r\nconst Red = function (light) {\r\n    this.light = light;\r\n\r\n    this.go = function () {\r\n        console.log(\"Red --&gt; for 1 minute\");\r\n        light.change(new Green(light));\r\n    }\r\n};\r\n\r\nconst Yellow = function (light) {\r\n    this.light = light;\r\n\r\n    this.go = function () {\r\n        console.log(\"Yellow --&gt; for 10 seconds\");\r\n        light.change(new Red(light));\r\n    }\r\n};\r\n\r\nconst Green = function (light) {\r\n    this.light = light;\r\n\r\n    this.go = function () {\r\n        console.log(\"Green --&gt; for 1 minute\");\r\n        light.change(new Yellow(light));\r\n    }\r\n};\r\n\r\nfunction run() {\r\n\r\n    const light = new TrafficLight();\r\n    light.start();\r\n}\r\nrun();\r\n/*\r\nRed --&gt; for 1 minute\r\nGreen --&gt; for 1 minute\r\nYellow --&gt; for 10 seconds\r\nRed --&gt; for 1 minute\r\nGreen --&gt; for 1 minute\r\nYellow --&gt; for 10 seconds\r\nRed --&gt; for 1 minute\r\nGreen --&gt; for 1 minute\r\nYellow --&gt; for 10 seconds\r\nRed --&gt; for 1 minute\r\nGreen --&gt; for 1 minute\r\n*/\r\n</code></pre>\n<h3 id=\"strategy\">Strategy</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>策略</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>算法（封装一系列算法，独立于使用它的客户）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>创建一个函数 (上下文，即起到一个承上启下的作用，作为一个中间量，根据输入控制输出) 公开支持目标对象的接口，针对当前引用的对象(这个对象可以是纯数据，也可以是其它)，接口允许客户端请求策略计算。</p>\n<p>即相同的数据，提供了不同的算法，来输出不同的结果。</p>\n<pre><code class=\"language-js\">const Shipping = function () {\r\n    this.company = \"\";\r\n};\r\n\r\nShipping.prototype = {\r\n    setStrategy: function (company) {\r\n        this.company = company;\r\n    },\r\n\r\n    calculate: function (package) {\r\n        return this.company.calculate(package);\r\n    }\r\n};\r\n\r\nconst UPS = function () {\r\n    this.calculate = function (package) {\r\n        // calculations...\r\n        return \"$15\";\r\n    }\r\n};\r\n\r\n\r\nconst Fedex = function () {\r\n    this.calculate = function (package) {\r\n        // calculations...\r\n        return \"$25\";\r\n    }\r\n};\r\n\r\nfunction run() {\r\n\r\n    const package = { from: \"76712\", to: \"10012\", weigth: \"lkg\" };\r\n\r\n    // the 3 strategies\r\n    const ups = new UPS();\r\n    const fedex = new Fedex();\r\n\r\n    const shipping = new Shipping();\r\n\r\n    shipping.setStrategy(ups);\r\n    console.log(\"UPS Strategy: \" + shipping.calculate(package));\r\n    shipping.setStrategy(fedex);\r\n    console.log(\"Fedex Strategy: \" + shipping.calculate(package));\r\n}\r\nrun();\r\n/*\r\nUPS Strategy: $15\r\nFedex Strategy: $25\r\n*/\r\n</code></pre>\n<h3 id=\"template-method\">Template Method</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>模板方法</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>算法中的某些步骤（定义骨架）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>首先为一个函数提供一些接口，这些接口是实现定义算法基本步骤的钩子(也可以为空，也可以指定默认的代码)，开发人员可以轻松通过覆盖的方式定义自己的方法(也就是定义一个自定义的模版)</p>\n<pre><code class=\"language-js\">const datastore = {\r\n    process: function () {\r\n        this.connect();\r\n        this.select();\r\n        this.disconnect();\r\n        return true;\r\n    }\r\n};\r\n\r\nfunction inherit(proto) {\r\n    const F = function () { };\r\n    F.prototype = proto;\r\n    return new F();\r\n}\r\n\r\nfunction run() {\r\n    const mySql = inherit(datastore);\r\n\r\n    // implement template steps\r\n\r\n    mySql.connect = function () {\r\n        console.log(\"MySQL: connect step\");\r\n    };\r\n\r\n    mySql.select = function () {\r\n        console.log(\"MySQL: select step\");\r\n    };\r\n\r\n    mySql.disconnect = function () {\r\n        console.log(\"MySQL: disconnect step\");\r\n    };\r\n\r\n    mySql.process();\r\n}\r\nrun();\r\n/*\r\nMySQL: connect step\r\nMySQL: select step\r\nMySQL: disconnect step\r\n*/\r\n</code></pre>\n<h3 id=\"visitor\">Visitor</h3>\n<p><strong>● 中文名 ●</strong></p>\n<p>访问者</p>\n<p><strong>● 可变的方面 ●</strong></p>\n<p>某些可作用于一个(组)对象上的操作，但不修改这些对象的类（如回调函数，回调传参）</p>\n<p><strong>● 使用场景 ●</strong></p>\n<p>让对象可以通过访问者查询，让对象也可以使用访问者的方法，从而可以改变对象的属性值。</p>\n<p>这样做的好处是无需重新创建一次相同的(不同属性值)对象来使用。</p>\n<pre><code class=\"language-js\">const Employee = function (name, salary, vacation) {\r\n    const self = this;\r\n\r\n    this.accept = function (visitor) {\r\n        visitor.visit(self);\r\n    };\r\n\r\n    this.getName = function () {\r\n        return name;\r\n    };\r\n\r\n    this.getSalary = function () {\r\n        return salary;\r\n    };\r\n\r\n    this.setSalary = function (sal) {\r\n        salary = sal;\r\n    };\r\n};\r\n\r\nconst ExtraSalary = function () {\r\n    this.visit = function (emp) {\r\n        emp.setSalary(emp.getSalary() * 1.1);\r\n    };\r\n};\r\n\r\n\r\nfunction run() {\r\n\r\n    const employees = [\r\n        new Employee(\"A\", 10000, 10),\r\n        new Employee(\"B\", 20000, 21),\r\n    ];\r\n\r\n    const visitorSalary = new ExtraSalary();\r\n\r\n    for (let i = 0, len = employees.length; i &lt; len; i++) {\r\n        const emp = employees[i];\r\n\r\n        emp.accept(visitorSalary);\r\n        console.log(`Employee Name: ${emp.getName()} - $${emp.getSalary()} `);\r\n    }\r\n}\r\nrun();\r\n/*\r\nEmployee Name: A - $11000 \r\nEmployee Name: B - $22000 \r\n\r\n注释  accept方法后，输出：\r\n\r\nEmployee Name: A - $10000 \r\nEmployee Name: B - $20000 \r\n*/\r\n</code></pre>\n","slug":"86f20bd39f03310b956c2dc4","prev":[{"ID":873333,"title":"数据结构JavaScript实例学习与研究","excerpt":"既然是写程序，绝对少不了数据结构与算法，自己看过了三种不同的数据结构与算法书籍，虽然大同小异，但是总有一些查缺补漏，为了更好地作为温故而知新的学习材料，这里系统化的进行一次整理。本文列出了栈、队列、链表、字典、集合、散列表、二叉树、平衡二叉树、堆(二叉堆)、图的JavaScript的例子，结合书籍的理论，可以更好地去在实践中理解。","slug":"387801d1d86c145b71221569","post_date":"2022-04-04 11:49:30","post_date_gmt":"2022-04-04 11:49:30","thumbnail":[],"thumbnail_mini":[],"thumbnail_retina":[]}],"next":[{"ID":893333,"title":"从零部署Linux服务器完全指南2022版(CentOS 8+Nginx+PHP)","excerpt":"之前我的一个CentOS 7 Apache的站点被攻击，导致流量过载损失了一笔钱，由于也是边学习边部署的，有不少安全隐患，为了避免常见安全隐患再次发生，后来找出大概的原因后决定重新部署一个基于CentOS 8 Nginx的服务器。这也是充分利用Google和自己探索的一些从零部署的技巧和方法。","slug":"the-complete-guide-to-deploying-a-linux-server-from-scratch-version-2022-for-centos8-nginx-php","post_date":"2022-04-06 17:28:22","post_date_gmt":"2022-04-06 17:28:22","thumbnail":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-matrixflipcomapiwpcontentuploadsccomeabeedcxjpg.jpg",770,340,false],"thumbnail_mini":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-150x150-matrixflipcomapiwpcontentuploadsccomeabeedcxxjpg.jpg",150,150,true],"thumbnail_retina":["/static-remote/files/c945-com_916eabee741055d527937c48-770x340-4-matrixflipcomapiwpcontentuploadsccomeabeedcxjpg.jpg",770,340,false]}],"post_date":"2022-04-04 12:15:26","post_date_gmt":"2022-04-04 12:15:26","post_status":"publish","comment_status":"open","ping_status":"open","post_password":"","to_ping":"","pinged":"","post_modified":"2022-12-30 02:47:18","post_modified_gmt":"2022-12-30 02:47:18","post_content_filtered":"","post_parent":0,"guid":"https://matrixflip.com/api/?post_type=post&#038;p=883333","menu_order":0,"post_type":"post","post_mime_type":"","comment_count":"0","filter":"raw"},"postID":"86f20bd39f03310b956c2dc4"},"__N_SSG":true}